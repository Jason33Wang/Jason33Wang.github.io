<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的糟糕面试经历</title>
    <link href="/2020/06/11/%E6%88%91%E7%9A%84%E7%B3%9F%E7%B3%95%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <url>/2020/06/11/%E6%88%91%E7%9A%84%E7%B3%9F%E7%B3%95%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1><span id="我的糟糕面试经历">我的糟糕面试经历</span></h1><h2><span id="前言">前言</span></h2><p>主要记录一下我的实习面试经历。由于时间很晚了，很多公司都结束了实习招聘。所以一共就面了两个公司。最后一个都没有过。。。。</p><p>整体感受就是，由于自身任务繁重，一开始也没想着找实习，所有没有准备，导致面试在很多细节方面其实就已经挂掉了，很多东西可能还会答不上来。</p><p><strong>感受比较深的就是，研究生平时的工作任务和找工作需要的知识其实不太一样，面试所关心的方面和实际中的实践差别很大，在找工作的过程中，除了需要将已学知识和面试知识向拓展和联系，还需要恶补一些行业关心的软知识和硬知识</strong></p><h2><span id="硬件准备">硬件准备</span></h2><h3><span id="1电脑准备">1电脑准备</span></h3><p>可能你想象不到，在笔试期间，有一次我的电脑死机了。</p><p>主要原因可能是：由于我的硬盘特别小（240G），并且安装了虚拟机（40G）。多年以来除了核心文件放在本机，其余文件都靠移动硬盘支持，所以空余空间就2个G。在面试期间，录制屏幕似乎占用内存，导致内存满了，结果电脑直接死机。导致我的笔试几乎挂了一半。</p><p><strong>结论</strong>：电脑留足空余空间。</p><h3><span id="2面试电话准备">2面试电话准备</span></h3><p>可能某些小白不知道（包括我），有些公司面试采取突击式电话面试（某巴），因此，期间一定要保持电话畅通，另外这些突击式电话面试，不会告知你什么时候面试（不会发消息），所以一定在投出简历后，就要好好准备面经等相关准备。</p><p>而悲催如我，在电脑黑屏，笔试极差的情况下，以为收不到面试，所以没有准备。面试过程中，只有尬笑。而且某巴公司问的问题真的很专业，对应聘的人要求真的很高。</p><h2><span id="面试过程">面试过程</span></h2><h3><span id="1-某为手机公司">1 某为手机公司</span></h3><p>分为笔试-综合笔试-专业面试-综合面试</p><h4><span id="笔试">笔试</span></h4><p>笔试分为3题，两个小时。前两题比较简单，好像就是字符串处理的题目，具体忘了。最后一道是二叉树。整个过程可以用自己电脑的IDE调试，然后粘贴。</p><h4><span id="综合笔试">综合笔试</span></h4><p>这个为什么要提一手，是因为华为的综合笔试，我挂了，打电话过来要我重新考核。我上了网查了一下，华为的综合笔试很多人挂。所以华为的综合笔试要注意下。</p><h4><span id="专业面试">专业面试</span></h4><p>问了链表和数组的查询插入效率</p><p>问了二叉树前序遍历</p><p>问了一下其他项目问题</p><h4><span id="综合面试">综合面试</span></h4><p>主要问题项目的一些比较主观的问题，遇到什么困难，怎么解决，学到了什么之类的。</p><p>总结：该公司的笔试和面试问题都比较简单，也比较顺利，但是最后还是没有拿到offer（满怀期待，结果难受）。不知道为什么，有可能是某些细节做的不够，也有可能是学历不够（博主211，考研失败转的专业也比较尴尬，所以东西都是自学，相当于外行抢饭碗把）。也有可能在项目介绍的过程中，某些回答的不够好吧。但是整个过程中没有什么问题没有回答不上来，相比较知识的考量，可能该公司更加注重你的面试印象，谈吐能力，沟通能力。</p><h3><span id="2-某巴巴公司">2 某巴巴公司</span></h3><p>该公式无疑是业内顶尖。笔试面试都很难，或者说着说入职要求更高。</p><h4><span id="笔试">笔试</span></h4><p>笔试一共两道题，一道排列组合题。</p><p>个人感觉比较简单，很快我就写完了，结果可惜ac不了。本身是一道数学题排列组合题。应该不需要动态规划，因为该题目可以求出一个数学公式，但是数字非常大，涉及到幂指运算。我自己测试的几个例子都是正确结果，但是提交的时候总是ac不了，提示运算时间太长。所以我整个人就非常晕。例外提一句，我用的是python3。</p><p>另外一题是一个路径规划问题，根本动不了笔，加上电脑死机和只有一个小时，你懂得，只能放弃。所以结果是一道题都没有ac通过（所以啊，道友们，疯狂刷题吧！！）。</p><h4><span id="面试">面试</span></h4><p>面试是很意外的电话面试，根本以为自己收不到面试的，因为笔试全程拉稀。</p><p>所以笔试完后根本没有看面经准备。</p><p>面试过程中，面试官问我计算机网络，数据库什么的擅长什么。</p><p>然后我很懵，所以就说都还可以。</p><p><strong>1、结果直接就开问，数据的索引结构有哪些？</strong></p><p>作为一个搬轮子的人，平时科研也就crud一下，根本不管这些，所以直接回答只会用，怎么优化不会（第一个问题心态炸裂）。</p><p><strong>2、问了我mybatis和redis的区别？</strong></p><p>我信心满满回答了，结果他说我我理解的有差错，我面试后百度了一下，回答的的确有问题。（心态第二次炸裂）</p><p><strong>3、期间聊到了项目的一个ajax拿数据的问题，他问post和get请求是什么协议？</strong></p><p>我回答tcp、ip协议。（其实是http协议，心态第三次炸裂）</p><p>整个面试过程中，问了很多问题，其他都记不住了（一个月了才写这篇博客）。</p><h4><span id="总结">总结</span></h4><p>总体上，该公司面试的比较细，会问一些项目细节的问题，这对一些搬轮子的人而言，如果不准备相关的概念知识就会非常被动。另外，在面试时一定学会导向，将话题引向自己熟悉的只是上来。无疑，我是一个非常失败的例子。没有丝毫准备，电话突击也让我大脑紧张，思路卡壳。整个面试过程，自己越聊越心虚，面试印象可想而知。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浊以静之徐清 安以动之徐生</title>
    <link href="/2020/04/14/%E7%BD%AE%E9%A1%B6/"/>
    <url>/2020/04/14/%E7%BD%AE%E9%A1%B6/</url>
    
    <content type="html"><![CDATA[<h1><span id="希望让你感受到生活的美好">希望让你感受到生活的美好</span></h1><p><img src="/img/bg19.jpg" srcset="/img/loading.gif" alt="bg19"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22822507&auto=1&height=66"></iframe><h1><span id="爱情">爱情</span></h1><blockquote><p>“你的信太过官方，都不说想我。”——周总理给邓颖超的信</p><p>“周总理是大忙人，哪有时间来想我。”——邓回信</p><p>“闲人怎么知道忙人多想闲人。”——周总理回信</p><p>“我这一生都是坚定不移的唯物主义者，唯有你，我希望有来生”——周恩来致邓颖超</p></blockquote><h1><span id="生活">生活</span></h1><blockquote><p>如果白昼的语言已经枯朽，就用黑夜的梦语，用诗的性灵。 ——史铁生</p><p>所谓无底深渊，下去，也是前程万里。                                              ——木心</p><p>斑竹半帘，唯道我心清似水；黄粱一梦，任他世事冷如冰。 ——陈继儒</p><p>时光，浓淡相宜，人心，远近相安。流年，长短皆逝。浮生，往来皆客。</p><p>——陈继儒</p><p>如果人们告诉你过去的事情无法挽回，不要相信他们。过去、现在和未来在上帝眼中不过一瞬间，在他的注视下，我们都要努力生活。   ——王尔德</p></blockquote><h1><span id="简嫃">简嫃</span></h1><blockquote><p>我是个半盲的人，不论是富贵之身，还是白丁流民，我都把他们请进喝酒。</p><p>我是个半聋的人，不论是江湖恩怨，还是冤家宿仇，既喝酒就不宜多说。</p><p>我是个半哑的人，人的故事，山川风月比我更清楚；要听道理，士子僧侣比我更了然；要问路，樵夫钓叟比我更熟知。</p><p>你若问我姓名？我说，柴屋、青松、白石、雪暮，随你称呼。</p><p>你若问我，走的是哪条路？我说，是哭过能笑，记时能忘，醒后能醉的那条小径。</p><p>你还要问我是什么样的人？我说，是个春天种树、秋天扫落叶的人。</p></blockquote><h1><span id="今生还是来世">今生还是来世?</span></h1><blockquote><p>如果有来生，要做一棵树，站成永恒，没有悲欢的姿势。一半在尘土里安详，一半在风里飞扬；一半洒落阴凉，一半沐浴阳光。非常沉默，非常骄傲，从不依靠，从不寻找。                                                  ——三毛</p></blockquote><h1><span id="自己">自己</span></h1><blockquote><p>你的时间有限，所以不要为别人而活。不要被教条所限，不要活在别人的观念里。不要让别人的意见左右自己的声音。最重要的是勇敢地去追寻自己的心灵和直觉，只有自己的心灵和直觉才知道你自己的真实想法，其他一切都是次要。 ——史蒂夫乔布斯</p><p>不管全世界所有人怎么说，我都认为自己的感受才是正确的。无论别人怎么看，我绝不打乱自己的节奏。喜欢的事自然可以坚持，不喜欢的怎么也长久不了。</p><p>​                                                      ——村上春树</p></blockquote><h1><span id="文明">文明</span></h1><blockquote><p>给岁月以文明，而不是给文明以岁月。 《三体》</p></blockquote><h1><span id="孩子的诗">孩子的诗</span></h1><blockquote><p>作者：寻子陌</p><p>《灯》</p><p>灯把黑夜</p><p>烫了一个洞</p><p>《光》</p><p>晚上</p><p>我打着手电筒散步</p><p>累了就拿它当拐杖</p><p>我拄着一束光</p><p>《回到地面》</p><p>要是笑过了头</p><p>你就会飞到天上去</p><p>要想回到地面</p><p>你就必须做一件伤心事</p><p>《打仗》</p><p>假如我</p><p>生活在战争的年代</p><p>别人冲在前线</p><p>我就只能在旁边</p><p>喊加油</p><p>《原谅》</p><p>春天来了</p><p>我去小溪边砸冰</p><p>把春天砸得头破血流</p><p>直淌眼泪</p><p>到了花开的时候</p><p>它就把那些事儿忘了</p><p>真正原谅了我</p><p>《我画的树太漂亮了吧》</p><p>我画的树</p><p>太漂亮了</p><p>接下来画的鸟</p><p>画的云</p><p>画的池塘和花朵</p><p>都配不上它</p><p>《眼睛》</p><p>我的眼睛很大很大</p><p>装得下高山</p><p>装得下大海</p><p>装得下蓝天</p><p>装得下整个世界</p><p>我的眼睛很小很小</p><p>有时遇到心事</p><p>就连两行泪</p><p>也装不下</p><p>《很多》</p><p>我挥挥手</p><p>就有很多手</p><p>我跑步</p><p>就有很多脚</p><p>小狗朝我摇尾巴</p><p>就有很多尾巴</p><p>然后</p><p>我打秋千</p><p>就有很多我</p><p>《春天》</p><p>春天</p><p>是只大懒虫</p><p>妈妈叫了好久</p><p>也不醒</p><p>春雷公公来了</p><p>把它的大鼓</p><p>一敲</p><p>吓得春天</p><p>滚到了</p><p>大地上</p><p>《鱼汤》</p><p>我对鱼说</p><p>来吧</p><p>来岸上吧</p><p>辞掉你水中的工作</p><p>在旅游中升华自我</p><p>告别那水中的污浊</p><p>让天空净化你的魂魄</p><p>鱼对我说</p><p>如果我信了你的心灵鸡汤</p><p>今晚我就会变成鱼汤</p><p>《秘密》</p><p>妈妈说我是捡来的</p><p>我笑了笑</p><p>我不想说出一个秘密</p><p>——怕妈妈伤心</p><p>我知道</p><p>爸爸姓万</p><p>哥哥姓万</p><p>我也姓万</p><p>只有妈妈姓姜</p><p>谁是捡来的</p><p>不说你也明白</p><p>嘘！我会把这个秘密永远藏在心中</p><p>《梦想》</p><p>我有一个梦想</p><p>想去一个地方</p><p>和风一起飘荡</p><p>你可知是何方</p><p>处处鸟语花香</p><p>对着大海歌唱</p><p>想在梦中一样</p><p>《我想变》</p><p>我想变</p><p>我想变成一棵树</p><p>我开心时</p><p>开花</p><p>我不开心时</p><p>落叶</p><p>《风在算钱》</p><p>谁也没有看见过风</p><p>不用说我和你了</p><p>但是纸币在飘的时候</p><p>我们知道风在算钱</p><p>《我》</p><p>我们班上的学生数</p><p>要加上我</p><p>才是26个</p><p>我们国家的总人口</p><p>我也</p><p>占了一个名额</p><p>计算地球重量时</p><p>我的体重应该也包含在内吧</p><p>在这浩瀚的</p><p>宇宙中</p><p>我占的空间</p><p>会有多大呢</p><p>妈妈说</p><p>没有我</p><p>整个家都好像空了</p><p>《勇气》</p><p>你可以的</p><p>人们对我说</p><p>要有勇气</p><p>人们对我说</p><p>所以我</p><p>鼓足了勇气</p><p>鼓起勇气</p><p>对他们说</p><p>我不行</p><p>《借》</p><p>你是我的好同学</p><p>铅笔可以借</p><p>橡皮可以借</p><p>书本可以借</p><p>答案总不能借吧</p><p>内容天真可爱</p><p>逻辑清晰，语言流畅</p><p>想象力十分丰富</p><p>还会灵活运用排比、比喻等修辞手法</p><p>这些平均年龄不到十岁的孩子们</p><p>将来一定是前途无量</p><p>另外</p><p>还发现了一批</p><p>出自熊孩子的作品</p><p>忍不住感叹一句</p><p>脑洞可真大啊</p><p>来自熊孩子的</p><p>“扎心”系列</p><p>《诗一首》</p><p>啊！我的妈妈美如鲜花，</p><p>噢！我的爸爸丑如泥巴。</p><p>咦！为何妈妈爱爸爸呢？</p><p>哎！因为花不可没泥巴。</p><p>《说明书》</p><p>妈妈总说，</p><p>她管不住我。</p><p>噢！妈妈</p><p>难道医院没给你说明书吗？</p><p>《期末总结》</p><p>1、有本事冲我来，别在家长会上吓唬我爸！</p><p>2、期末考试成绩出来了，我觉得我妈生二胎是非常明智的选择。</p><p>3、这场考试对于我的意义就是，知道了班级到底有多少人。</p><p>4、期末考试不给老师们露一手，他们还真以为自己教得好。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>心灵鸡汤</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trojan配置</title>
    <link href="/2020/03/26/Trojan%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/03/26/Trojan%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<hr><h1><span id="科学上网">科学上网</span></h1><p>需要一下步骤:</p><ul><li>vps</li><li>namesilo 买一个自己的域名</li><li>cloud DNS解析</li></ul><h1><span id="教程by番茄style">教程By番茄style</span></h1><blockquote><p>atrandys大佬的一键安装脚本</p><p>系统要求及脚本介绍<br>1、系统支持centos7+/debian9+/ubuntu16+</p><p>2、域名需要解析到VPS并生效。</p><p>3、脚本自动续签https证书</p><p>4、自动配置伪装网站，位于/usr/share/nginx/html/目录下，可自行替换其中内容</p><p>5、请不要在任何生产环境使用一键脚本，此条适用于本站所有脚本，专门用来科学上网的VPS可以随意使用。</p><p>6、trojan不能用CDN，不要开启CDN</p><p>7、如果你在用谷歌云、阿里云等产品的时候，需要在控制台开放80、443端口。</p><p>BBR一键安装代码：<br>wget –no-check-certificate <a href="https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh</a> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</p><p>若报错运行以下代码，不报错跳过：<br>yum -y install wget<br>rm -f /var/run/yum.pid</p><p>./tcp.sh</p><p>一、使用一键脚本安装<br>复制以下命令在VPS中执行，选择安装trojan，然后输入解析到VPS的域名并回车（不要带http://，只输入域名，例如atrandys.com或者xxx.atrandys.com），开始安装，然后等待安装完成即可。</p><p>注意：如果提示SELinux状态问题，请按要求输入Y重启VPS，然后再执行本脚本，否则可能https证书申请出错</p><p>curl -O <a href="https://raw.githubusercontent.com/atrandys/trojan/master/trojan_mult.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/atrandys/trojan/master/trojan_mult.sh</a> &amp;&amp; chmod +x trojan_mult.sh &amp;&amp; ./trojan_mult.sh</p><p>二、下载Windows客户端<br>安装完成后，会展示一条下载地址，复制地址，并下载下来即可。</p><p>如果你真的忘记下载了，那么进入/usr/share/nginx/html/目录下，找到一个乱码文件夹，进入会看到客户端文件，使用sftp下载下来即可。</p><p>三、搭配浏览器插件使用<br>解压缩下载的trojan-cli.zip的压缩包，进入文件夹，双击start.bat，开启Trojan服务，Trojan会监听本地1080端口。然后下载SwitchyOmega</p><p>下载插件：SwitchyOmega</p><p>规则1：<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a><br>规则2：<a href="https://raw.githubusercontent.com/atrandys/proV/master/fgfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/atrandys/proV/master/fgfwlist.txt</a></p><p>电脑上其他软件如何使用Trojan<br>1、如果软件支持配置socks5，直接指向127.0.0.1：1080即可。</p><p>2、如果软件不支持配置socks5，可选择sstap/sockscap64/supercap等软件，曲线实现代理。</p><p>常见问题总结<br>1、Trojan客户端打开无法运行，提示缺少找不到vcruntime140.dll或找不到msvcp140.dll。</p><p>原因缺少运行库，下载链接中的两个软件，一个是32位一个是64位，请全部安装即可：<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/details.aspx?id=48145</a></p><p>2、如果遇到vcruntime140_1的错误，下载下面的文件放到C:\windows\system32目录下即可</p><p>下载140_1.dll：<a href="https://github.com/atrandys/trojan/raw/master/vcruntime140_1.dll" target="_blank" rel="noopener">https://github.com/atrandys/trojan/raw/master/vcruntime140_1.dll</a></p><p>3、trojan服务端怎么修改密码</p><p>trojan服务端配置文件路径如下，如需修改内容，修改以下文件即可。</p><p>/usr/src/trojan/server.conf<br>修改完成后，重启trojan服务端即可，同时客户端的密码也要同步修改哦。</p><p>systemctl restart trojan<br>4、chrome插件switchyomega无法安装</p><p>参考这篇文章，离线安装chrome插件方法：<a href="https://www.atrandys.com/2019/2149.html" target="_blank" rel="noopener">https://www.atrandys.com/2019/2149.html</a></p><p>5、关于申请证书没有成果的处理</p><p>可能的原因1：</p><p>一些原因导致使用nginx申请证书时出错，要么防火墙端口没开放，要么nginx未正常。建议用最纯净的系统安装。</p><p>可能的原因2:</p><p>出现这个问题最可能的原因之一是你的同一个域名多次申请证书，导致let’s encrypt官方的限制，同一域名每周最多5次申请。</p><p>最简单的Trojan一键脚本，效率高/速度快/延迟低，支持tls1.3，系统支持centos7+/debian9+/ubuntu16+</p><p>如果你的同一个域名申请了很多此证书，这个处理方法可能有用：更换二级域名，例如原来使用的域名是<a href="http://www.abc.com或abc.com或xyz.abc.com，那么现在你添加一个二级域名解析例如xxx.abc.com，安装时使用这个域名即可。" target="_blank" rel="noopener">www.abc.com或abc.com或xyz.abc.com，那么现在你添加一个二级域名解析例如xxx.abc.com，安装时使用这个域名即可。</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubunt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记5</title>
    <link href="/2020/02/05/django%E7%AC%94%E8%AE%B05/"/>
    <url>/2020/02/05/django%E7%AC%94%E8%AE%B05/</url>
    
    <content type="html"><![CDATA[<h1><span id="djang高级扩展">Djang高级扩展</span></h1><h2><span id="静态文件">静态文件</span></h2><p>包括：css、js、图片、json文件、字体文件等</p><p>配置setting.py文件</p><pre class="line-numbers language-python"><code class="language-python">STATICFILES_DIRS<span class="token operator">=</span><span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者静态引用</p><pre class="line-numbers language-html"><code class="language-html">{% load static from staticfiles %}<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/myApp/css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/myApp/js/hello.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>jason is a good man<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/myApp/img/2.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% static <span class="token punctuation">'</span>myApp/img/2.png<span class="token punctuation">'</span>%}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="中间件">中间件</span></h2><p><strong>概述</strong></p><p>一个轻量级、底层的插件、可以介入Django的请求和响应</p><p><strong>本质</strong></p><p>一个python类</p><p><strong>方法</strong></p><ul><li><p><code>__init__</code>:不需要传参数，服务器响应第一个请求的时候自动调用，用于确定是否启用该中间件</p></li><li><p><code>process_request(self,request)</code>:在执行视图之前被调用(分配url匹配视图之前)，每个请求上都会调用。返回None或者HttpResponse</p></li><li><code>process_view(self,request,view_func,view_args,view_kwarfs)</code>:调用视图之前执行，每个请求都会调用。返回None或者HttpResponse</li><li><code>process_template_response(self,request,response)</code>:在视图刚好执行完后调用，每个请求上都会调用。返回None或者HttpResponse。</li><li><code>process_response(self,request,response)</code>:所有响应返回浏览器之前调用，每个请求上都会调用。返回HttpResponse。</li><li><code>process_exception(self,request,exception)</code>:当视图跑出异常时调用，返回HttpResponse。</li><li><img src="//yoursite.com/2020/02/05/django笔记5/image-20200203223510982.png" srcset="/img/loading.gif" alt="image-20200203223510982"></li></ul><h2><span id="自定义中间件">自定义中间件</span></h2><ul><li><p>新建<code>项目/middleware/myApp</code>文件夹，在这下面自定义中间件<code>myMiddle.py</code></p></li><li><p>配置setting.py文件</p></li></ul><pre class="line-numbers language-python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'middleware.myApp.myMiddle.MyMiddle'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>myMiddle.py</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">MyMiddle</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"get参数为:"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="上传图片">上传图片</span></h2><p><strong>概述</strong></p><ul><li>文件上传时，文件数据存储在request.FILES属性中</li><li>注意：form表单要上传文件需要加属性<code>enctype=&quot;multipart/form-data&quot;</code></li><li>注意：上传必须是post请求</li></ul><p><strong>存储路径</strong></p><ul><li><p>在static目录下创建upfile目录用于存储接收上传的文件</p></li><li><p>配置setting.py文件</p></li></ul><pre class="line-numbers language-python"><code class="language-python">MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span>r<span class="token string">'static/upfile'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>代码示例</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/savefile/<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {% csrf_token %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">upfile</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/upfile.html'</span><span class="token punctuation">)</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">def</span> <span class="token function">savefile</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">"POST"</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 文件在服务器端的路径</span>        file_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">,</span>f<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token keyword">for</span> info <span class="token keyword">in</span> f<span class="token punctuation">.</span>chunks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="分页">分页</span></h2><p><strong>Paginator对象</strong></p><ul><li>创建对象<ul><li>格式：<code>Paginator(列表，整数)</code></li><li>返回值：返回一个分页对象</li></ul></li><li>属性<ul><li>count：对象总数</li><li>num_pages：页面总数</li><li>page_range：页码列表，从1开始</li></ul></li><li>方法<ul><li><code>page(num)</code>：获得一个Page对象，如果提供的页码不存在会抛出<code>InvalidPage</code>异常</li></ul></li><li>异常<ul><li><code>InvalidPage</code>：当向page()传递的是一个无效的页码时抛出的异常</li><li><code>PageNotInteger</code>：当向page()传递的不是一个整数时抛出</li><li><code>EmptyPage</code>：当向page()传递一个有效值，但是该页面没有数据时抛出</li></ul></li></ul><p><strong>page对象</strong></p><ul><li>创建对象<ul><li>Paginator对象的page()方法返回得到Page对象，不需要手动创建</li></ul></li><li>属性<ul><li><code>Object_list</code>：当前页上所有的数据（对象）列表</li><li><code>nnumber</code>：当前页的页码值</li><li><code>paginator</code>:当前page对象关联的Paginator对象</li></ul></li><li>方法<ul><li><code>has_next()</code>：判断是否有下一页，如果有返回True</li><li><code>has_previous()</code>：判断是否有上一页，如果有返回True</li><li><code>has_other_pages()</code>：判断是否有其他页（上一页或者下一页），如果有返回True</li><li><code>next_page_number()</code>：返回下一页的页码，如果下一页不存在抛出<code>InvalidPage</code>异常</li><li><code>previous_page_number()</code>：返回上一页的页码，如果上一页不存在抛出<code>InvalidPage</code>异常</li><li><code>len</code>：放回当前页的数据对象个数</li></ul></li></ul><p><strong>代码示例</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分页</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> Paginator<span class="token keyword">def</span> <span class="token function">studentpage</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>pageid<span class="token punctuation">)</span><span class="token punctuation">:</span>    allList <span class="token operator">=</span> Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>allList<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    page<span class="token operator">=</span>paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>pageid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>page_range<span class="token punctuation">)</span>    retu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>分页显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        {% for stu in students%}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            {{stu.sname}}--{{stu.sgrade}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% endfor%}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        {% for index in students.paginator.page_range %}        {% if index == students.number %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> {{index}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% else %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/studentpage/{{index}}/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> {{index}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% endif %}        {% endfor %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="ajax">ajax</span></h2><p><strong>示例</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>学生信息列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>学生信息列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示学生信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/myApp/js/stu.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span><span class="token string">"/studentsinfo/"</span><span class="token punctuation">,</span>            dataType<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token keyword">var</span> d <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>d<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;p>'</span><span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ajaxstudents</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"myApp/ajaxstudents.html"</span><span class="token punctuation">)</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token keyword">def</span> <span class="token function">studentsinfo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    stus <span class="token operator">=</span> Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> stu <span class="token keyword">in</span> stus<span class="token punctuation">:</span>        list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>stu<span class="token punctuation">.</span>sname<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>sage<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span>list<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="富文本">富文本</span></h2><ul><li><p>安装：<code>pip install django-tinymce</code></p></li><li><p>在站点中使用</p><ul><li>配置setting.py文件。</li></ul><pre class="line-numbers language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'tinymce'</span><span class="token punctuation">]</span>TINYMCE_DEFAULT_CONFIG<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'theme'</span><span class="token punctuation">:</span><span class="token string">'advanced'</span><span class="token punctuation">,</span>    <span class="token string">'width'</span><span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">,</span>    <span class="token string">'height'</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加模型文件</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> tinymce<span class="token punctuation">.</span>models <span class="token keyword">import</span> HTMLField<span class="token keyword">class</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    str <span class="token operator">=</span> HTMLField<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>配置站点（admin.py文件配置）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Textadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在自定义视图中使用</p><ul><li>主要展示html代码</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>富文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/tiny_mce/tiny_mce.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        tinyMCE<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">'mode'</span><span class="token punctuation">:</span> <span class="token string">'textareas'</span><span class="token punctuation">,</span>            <span class="token string">'theme'</span><span class="token punctuation">:</span><span class="token string">'advanced'</span><span class="token punctuation">,</span>            <span class="token string">'width'</span><span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span>            <span class="token string">'height'</span><span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jason is a good man<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="celery">celery</span></h2><p>文档地址：<code>http://docs.jinkan.org/docs/celery/</code></p><p><strong>问题</strong></p><ul><li>用户发起request，并且要等待response返回，但是在视图中有一些耗时的操作，导致用户可能会response的返回很慢</li><li>网站每隔一段时间要同步一次数据，但是http请求是需要触发的。</li></ul><p><strong>解决</strong></p><ul><li>celery解决：<ul><li>将耗时的操作放到celery中执行</li><li>使用celery定时执行</li></ul></li></ul><p><strong>celery</strong></p><ul><li>任务task：本质是一个python函数，将耗时操作封装成一个函数</li><li>队列queue：将要执行的任务放到队列里</li><li>工人worker;负责执行队列中的任务</li><li>代理broker：负责调度，在部署环境中使用redis</li></ul><p><strong>安装</strong></p><ul><li><code>pip install celery</code></li><li><code>pip install celery-with-redis</code></li><li><code>pip install django-celery</code></li></ul><p><strong>配置settings.py</strong></p><pre class="line-numbers language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'djcelery'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#celery</span><span class="token keyword">import</span> djcelerydjcelery<span class="token punctuation">.</span>setup_loader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#初始化</span>BROKER_URL <span class="token operator">=</span><span class="token string">'redis://:127.0.0.1:6379/0'</span>CELERY_IMPORTS<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'myApp.task'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在应用目录下创建task.py文件</strong></p><p><strong>迁移，生成celery需要的数据库表</strong></p><p><code>python manage.py migrate</code></p><p><strong>在工程目录下的project目录下创建celery.py的文件</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token keyword">import</span> os<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settingsos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span><span class="token string">'whthas_home.settings'</span><span class="token punctuation">)</span>app<span class="token operator">=</span>Celery<span class="token punctuation">(</span><span class="token string">'portal'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config_from_object<span class="token punctuation">(</span><span class="token string">'django.conf:settings'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>autodiscover_tasks<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span>settings<span class="token punctuation">.</span>INSTALLED_APPS<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug_task</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Request:{0!r}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在工程目录下的<code>__init__.py</code>文件添加</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app <span class="token keyword">as</span> celert_app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在task.py文件中添加</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> task<span class="token keyword">import</span> time<span class="token keyword">from</span> celery <span class="token keyword">import</span> shared_task@shared_task<span class="token keyword">def</span> <span class="token function">jason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"jason is a good man"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"jason is a nice man"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>利用delay方法执行</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>task <span class="token keyword">import</span> jason<span class="token keyword">def</span> <span class="token function">celery</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    jason<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/celery.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记4</title>
    <link href="/2020/02/05/django%E7%AC%94%E8%AE%B04/"/>
    <url>/2020/02/05/django%E7%AC%94%E8%AE%B04/</url>
    
    <content type="html"><![CDATA[<h1><span id="day3-视图">day3 视图</span></h1><h2><span id="概述">概述</span></h2><blockquote><ul><li><p>作用：视图接受web请求，并响应web请求</p></li><li><p>本质：视图就是一个python函数</p></li><li><p>响应：</p></li><li><p>网页</p><ul><li>重定向</li><li>错误视图</li></ul></li><li><p>json数据</p></li><li><p>过程</p></li></ul><p><img src="//yoursite.com/2020/02/05/django笔记4/image-20200129123737853.png" srcset="/img/loading.gif" alt="image-20200129123737853"></p></blockquote><h2><span id="url配置">url配置</span></h2><p>配置流程</p><ul><li><p>设置根级url配置文件</p><ul><li>设置<code>setting.py</code>文件中的<code>ROOT_URLCONF</code></li><li><code>ROOT_URLCONF=Progject.urls</code></li><li>默认实现了</li></ul></li><li><p>urlpatterns</p><ul><li>一个url实例的列表 </li><li>一个url对象包括：<ul><li>正则表达式</li><li>视图名称</li><li>名称</li></ul></li></ul></li><li><p>url匹配正则的注意事项</p><ul><li>如果想要从url中获得一个值，需要对正则加小括号</li><li>匹配正则前方不需要加反斜杠</li><li>正则前需要加<code>r</code>表示字符串不转义</li></ul></li><li><p>引入其他url配置</p><ul><li><p>在应用中创建<code>urls.py</code>文件，定义本应用的url配置，在工程<code>urls.py</code>文件中使用<code>include()</code>管理项目的urls文件。这样可以方便管理该项目下不同应用之间的url管理。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在project/urls.py 文件中</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span>include<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> adminurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'myApp.urls'</span><span class="token punctuation">,</span>namespace<span class="token operator">=</span><span class="token string">'myApp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在myApp/urls.py文件中添加</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index，name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>url的反向解析</p><ul><li>概述：如果在视图、模板中使用了硬编码链接，在url配置发生改变时，相应的url路径都需要进行修改</li><li>解决：在使用链接时，通过url配置的名称，动态生成url地址</li><li>常使用与url模板</li></ul></li></ul><h2><span id="视图函数">视图函数</span></h2><ul><li><p>定义视图</p><ul><li>本质：一个函数</li><li>视图参数：<ul><li>1、<code>request</code> 一个<code>HttpRequest</code>的实例 </li><li>2、通过正则表达式获取的参数</li><li>位置：一般在<code>viwes.py</code>文件中定义（官方不建议在其他文件中定义）</li></ul></li></ul></li><li><p>错误视图</p><ul><li><p><code>404</code>视图：<code>url</code>匹配不成功时返回该错误</p><ul><li><p>可以在<code>templates</code>目录下定义<code>404.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>404 error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>找不到对应的页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{request_path}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>request_path</code>：导致错误的网址</li></ul></li><li><p>配置<code>setting.py</code>文件</p><pre class="line-numbers language-python"><code class="language-python">DEBUG <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true">#等于True，永远都不会调用404界面</span>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#允许任何用户访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><code>500</code>视图：在视图代码中出现错误（服务器内部错误）</p></li><li><p><code>400</code>视图：错误出现于客户操作错误</p></li></ul></li></ul><h2><span id="httprequest对象">HttpRequest对象</span></h2><p><strong>概述：</strong></p><ul><li>服务器接收http请求后，会根据报文创建<code>HttpRequest</code>对象</li><li>视图的第一个参数就是<code>HttpRequest</code>对象</li><li>django创建的，之后调用视图时传递给视图</li></ul><p><strong>属性</strong></p><ul><li><code>path</code>：请求的完整路径（不包括域名和端口）</li><li><code>method</code>：表示请求的额方式，常用的有<code>GET</code>、<code>POST</code></li><li><p><code>encoding</code>：表示浏览器提交的数据编码方式，一般为<code>utf-8</code></p></li><li><p><code>GET</code>：类似字典的对象，包含打了<code>get</code>请求的所有参数</p></li><li><p><code>Post</code>：类似字典的对象，包含打了<code>post</code>请求的所有参数</p></li><li><code>FILES</code> ：类似字典的对象，包含了所有的上传的文件</li><li><code>COOKIES</code>：字典，包含所有的cookie</li><li><code>session</code>：类似字典的对象，表示当前会话</li></ul><p><strong>方法</strong></p><ul><li><code>is_ajax()</code>:如果是通过XMLHttpRequest发起的，返回True</li></ul><p><strong>QueryDict对象</strong></p><ul><li>request对象中的GET、POST都属于QueryDict对象</li><li>方法：<ul><li><code>get()</code>：根据<code>key</code>值获取<code>value</code>值</li><li><code>getlist</code>：将键的值以列表的形式返回</li></ul></li></ul><p><strong>GET属性</strong></p><p>获取浏览器传递过来给服务器的数据</p><ul><li><pre class="line-numbers language-html"><code class="language-html">http://127.0.0.1:8000/get1?a=1&amp;b=2&amp;c=3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get1</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    b<span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>    c<span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><pre class="line-numbers language-html"><code class="language-html">http://127.0.0.1:8000/get2?a=1&amp;a=2&amp;c=3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get2</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    a1 <span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    a2 <span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    c<span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>a1<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>a2<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>POST属性</strong></p><ul><li><p>使用表单提交post请求</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span>    age <span class="token operator">=</span>  request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>    hobby <span class="token operator">=</span>  request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>age<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"注册成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2><span id="httpresponse对象">HttpResponse对象</span></h2><p><strong>概述</strong></p><ul><li>作用：给浏览器返回数据</li><li><code>HttpRequest</code>是有django创建的，<code>HttpResponse</code>对象是由程序员创建的</li></ul><p><strong>返回数据用法</strong></p><ul><li><p>不调用模板，直接返回数据</p></li><li><p>调用模板</p><ul><li><p>使用<code>render</code>方法</p><ul><li><p>原型：<code>render(requesr,templateName,{context})</code></p></li><li><p>作用：结合数据和模板，返回完整的HTML界面</p></li><li><p>参数</p><ul><li><code>request</code>：请求体对象</li><li><code>templateName</code>：模板路径</li><li><code>context</code>：传递给需要渲染在模板上的数据</li></ul></li><li><p>实例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">studentsearch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#包含条件匹配</span>    <span class="token comment" spellcheck="true"># studentsList = Students.objects.filter(sname__contains='孙')</span>    <span class="token comment" spellcheck="true">#起始匹配</span>    studentsList <span class="token operator">=</span> Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>sname__startswith<span class="token operator">=</span><span class="token string">'j'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/students.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"students"</span><span class="token punctuation">:</span>studentsList<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><p><strong>属性</strong></p><ul><li><code>content</code>：表示返回内容</li><li><code>charset</code>：返回数据的编码格式</li><li><code>status_code</code>:响应状态编码：404,200,304</li><li><code>content-type</code>:指定输出的MIME类型</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#查看response内容</span><span class="token keyword">def</span> <span class="token function">showresponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>charset<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token operator">-</span>type<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法</strong></p><ul><li><code>init</code>：使用页面内容实例化<code>HttpResponse</code>对象</li><li><code>write(content)</code>以文件的形式写入</li><li><code>flush()</code>:以文件的形式输出缓冲区</li><li><code>set_cookie(key,value=&#39;&#39;,max_age=None,exprise=None)</code>设置cookie</li><li><code>delete_cookie(key)</code><ul><li>删除cookie</li><li>注意：如果删除一个不存在的key，就当什么都没有发生</li></ul></li></ul><p><strong>子类HttpResponseRedirect</strong></p><ul><li>功能： 重定向，服务器跳转</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> redirect<span class="token keyword">def</span> <span class="token function">redirect1</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return  HttpResponseRedirect('/redirect2')</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/redirect2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">redirect2</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'我是重定向得到的视图'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子类JsonResponse</strong></p><ul><li>返回json数据，一般用于异步请求</li><li><code>__init__(self.data)</code></li><li>data是一个字典对象</li><li>注意： Content-type类型为application/json</li></ul><h2><span id="状态保持">状态保持</span></h2><ul><li><p>概述</p><ul><li><p>http协议是无状态的，每次请求都是一次新的请求，不记得以前的请求</p></li><li><p>客户端与服务器的一次通信就是一次会话</p></li><li><p>实现状态的保持，在客户端或者服务端存储相关会话的数据</p></li><li><p>存储方式</p><ul><li><code>Cookie</code>：所有的数据存储在客户端，不要存敏感的数据</li><li><code>session</code>：所有的数据存储在服务端，在客户端用<code>Cookie</code>存储<code>session_id</code></li><li>在一段时间内跟踪请求者的状态，可以实现跨页面访问当前的请求者的数据</li><li>注意：不同的请求者之间不会共享这个数据，与请求者一一对应</li></ul></li><li><p>启用<code>session</code></p><ul><li>在<code>settings.py</code>文件中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># INSTALLED_APPS选项</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'django.contrib.sessions'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># IDDLEWARE选项</span>MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>session</code></p><ul><li>启用<code>session</code>后，每个<code>HttpRequest</code>对象都有一个<code>session</code>属性，就是一个类似字典的对象</li><li><code>get(key,default=None)</code>:根据键获取<code>session</code>值</li><li><code>clear()</code>:清空所有的会话</li><li><code>flush()</code>:删除当前的会话并删除会话的<code>Cookie</code></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token operator">=</span>request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">"游客"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(username)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/main.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span>username<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/login.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showmain</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 存储session</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>username    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>session<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/main'</span><span class="token punctuation">)</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> logout<span class="token keyword">def</span> <span class="token function">quit</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># request.session.clear()</span>    <span class="token comment" spellcheck="true"># request.session.flush()</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/main'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>设置<code>session</code>过期时间</p><ul><li><code>set_expiry(value)</code></li><li>如果不设置两个星期后过期</li><li><code>value</code>为整数（表示多少秒后过期）</li></ul><pre class="line-numbers language-python"><code class="language-python">request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>set_expiry<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>value</code>可以是一个时间对象</li><li><code>value=0</code>关闭浏览器时失效</li><li><code>value=None</code>永不过期</li></ul></li><li><p>存储session的位置</p><ul><li>数据库：默认存储数据库中<code>django.contrib.sessions.backends.db</code></li><li>缓存：只存储在本地内存中，如果丢失不能找回，比数据库快<code>django.contrib.sessions.backends.cache</code></li><li>同时缓存和数据库，优先从本地缓存中读取，读取不到再去数据库中获取：<code>django.contrib.sessions.backends.cache_db</code></li></ul></li><li><p>使用<code>redis</code>缓存<code>session</code></p><ul><li>首先要安装redis并开启redis服务</li><li><code>pip install django-redis-sessions</code></li></ul><p><code>`</code>python<br>SESSION_ENGINE=’redis_sessions.session’<br>SESSION_REDIS_HOST=’local_host’<br>SESSION_REDIS_PORT=6379<br>SESSION_REDIS_DB=0<br>SESSION_REDIS_PASSWORD=’qq123’<br>SESSION_REDIS_PREFIX=’session’</p></li></ul></li></ul><pre><code>#或者   SESSION_ENGINE = &#39;redis_sessions.session&#39;   SESSION_REDIS = {       &#39;host&#39;: &#39;localhost&#39;,       &#39;port&#39;: 6379,       &#39;db&#39;: 0,       &#39;password&#39;: &#39;password&#39;,       &#39;prefix&#39;: &#39;session&#39;,       &#39;socket_timeout&#39;: 1   }```</code></pre><p>#</p>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记3</title>
    <link href="/2020/02/02/Django%E7%AC%94%E8%AE%B03/"/>
    <url>/2020/02/02/Django%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1><span id="模板">模板</span></h1><p><strong>定义模板</strong></p><ul><li><p>变量：</p><ul><li><p>视图传递给模板的数据，要遵循标识符规则</p></li><li><p>语法：</p></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span>值<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>注意：如果使用的变量不存在，则插入的是空字符串</p></li><li><p>在模板中使用点语法<code>xx.xx</code>：代表字典查询，属性或者方法，数字索引</p></li><li><p>在模板中调用对象的方法，注意，模板中不能传递参数</p></li></ul><ul><li><p>标签</p><ul><li>语法：</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> 语句 <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：在输出中创建文本；控制逻辑和循环</li><li>条件语句</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> 表达式 <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token number">1</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token number">2</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 或者</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> 表达式<span class="token number">1</span> <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token number">1</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">elif</span> 表达式<span class="token number">2</span> <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token number">2</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>循环</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表 <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">############################</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表 <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token number">1</span><span class="token punctuation">{</span><span class="token operator">%</span> empty <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token number">2</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#####################################</span><span class="token punctuation">{</span><span class="token punctuation">{</span>forloop<span class="token punctuation">.</span>counter<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 循环的次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>comment</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> comment <span class="token operator">%</span><span class="token punctuation">}</span>注释的内容<span class="token punctuation">{</span><span class="token operator">%</span> endcomment <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>ifequal</code>等于，<code>ifnotequal</code>不等于</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> ifequal 值<span class="token number">1</span> 值<span class="token number">2</span> <span class="token operator">%</span><span class="token punctuation">}</span>语句<span class="token punctuation">{</span><span class="token operator">%</span> endifequal <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>include</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载模板并以标签内的参数渲染</span><span class="token comment" spellcheck="true"># 格式</span><span class="token punctuation">{</span><span class="token operator">%</span> include ‘模板目录’ 参数<span class="token number">1</span> 参数<span class="token number">2</span> <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>url</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 反向解析</span><span class="token comment" spellcheck="true"># 格式</span><span class="token punctuation">{</span><span class="token operator">%</span> url <span class="token string">'namespace'</span> p1 p2 <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>csrf_token</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用于跨站请求伪造保护</span><span class="token comment" spellcheck="true"># 格式</span><span class="token punctuation">{</span><span class="token operator">%</span> csrf_token <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>block</code>、<code>extend</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用于模板的继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>autoescape</code></li></ul><pre class="line-numbers language-python"><code class="language-python">用于html转义<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>过滤器</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 作用： 在变量被显示前修改它</span>语法： <span class="token punctuation">{</span><span class="token punctuation">{</span>变量 <span class="token operator">|</span> 过滤器<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 示例</span><span class="token punctuation">{</span><span class="token punctuation">{</span>str <span class="token operator">|</span> upper<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#将字符串转换为大写</span><span class="token punctuation">{</span><span class="token punctuation">{</span>str <span class="token operator">|</span> upper<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#将字符串转换为小写</span><span class="token comment" spellcheck="true"># 过滤器可以传递参数，参数用引号引起来</span><span class="token comment" spellcheck="true"># 示例join将字符串用 ‘#’连接</span><span class="token punctuation">{</span><span class="token punctuation">{</span>列表<span class="token operator">|</span>join<span class="token punctuation">:</span><span class="token string">'#'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 如果一个变量没有被提供，或者值为false，空，可以使用默认值</span><span class="token comment" spellcheck="true">#　格式</span><span class="token punctuation">{</span><span class="token punctuation">{</span>值<span class="token operator">|</span>default<span class="token punctuation">:</span><span class="token string">'默认值'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#　根据给定格式转换日期为字符串</span><span class="token comment" spellcheck="true">#　格式</span><span class="token punctuation">{</span><span class="token punctuation">{</span> date值<span class="token operator">|</span>date<span class="token punctuation">:</span><span class="token string">'y-m-d'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># HTML转义</span><span class="token comment" spellcheck="true"># escape</span><span class="token comment" spellcheck="true">#加减乘除</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>num<span class="token operator">|</span>add<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>num<span class="token operator">|</span>add<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>num<span class="token operator">/</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">%</span> num widthratio num <span class="token number">1</span> <span class="token number">5</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>num<span class="token operator">/</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">%</span> num widthratio num <span class="token number">5</span> <span class="token number">1</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> 值<span class="token operator">|</span>divisiableby<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注释</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 单行注释：（在网页中显示不出来，不知道为？）</span><span class="token comment" spellcheck="true"># 多行注释：</span><span class="token punctuation">{</span><span class="token operator">%</span> comment <span class="token operator">%</span><span class="token punctuation">}</span>注释的内容<span class="token punctuation">{</span><span class="token operator">%</span> endcomment <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="反向解析">反向解析</span></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># project文件目录下的urls.py文件设置</span>url<span class="token punctuation">(</span>r<span class="token string">'^'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'myApp.urls'</span><span class="token punctuation">,</span>namespace<span class="token operator">=</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># app文件夹下设置urls.py文件</span>url<span class="token punctuation">(</span>r<span class="token string">'^good/(\d+)/(\d+)/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>good<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'good'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 模板</span><span class="token operator">&lt;</span>a href <span class="token operator">=</span> <span class="token string">'{% url '</span>app<span class="token punctuation">:</span>good<span class="token string">' 1 %}'</span><span class="token operator">></span>链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="模板继承">模板继承</span></h2><p><strong>作用</strong></p><p>模板继承可以减少页面的内容的重复定义，实现页面的重用</p><p><strong><code>block标签</code></strong></p><p>在父模板中预留区域，子模板去填充</p><p><strong><code>extends标签</code></strong></p><p>继承模板，需要写在模板文件的第一行</p><p><strong>示例</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--基础模板--></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#header</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#footer</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {% block main %}        {% endblock main %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> 子模板文件<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> extends <span class="token string">'myApp/base.html'</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> block main <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>jason <span class="token keyword">is</span> a good man<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endblock main <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="html转义">HTML转义</span></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/index.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token string">"&lt;h1>jason is a good man!&lt;/h1>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在idnex.html中将接收到的code当成普通字符串渲染</span><span class="token punctuation">{</span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>code<span class="token operator">|</span>escape<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 在idnex.html中将接收到的code当成html代码渲染</span><span class="token punctuation">{</span><span class="token punctuation">{</span>code<span class="token operator">|</span>safe<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> autoescape off <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endautoescape <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="crsf跨站请求伪造">CRSF（跨站请求伪造）</span></h2><p>某些恶意网站包含链接、表单、按钮、<code>js</code>，利用登录用户在浏览器中认证，从而攻击服务器</p><p><strong>防止CSRF</strong></p><ul><li><p>在<code>setting.py</code>文件中的<code>MIDDLEWARE</code>增加<code>&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</code></p></li><li><p>在模板的表单中加入</p><pre class="line-numbers language-html"><code class="language-html">{% csrf_token %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>验证码</strong></p><ul><li>在用户注册，登录页面的时候使用，为了防止暴力请求，减轻服务器的压力-</li><li>防止<code>csrf</code>的一种方式</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">verifycode</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 引入绘图模块</span>    <span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span>ImageDraw<span class="token punctuation">,</span>ImageFont    <span class="token keyword">import</span> random    <span class="token comment" spellcheck="true"># 定义背景颜色</span>    bgcolor <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    width <span class="token operator">=</span><span class="token number">100</span>    height<span class="token operator">=</span><span class="token number">50</span>    <span class="token comment" spellcheck="true">#创建一个图片矩阵</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span>bgcolor<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建画笔对象</span>    draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用画笔的point()函数绘制噪点</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        xy <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>        fill <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span>xy<span class="token punctuation">,</span>fill<span class="token operator">=</span>fill<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义验证码的被选值</span>    str <span class="token operator">=</span> <span class="token string">'1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm'</span>    <span class="token comment" spellcheck="true"># 随机选取4个值作为验证码</span>    rand_str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rand_str<span class="token operator">+=</span>str<span class="token punctuation">[</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 构造字体对象</span>    font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>r<span class="token string">'/usr/share/fonts/MyFonts/simhei.ttf'</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造字体颜色</span>    fontcolor1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fontcolor2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fontcolor3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fontcolor4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绘制4个字</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>font<span class="token operator">=</span>font<span class="token punctuation">,</span>fill<span class="token operator">=</span>fontcolor1<span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>font<span class="token operator">=</span>font<span class="token punctuation">,</span>fill<span class="token operator">=</span>fontcolor2<span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>font<span class="token operator">=</span>font<span class="token punctuation">,</span>fill<span class="token operator">=</span>fontcolor3<span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>font<span class="token operator">=</span>font<span class="token punctuation">,</span>fill<span class="token operator">=</span>fontcolor4<span class="token punctuation">)</span>    <span class="token keyword">del</span> draw    <span class="token comment" spellcheck="true"># 存入session，用于做进一步验证</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'verify'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rand_str    <span class="token comment" spellcheck="true"># 内存文件操作</span>    <span class="token keyword">import</span> io    buf <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将图片保存在内存中，文件类型为png</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将内存中的图片数据返回给客户端，MIME类型为图片png</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>buf<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">verifycodefile</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        str<span class="token operator">=</span><span class="token string">"验证码错误"</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/verifycodefile.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"flag"</span><span class="token punctuation">:</span>str<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">verifycodecheck</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    code1 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"verifycode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    code2<span class="token operator">=</span>request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'verify'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> code1<span class="token operator">==</span>code2<span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/success.html'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/verifycodefile/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/verifycodecheck/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {% csrf_token %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>verifycode<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/verifycode/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{flag}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记2</title>
    <link href="/2020/01/27/Django%E7%AC%94%E8%AE%B02/"/>
    <url>/2020/01/27/Django%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<p>#Django笔记2</p><blockquote><p>2020年正月初三小记</p><p>今天早晨传来消息，篮球传奇球员科比意外去世。虽然我不是什么篮球迷，但也熟悉他的传奇人生。2020年刚开始，它似乎就开始小孩似地，不顾他人感受地、不停地宣告它的不平凡。让本应该全国欢庆的春节变得沉默起来。先有武汉肺炎肆虐搞得全国闭门不出，人心惶惶（尤其是笔者我在武汉上学）；后有紫金王朝球迷的默哀；</p><p>可是怎么办了？生活还是得继续；做好自己的；灾难终究汇过去；</p></blockquote><h1><span id="2day-模型">2day 模型</span></h1><p><em>搬轮子过程</em></p><p><em>1、在setting.py里修改数据库名</em></p><p><em>2、在setting.py里修改数据库密码</em></p><p><em>3、删除迁移文件</em></p><p><em>4、在数据库中创建对应第一步的数据库</em></p><p><em>5、执行生成迁移文件</em></p><p><em>6、执行迁移</em></p><p><em>7、启动服务，浏览器测试</em></p><blockquote><p>Django对各种数据库提供了很好的支持，Django为这些数据库提供了统一的调用API，可以根据不同的业务需求选择不同的数据库</p></blockquote><h4><span id="开发流程">开发流程</span></h4><ul><li>配置数据库</li><li>定义模型类（一个模型类都在数据库中对应一张数据表）</li><li>生成迁移文件</li><li>执行迁移生成数据表</li><li>使用模型类进行增删改查</li></ul><h4><span id="配置数据库">配置数据库</span></h4><ul><li><p>修改工程目录下的<code>__init__.py</code>文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改setting.py文件</p><pre class="line-numbers language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'forDjango'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'qq123'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4><span id="orm">ORM</span></h4><blockquote><p>对象-关系-映射</p><p>Django—ORM—各种数据库</p></blockquote><ul><li>任务<ul><li>根据对象类型生成表结构</li><li>将对象、列表的操作转换为sql语句</li><li>将sql语句查询到的结果转换为对象、列表</li></ul></li></ul><h4><span id="定义模型">定义模型</span></h4><ul><li><p>模型、属性、表、字段间的关系</p></li><li><p>定义属性：详情请见定义属性部分</p></li><li><p>穿件模型类</p></li><li><p>元选项（在模型类中定义meta类，用于设置元信息）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义数据表名，推荐使用小写字母，数据表名默认为项目小写_类名小写</span>    db_table<span class="token operator">=</span><span class="token string">"students"</span>    <span class="token comment" spellcheck="true"># 对象的默认排序字段，获取对象的列表时使用</span>    ordering<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#对id字段升序排列 </span>    <span class="token comment" spellcheck="true">#ordering=['-id']# 对id字降序排列</span>    <span class="token comment" spellcheck="true">#注意：排序会增加数据库的开销</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4><span id="定义属性">定义属性</span></h4><p>概述</p><ul><li>django根据属性确定一下信息<ul><li>当前选择的数据库支持字段的类型</li><li>渲染管理表单时使用的默认html空间</li><li>在管理站点最低限度的验证</li></ul></li><li>django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列</li><li>属性命名限制<ul><li>遵循标识符规则</li><li>由于django的查询方式，不允许使用连续的下划线</li></ul></li></ul><p>库</p><ul><li>定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中</li><li>使用方式<ul><li>导入<code>from django import mdoels</code></li><li>通过models.fields创建字段类型的对象，赋值给属性</li></ul></li><li>逻辑删除<ul><li>对于重要的数据都做逻辑删除，不做物理删除，实现方式是定义isDelete属性，类型为BooleanField，默认值为False</li></ul></li><li><p>字段类型</p><ul><li>AutoField<ul><li>一个根据实际ID自动增长的额IntegerField。通常不指定如果不指定</li><li>一个主键字段将自动添加到模型汇总</li></ul></li><li>CharField(max_length=字符长度)<ul><li>字符串，默认的表单样式是TextInput</li></ul></li><li>TextField<ul><li>大文本字段，一般超过4000使用，默认的表单控件是Textarea</li></ul></li><li>IntegerField<ul><li>整数</li></ul></li><li>DecimalField(max_digits=None,decimal_places=None)<ul><li>使用python的Decimal实例表示的十进制浮点数</li><li>参数说明<ul><li><code>DecimalField.max_digits</code>位数总数</li><li><code>DecimalField.decimal_places</code>小数点后的数字位数</li></ul></li></ul></li><li>FloatField<ul><li>用Python的float实例来表示的浮点数</li></ul></li><li>BooleanField<ul><li>布朗值，此字段的默认表单控制是CheckboxInput</li></ul></li><li>NullBooleanField<ul><li>支持null、true、false三种值</li></ul></li><li>DateField(auto_now=False,auto_now_add=False)<ul><li>使用Python的datetime.date实例表示的日期</li><li>参数说明<ul><li><code>DateField.auto_now</code>每次保存对象时，自动设置当前时间，用于“最后一次修改”</li><li><code>DateField.auto_now_add</code>当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false</li><li>说明<ul><li>该字段默认对应的表单控件是一个TextInput。在管理员站点添加了一个JavaScript写的日历控件，和一个“Today”的快捷按钮，包含了一个额外的Invalid_data错误消息键。</li></ul></li><li>注意：<code>auto_now_add</code>,<code>auto_now</code>,这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果</li></ul></li><li>TImeField<ul><li>使用Python的datetime.time实例表示的时间，参数同DateField</li></ul></li><li>DateTimeField<ul><li>使用python的datetime</li><li>datetime实例表示的日期和时间，参数同DateField</li></ul></li><li>FileField<ul><li>一个上传文件的字段</li></ul></li><li>ImageField<ul><li>继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image</li></ul></li></ul></li></ul></li><li><p>字段选项</p><ul><li>概述<ul><li>通过字段选项，可以实现对字段的约束</li><li>在字段对象时通过关键字参数指定</li></ul></li><li><code>null</code>如果为True，Django将空值以null存储到数据库中，默认值是False</li><li><code>blanke</code>如果为True，则该字段允许为空白，默认值是False</li><li>注意：null是数据库范畴的概念，blank是表单验证范畴的</li><li><code>db_column</code>字段的名称，如果未指定，则使用属性的名称</li><li><code>db_index</code>若值为True，则在表中会为此字段创建索引</li><li><code>default</code>默认值</li><li><code>primary_key</code>若为True，则该字段会成为模型的主键字段</li><li><code>unique</code>如果为True，这个字段在表中必须有唯一值</li></ul></li><li><p>关系</p><ul><li><p>分类</p><ul><li>ForeignKey： 一对多，将字段定义在多的端中</li><li>ManyToManyField： 多对多，将字段定义在两端中</li><li>OneToOneField：一对一，将字段定义在任意一段中</li></ul></li><li><p>用一访问多</p><ul><li>格式<ul><li>对象.模型类小写_set</li><li>示例：<code>grade.students_set</code></li></ul></li></ul></li><li><p>用一访问一</p><ul><li><p>格式</p><ul><li>对象.模型类小写</li></ul></li><li><p>示例</p><ul><li>grade.students</li></ul></li></ul></li><li><p>访问id</p><ul><li>格式<ul><li>对象.属性_id</li><li>示例<ul><li>student.sgrade_id</li></ul></li></ul></li></ul></li></ul></li></ul><h4><span id="模型成员">模型成员</span></h4><blockquote><ul><li><p>类属性</p><ul><li><p>Object  ： 是manger类型的对象，作用是与数据库进行交互；当定义模型类时没有指定管理器，则Django为模型创建一个名为Objects 的管理器</p></li><li><p>自定义模型管理器</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在模型类中定义</span>stuObj <span class="token operator">=</span> models<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当为模型指定模型管理器，Django就不在为模型类生成Objects模型管理器了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自定义管理器Manger类</p><ul><li><p>模型管理器是Django的模型进行数据库交互的接口，一个模型可以有多个模型管理器</p></li><li><p>作用</p><ul><li><p>向管理器类中添加额外的方法</p></li><li><p>修改管理器返回的原始查询集（例如重写<code>get_queryset()方法</code>实现数据软删除）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StudentsManager</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Manager<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> super<span class="token punctuation">(</span>StudentsManager<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>isDelete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Students</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>   stuObj <span class="token operator">=</span> StudentsManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>创建对象</p><ul><li><p>目的 向数据库中添加数据</p></li><li><p>当创建对象时，django不会对数据库进行读写操作，当调用save()方法时才与数据库交互，将对象保存到数据表中</p></li><li><p>注意:<code>__init__</code>方法已经在父类models.Model中使用，在自定义的模型中无法使用</p></li><li><p>方法</p><ul><li><p>在模型类中增加一个类方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Students</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>  stuObj <span class="token operator">=</span> StudentsManager<span class="token punctuation">(</span><span class="token punctuation">)</span>  sname <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>  sgender <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  sage <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>  scontend <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>  isDelete <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  sgrade <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"Grades"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> self<span class="token punctuation">.</span>sname  <span class="token comment" spellcheck="true"># class Meta:</span>  <span class="token comment" spellcheck="true">#     db_table="students"</span>  <span class="token comment" spellcheck="true">#     ordering=['id']</span>  @classmethod  <span class="token keyword">def</span> <span class="token function">createStudent</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>contend<span class="token punctuation">,</span>grade<span class="token punctuation">,</span>isD<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      student <span class="token operator">=</span> cls<span class="token punctuation">(</span>sname<span class="token operator">=</span>name<span class="token punctuation">,</span>sage<span class="token operator">=</span>age<span class="token punctuation">,</span>sgender<span class="token operator">=</span>gender<span class="token punctuation">,</span>scontend<span class="token operator">=</span>contend<span class="token punctuation">,</span>                  sgrade<span class="token operator">=</span>grade<span class="token punctuation">,</span>isDelete<span class="token operator">=</span>isD<span class="token punctuation">)</span>      <span class="token keyword">return</span> student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><ul><li><p>在定义管理器中添加一个方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StudentsManager</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Manager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span>StudentsManager<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>isDelete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createstudents</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>contend<span class="token punctuation">,</span>grade<span class="token punctuation">,</span>isD<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        stu <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>        stu<span class="token punctuation">.</span>sname <span class="token operator">=</span> name        stu<span class="token punctuation">.</span>sage <span class="token operator">=</span> age        stu<span class="token punctuation">.</span>agender <span class="token operator">=</span> gender        stu<span class="token punctuation">.</span>scontend <span class="token operator">=</span> contend        stu<span class="token punctuation">.</span>grade <span class="token operator">=</span> grade        <span class="token keyword">return</span> stu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h4><span id="模型查询">模型查询</span></h4><blockquote><ul><li><p>概述</p><ul><li>查询集表示从数据库获取的对象集合</li><li>查询集可以有多个过滤器</li><li>过滤器就是一个函数，基于所给的参数限制查询结果</li><li>从sql角度来说，查询集合select语句等价，过滤器就像where条件</li></ul></li><li><p>查询集</p><ul><li><p>在管理器调用方法返回查询集</p></li><li><p>查询集经过过滤器后返回新的查询集，所以可以写成链式调用</p></li><li><p>惰性执行：创建查询集不会带来任何数据的访问，直到调用数据时，才会访问数据</p></li><li><p>直接访问数据的情况</p><ul><li>迭代</li><li>序列化</li><li>与if合用</li></ul></li><li><p>返回查询集的方法称为过滤器</p><ul><li><code>all()</code>返回查询集中的所有数据</li><li><code>filter()</code>返回符合条件的数据<ul><li><code>filter(key1=value1,key2=value2)</code></li><li><code>filter(key1=value1).filter(key2=value2)</code></li></ul></li><li><code>exclude()</code>过滤掉符合条件的数据</li><li><code>order_by()</code>排序</li><li><code>values()</code>一个数据就是一个对象，返回一个列表</li></ul></li><li><p>返回单个数据</p><ul><li><code>get()</code> 返回一个满足条件的对象，如果没有找到符合条件的对象，会引发<code>模型类.DoesNotExist</code>异常；如果找到多个对象，会引发<code>模型类.MultipleObjectsReturned</code>异常</li><li><code>count()</code>返回当前查询集中的对象个数</li><li><code>first()</code>返回查询集中的第一个对象</li><li><code>last()</code> 返回查询集中最后一个对象</li><li><code>exists()</code> 判断查询集中是否有数据。</li></ul></li><li><p>限制查询集</p><ul><li><p>查询集返回列表，可以使用下标方法进行限制，等同于sql中的limit语句。<strong>下标不能使负数</strong></p><pre class="line-numbers language-python"><code class="language-python">studentsList <span class="token operator">=</span> Student<span class="token punctuation">.</span>object<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul><ul><li><p>查询集的缓存</p><ul><li>概述：每个查询集都包含一个缓存，来最小化的对数据库的访问</li><li>在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存，Django会将查询出来的数据做一个缓存，并返回查询结果，以后的查询直接使用查询集的缓存</li></ul></li><li><p>字段查询</p><ul><li><p>概述</p><ul><li>实现了sql中的where语句，作为方法<code>filter()</code>,<code>exclude</code>,<code>get()</code>的参数</li><li>语法：属性名称_比较运算法=值</li><li>外键：属性名_id</li><li>转义: <ul><li>like语句中使用%是为了匹配占位，匹配数据中的%（where like ’\%‘）</li><li><code>filter(sname__contains=&#39;%&#39;)</code></li></ul></li></ul></li><li><p>比较运算符</p><ul><li><p><code>exact</code></p><ul><li>判断，大小写敏感</li><li><code>filter(isDelete=False)</code></li></ul></li><li><p><code>contains</code>:是否包含，大小写敏感</p><pre class="line-numbers language-python"><code class="language-python">studentsList <span class="token operator">=</span> Students<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>sname__contains<span class="token operator">=</span><span class="token string">'孙'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>startwith</code>、<code>endwith</code></p><ul><li><p>以value开头或结尾，大小写敏感</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">studentsearch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#包含条件匹配</span>    <span class="token comment" spellcheck="true"># studentsList = Students.objects.filter(sname__contains='孙')</span>    <span class="token comment" spellcheck="true">#起始匹配</span>    studentsList <span class="token operator">=</span> Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>sname__startswith<span class="token operator">=</span><span class="token string">'j'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/students.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"students"</span><span class="token punctuation">:</span>studentsList<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>以上四个在前面加上<code>i</code>，就表示不区分大小写：<code>iextract</code>、<code>icontains</code>、<code>istartwith</code>、<code>iendwith</code></p></li><li><p><code>isnull</code>和<code>isnotnull</code>：是否为空</p></li><li><p><code>in</code>：是否包含在范围内</p><pre class="line-numbers language-python"><code class="language-python">Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>pk__in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>gt</code>、<code>gte</code>、<code>lt</code>、<code>lte</code> 大于；大于等于；小于；小于等于</p><pre class="line-numbers language-python"><code class="language-python">studentsList <span class="token operator">=</span> Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">,</span>filter<span class="token punctuation">(</span>sage__gt<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>year、month、day、week_day、hour、minute、second</code></p><pre class="line-numbers language-python"><code class="language-python">StudentsList <span class="token operator">=</span> Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>lastTime__year<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>跨关联查询 </p><pre class="line-numbers language-python"><code class="language-python">查询包含学生jason的班级（跨表查询）grade <span class="token operator">=</span> Grades<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>students__contend__contains<span class="token operator">=</span><span class="token string">'jason'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><pre><code> - 查询快捷   - `pk`代表主键</code></pre><ul><li><p>聚合函数</p><ul><li><p>使用<code>agggregate()</code>函数返回聚合函数的值</p></li><li><p><code>Avg</code></p></li><li><p><code>Count</code></p></li><li><p><code>Max</code></p></li><li><p><code>Min</code></p></li><li><p><code>Sum</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>model <span class="token keyword">import</span> MaxmaxAge<span class="token operator">=</span>Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Max<span class="token punctuation">(</span><span class="token string">'sage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>F 对象</p><ul><li><p>可以使用模型的A属性与B属性进行比较</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> F<span class="token punctuation">,</span>Q    <span class="token keyword">def</span> <span class="token function">grades</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        g<span class="token operator">=</span>Grades<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ggirlnum__gt<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">'gboynum'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"OOOOOo"</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>支持F对象的算数运算</p><pre class="line-numbers language-python"><code class="language-python">g<span class="token operator">=</span>Grades<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ggirlnum__gt<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">'gboynum'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Q对象</p><ul><li><p>概述: 过滤器方法中的关键子参数，默认条件为<code>And</code>模式。因此使用Q对象解决该问题，实现<code>or</code>查询</p><pre class="line-numbers language-python"><code class="language-python">StudentsList<span class="token operator">=</span>Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Q<span class="token punctuation">(</span>pk__lte<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>Q<span class="token punctuation">(</span>sage__gt<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#`～`表示取非</span>StudentsList<span class="token operator">=</span>Students<span class="token punctuation">.</span>stuObj<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>～Q<span class="token punctuation">(</span>pk__lte<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记1</title>
    <link href="/2020/01/16/Django%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/01/16/Django%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2><span id="1-day">1 day</span></h2><h3><span id="了解小知识">了解小知识</span></h3><ul><li><p>了解 djngo设计模式（MVC，MTV）</p></li><li><p>安装django（1.11.4）</p><p><code>pip install Django==1.11.4</code></p></li></ul><h3><span id="创建项目">创建项目</span></h3><ul><li><p>在合适位置创建一个目录</p><p><code>/home/jason/Doucements/code/forDjango/</code></p></li><li><p>在目录位置打开终端</p></li><li><p><code>django-admin startproject project01</code></p></li><li><p><code>tree . /F</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229154035290.png" srcset="/img/loading.gif" alt="image-20191229154035290"></p></li><li><p>manage.py 是一个命令行工具，可以使我们用多种方式对django项目进行交互</p></li><li><p>init.py  项目的配置文件</p></li><li><p>urls.py 项目的url声明</p></li><li><p>wsgi.py 项目与wsgi兼容的web服务入口</p></li></ul><h3><span id="基本操作">基本操作</span></h3><h4><span id="设计表结构">设计表结构</span></h4><ul><li>班级表结构<ul><li>表名 grade</li><li>字段<ul><li>班级名称 gname</li><li>成立时间gdate</li><li>女生总数ggirlname</li><li>男生总数gboyname</li><li>是否删除isDelete</li></ul></li></ul></li><li>学生表结构<ul><li>表名student</li><li>字段<ul><li>学生姓名sname</li><li>学生性别sgender</li><li>学生年龄sage</li><li>学生简介scontend</li><li>学生班级sgrade</li><li>是否删除isDelete</li></ul></li></ul></li></ul><h4><span id="配置数据库-注意django-默认sqlite">配置数据库 （注意django 默认sqlite）</span></h4><ul><li><p>在setting.py文件中的databasees选项中进行数据库配置</p></li><li><p>配置mysql</p><ul><li><p>python3 安装的pymysql</p></li><li><p>在 init文件中 写入下面两行代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建一个数据库</p></li><li><p>配置</p></li><li><pre class="line-numbers language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'forDjango'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'qq123'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4><span id="创建应用">创建应用</span></h4><ul><li><p>在一个项目中可以创建多个应用，每个应用进行一种业务处理</p></li><li><p>打开终端，进入project01目录</p></li><li><p><code>python manage.py startapp myApp</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229161301835.png" srcset="/img/loading.gif" alt="image-20191229161301835"></p></li><li><p>myApp目录说明</p><ul><li>admin.py 站点配置</li><li>model.py 模型</li><li>view.py 视图</li></ul></li></ul><h4><span id="激活应用">激活应用</span></h4><ul><li><p>在<code>setting.py</code>文件中，将myApp应用加入到INSTALLED_APP中</p></li><li><pre class="line-numbers language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'myAPP'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4><span id="定义模型">定义模型</span></h4><ul><li><p>一个数据表就对应一个模型</p></li><li><p>在<code>models.py</code>中定义模型</p><ul><li><p>引入<code>from django.db import models</code></p></li><li><p>模型类型要继承models.Model类</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># Create your models here.</span><span class="token keyword">class</span> <span class="token class-name">Grades</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    gname <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    gdate <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>    ggirlnum <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    gboynum <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    isDelete <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Students</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    sname <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    sgender <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    sage <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    scontend <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    isDelete <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    sgrade <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"Grades"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>说明： 不需要定义主键， 在生成时自动添加，并且值为自动增加</p></li></ul><h4><span id="在数据库中生成数据表">在数据库中生成数据表</span></h4><ul><li><p>生成迁移文件</p><ul><li><p><code>python manage.py makemigrations</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229163651715.png" srcset="/img/loading.gif" alt="image-20191229163651715"></p></li><li><p>在migration目录下生成了以迁移文件，此时数据库中还有生成数据表</p></li></ul></li><li><p>执行迁移（相当于执行了sql语句）</p><ul><li><p><code>python manage.py migrate</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229164023734.png" srcset="/img/loading.gif" alt="image-20191229164023734"></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229164123022.png" srcset="/img/loading.gif" alt="image-20191229164123022"></p></li><li><p>数据表已经生成，</p></li></ul></li></ul><h4><span id="测试数据操作">测试数据操作</span></h4><ul><li><p>进入到<code>python mange.py shell</code></p></li><li><p>引入包 </p><ul><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> myApp<span class="token punctuation">.</span>models <span class="token keyword">import</span> Grades<span class="token punctuation">,</span>Students<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils improt timezone<span class="token keyword">from</span> datetime <span class="token keyword">import</span> <span class="token operator">*</span>Grades<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 类名.object.all()查询该表所有数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>添加数据</p><ul><li><p>本质：创建一个模型的实例</p></li><li><pre class="line-numbers language-python"><code class="language-python">grade1<span class="token operator">=</span>Grade<span class="token punctuation">(</span><span class="token punctuation">)</span>grade1<span class="token punctuation">.</span>gname <span class="token operator">=</span><span class="token string">'python04'</span>grade1<span class="token punctuation">.</span>gdate<span class="token operator">=</span>datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span>month<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">)</span>grade1<span class="token punctuation">.</span>ggirlnum<span class="token operator">=</span><span class="token number">2</span>grade1<span class="token punctuation">.</span>gboynum<span class="token operator">=</span><span class="token number">70</span><span class="token comment" spellcheck="true">###关键步骤,执行save后才能像数据库汇总存储数据</span>grade1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为了方便查看数据可以mdoel.py中Grade类中重写<code>__str__</code>函数</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"%s-%d-%d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>gname<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ggirlnum<span class="token punctuation">,</span> self<span class="token punctuation">.</span>gboynum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看某个对象</p><ul><li><pre class="line-numbers language-python"><code class="language-python">Grade<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#类名.objects.get(pk=2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>修改数据</p><ul><li><pre class="line-numbers language-python"><code class="language-python">对象名<span class="token punctuation">.</span>属性<span class="token operator">=</span>新值对象名<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>删除数据</p><ul><li><pre class="line-numbers language-python"><code class="language-python">对象名<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>关联对象</p><ul><li><pre class="line-numbers language-python"><code class="language-python">stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>stu<span class="token punctuation">.</span>sname<span class="token operator">=</span><span class="token string">"jason"</span>stu<span class="token punctuation">.</span>sgender<span class="token operator">=</span><span class="token boolean">True</span>stu<span class="token punctuation">.</span>sage<span class="token operator">=</span><span class="token number">22</span>stu<span class="token punctuation">.</span>scontend<span class="token operator">=</span><span class="token string">'i am jason'</span>stu<span class="token punctuation">.</span>sgrade <span class="token operator">=</span> garade1  <span class="token comment" spellcheck="true">#关联数据库，生成外键</span>stu<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获得关联对象的集合</p><ul><li>需求：获取pyhton04班级的所有学生</li><li>对象名关联的类名小写_set.all()</li><li>grade1.students_set.all()</li></ul></li><li><p>创建关联对象</p><pre class="line-numbers language-python"><code class="language-python">stu <span class="token operator">=</span> grade1<span class="token punctuation">.</span>students_set<span class="token punctuation">.</span>create<span class="token punctuation">(</span>sname<span class="token operator">=</span>u<span class="token string">'曾志伟'</span>，sgender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>scontend<span class="token operator">=</span>u<span class="token string">'我叫曾志伟'</span>，sage<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#不需要save（）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h4><span id="启动服务器">启动服务器</span></h4><ul><li>格式<ul><li><code>python manage.py runserver ip:port</code></li><li>ip 可以不写，表示本机ip</li><li>端口号默认是8000</li></ul></li><li>这是一个pyhton写的轻量级web服务器，仅用来在开发测试中使用</li></ul><h4><span id="admin站点管理">Admin站点管理</span></h4><ul><li><p>概述</p><ul><li>内容发布：负责添加、修改、删除内容</li><li>公共访问</li></ul></li><li><p>配置Admin应用</p><ul><li>在settings.py文件中的INSTALLED_APPS中添加<code>‘django.contrib.admin’</code>默认已经添加好了</li></ul></li><li><p>创建管理员用户</p><ul><li><code>python manage.py createsuperuser</code></li><li>依次输入用户信息</li><li>可以在<code>127.0.0.1:8000/admin/</code>网址进入管理员登录界面</li></ul></li><li><p>汉化</p><ul><li>修改setting.py文件中的language选项为<code>zh-Hans</code>，还有TIME_ZONE=’Asia/Shanghai‘</li></ul></li><li><p>管理数据表</p><ul><li><p>修改myApp目录下的admin.py文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Grades<span class="token punctuation">,</span>Studentsadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Grades<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Students<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自定义管理页面</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GradeAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 列表页属性</span>    <span class="token comment" spellcheck="true">#显示字段</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pk'</span><span class="token punctuation">,</span><span class="token string">'gname'</span><span class="token punctuation">,</span><span class="token string">'gdate'</span><span class="token punctuation">,</span><span class="token string">'ggirlnum'</span><span class="token punctuation">,</span><span class="token string">'gboynum'</span><span class="token punctuation">,</span><span class="token string">'isDelete'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#过滤字段</span>    list_filter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gname'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#搜索字段</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gname'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#分页</span>    list_per_page <span class="token operator">=</span> <span class="token number">5</span>    <span class="token comment" spellcheck="true"># 添加、修改页属性</span>    <span class="token comment" spellcheck="true">#规定属性的顺序</span>    <span class="token comment" spellcheck="true"># 给属性分组</span>    <span class="token comment" spellcheck="true">#fieldsets和field不能同时使用</span>    <span class="token comment" spellcheck="true">#fields =</span>    fieldsets <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"fields"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'ggirlnum'</span><span class="token punctuation">,</span><span class="token string">'gboynum'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"base"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"fields"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'gname'</span><span class="token punctuation">,</span><span class="token string">'gdate'</span><span class="token punctuation">,</span><span class="token string">'isDelete'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token comment" spellcheck="true">#注意：自定义完成已定义要注册</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Grades<span class="token punctuation">,</span>GradeAdmin<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Students<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关联对象</p><ul><li><p>需求：在创建一个班级时可以直接添加几个学生</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StudentInfo</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>TabularInline<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#还有一个StackedInline</span>    model <span class="token operator">=</span> Students    extra <span class="token operator">=</span><span class="token number">2</span><span class="token keyword">class</span> <span class="token class-name">GradeAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    inlines <span class="token operator">=</span> <span class="token punctuation">[</span>StudentInfo<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>布尔值显示问题</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StudentsAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">gender</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>sgender<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"男"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>  <span class="token string">"女"</span>    <span class="token comment" spellcheck="true">#设置页面列的名称</span>    gender<span class="token punctuation">.</span>short_description <span class="token operator">=</span> <span class="token string">"性别"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行动作在页面位置问题</p><pre class="line-numbers language-python"><code class="language-python">actions_on_top <span class="token operator">=</span> <span class="token boolean">False</span>actions_on_bottom <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用装饰器来进行注册</p></li><li><pre class="line-numbers language-python"><code class="language-python">@admin<span class="token punctuation">.</span>register<span class="token punctuation">(</span>类名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3><span id="视图的基本使用">视图的基本使用</span></h3><blockquote><p>在django中，视图对web请求进行回应</p><p>视图就是python函数，在view.py文件中定义</p></blockquote><h4><span id="定义视图">定义视图</span></h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"jason is a good man"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4><span id="配置url控制器">配置URL控制器</span></h4><ul><li><p>修改project目录下的urls.py文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span>include<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> adminurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'myApp.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在myApp应用目录下创建一个urls.py文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3><span id="模板的基本使用">模板的基本使用</span></h3><blockquote><p>模板是HTML页面，可以根据视图中传递过来的数据进行填充</p></blockquote><h4><span id="创建模板">创建模板</span></h4><ul><li><p>创建templates目录，在目录下创建对应项目的模板目录（project/templates/myApp）</p></li><li><p>配置模板路径</p><ul><li><p>修改setting.py文件下的templates</p><pre class="line-numbers language-python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">#设置下面的DIRS属性</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>定义两个模板</p><ul><li><p>在templates/myApp/目录下定义两个模板（grades.html文件和students.html）</p></li><li><p>模板语法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span>输出值，可以是变量，也可以是对象属性<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">%</span>执行代码段<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><code>http://127.0.0.1:8000/grades/</code></p><ul><li><p>写grades.html模板</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>班级信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>班级信息列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--[python04, python05,python06]--></span>    {%for grade in grades%}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{grade.gname}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {%endfor%}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>去视图中写函数，用来响应http请求即调用模板</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">grades</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#去模板中取数据</span>    gradesList <span class="token operator">=</span> Grades<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将数据传递给模板，模板在渲染页面，将渲染好的页面返回浏览器</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/grades.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"grades"</span><span class="token punctuation">:</span>gradesList<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>要去myAPP中的urls.py 加入模板</p><pre class="line-numbers language-python"><code class="language-python">urlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^grades/$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>grades<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>点击班级，显示对应班级的所有学生</p><ul><li><p>修改模板</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>班级信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>班级信息列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--[python04, python05,python06]--></span>    {%for grade in grades%}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--主要是加入了href，--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{grade.id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{grade.gname}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {%endfor%}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义视图</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Grades<span class="token punctuation">,</span>Students<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"jason is a good man"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>num<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"detail-%s-%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">grades</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#去模板中取数据</span>    gradesList <span class="token operator">=</span> Grades<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将数据传递给模板，模板在渲染页面，将渲染好的页面返回浏览器</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/grades.html'</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span><span class="token string">"grades"</span><span class="token punctuation">:</span>gradesList<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">students</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    studentsLsit <span class="token operator">=</span> Students<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'myApp/students.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"students"</span><span class="token punctuation">:</span>studentsLsit<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gradestudents</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> Grades<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>num<span class="token punctuation">)</span>    studentsLsit <span class="token operator">=</span> grade<span class="token punctuation">.</span>students_set<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'myApp/students.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"students"</span><span class="token punctuation">:</span> studentsLsit<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置url</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^grades/$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>grades<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^students/$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>students<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^grades/(\d+)$'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>gradestudents<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头，web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用keras搭建DQN</title>
    <link href="/2018/09/14/%E7%94%A8keras%E6%90%AD%E5%BB%BADQN/"/>
    <url>/2018/09/14/%E7%94%A8keras%E6%90%AD%E5%BB%BADQN/</url>
    
    <content type="html"><![CDATA[<p>dqn总结：<br>最近时间虽然一直看这个dqn代码，虽然看懂了，但是思路却一直不明确，无法自己复写出自己的代码，所以就想写一篇博客来整理一下思路。如果这篇文章写完了，应该思路就清晰了。</p><p>本文主要是看了莫烦的教学视频，在视频中，老师（尊称一声老师O(∩_∩)O哈哈~）是用tensoflow1.2来搭建框架的。本人在看懂了代码后，认为DQN中采用了两个模型，此时用tensorflow来完成这些网络的灵活搭建时当让是最好的选择，但是在我看来，似乎keras中的函数式模型似乎也可以做到啊（Sequential模型肯定是不能完成这件事的），所以我就想用keras来重写这个代码，以此来验证自己是不是真的把DQN的实现过程搞懂了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#首先我们要构建一个DQN类</span><span class="token keyword">class</span> <span class="token class-name">DQN</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#之后我们需要构建网络</span>    <span class="token keyword">def</span> <span class="token function">_build_net</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">#学习需要经验池，这个学习是off-learning</span>    <span class="token keyword">def</span> <span class="token function">store_transition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>s<span class="token punctuation">,</span>a<span class="token punctuation">,</span>r<span class="token punctuation">,</span>s_<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">#进行学习</span>    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">#动作决策</span>    <span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>observation<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是我们要完成的东西了，按四个部分一次完成就可以实现DQN类了</p><p>但是我们还要重写类方法中<code>__init__</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>    self<span class="token punctuation">,</span>    n_actions<span class="token punctuation">,</span>    n_features<span class="token punctuation">,</span>    learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>    reward_decay<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>    e_greedy<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>    replace_target_iter<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span>    memory_size<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>    e_greedy_increment<span class="token operator">=</span>None<span class="token punctuation">,</span>    output_graph<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>n_actions <span class="token operator">=</span> n_actions    self<span class="token punctuation">.</span>n_features <span class="token operator">=</span> n_features    self<span class="token punctuation">.</span>lr <span class="token operator">=</span> learning_rate    self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> reward_decay    self<span class="token punctuation">.</span>epsilon_max <span class="token operator">=</span> e_greedy    self<span class="token punctuation">.</span>replace_target_iter <span class="token operator">=</span> replace_target_iter    self<span class="token punctuation">.</span>memory_size <span class="token operator">=</span> memory_size    self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size    self<span class="token punctuation">.</span>epsilon_increment <span class="token operator">=</span> e_greedy_increment    self<span class="token punctuation">.</span>epsilon <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> e_greedy_increment <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token keyword">else</span> self<span class="token punctuation">.</span>epsilon_max    self<span class="token punctuation">.</span>learn_step_counter <span class="token operator">=</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>memory <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory_size<span class="token punctuation">,</span> n_features <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_build_net<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实用keras来实现DQN的话，和tenosrflow来写，没有很大的区别。主要是就是在构建网络时代码有些许差别。代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_build_net</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构建evaluation网络</span>    eval_inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_features<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>eval_inputs<span class="token punctuation">)</span>    x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>q_eval <span class="token operator">=</span> Dense<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构建target网络，注意这个target层输出是q_next而不是，算法中的q_target</span>    target_inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_features<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>target_inputs<span class="token punctuation">)</span>    x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>q_next <span class="token operator">=</span> Dense<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> Model<span class="token punctuation">(</span>target_inputs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>q_next<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>model2 <span class="token operator">=</span> Model<span class="token punctuation">(</span>eval_inputs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>q_eval<span class="token punctuation">)</span>    rmsprop <span class="token operator">=</span> RMSprop<span class="token punctuation">(</span>lr<span class="token operator">=</span>self<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>model1<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'mean_squared_error'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>rmsprop<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'mean_squared_error'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>rmsprop<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每隔一段时间将evaluation层参数赋值给target层</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">store_transition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'memory_counter'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>memory_counter <span class="token operator">=</span> <span class="token number">0</span>    transition <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> r<span class="token punctuation">]</span><span class="token punctuation">,</span> s_<span class="token punctuation">)</span><span class="token punctuation">)</span>    index <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_counter <span class="token operator">%</span> self<span class="token punctuation">.</span>memory_size    self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> transition  <span class="token comment" spellcheck="true"># memory是一个二维列表</span>    self<span class="token punctuation">.</span>memory_counter <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着是learning函数</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>learn_step_counter <span class="token operator">%</span> self<span class="token punctuation">.</span>replace_target_iter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>target_replace_op<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\ntarget_params_replaced\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>memory_counter <span class="token operator">></span> self<span class="token punctuation">.</span>memory_size<span class="token punctuation">:</span>            sample_index <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory_size<span class="token punctuation">,</span> size<span class="token operator">=</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            sample_index <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory_counter<span class="token punctuation">,</span> size<span class="token operator">=</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">)</span>        batch_memory <span class="token operator">=</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>sample_index<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        q_next<span class="token punctuation">,</span> q_eval <span class="token operator">=</span> self<span class="token punctuation">.</span>model1<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>n_features<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>            batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>self<span class="token punctuation">.</span>n_features<span class="token punctuation">]</span><span class="token punctuation">)</span>        q_target <span class="token operator">=</span> q_eval<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        batch_index <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>        eval_act_index <span class="token operator">=</span> batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_features<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        reward <span class="token operator">=</span> batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_features <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        q_target<span class="token punctuation">[</span>batch_index<span class="token punctuation">,</span> eval_act_index<span class="token punctuation">]</span> <span class="token operator">=</span> reward <span class="token operator">+</span> self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>q_next<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>self<span class="token punctuation">.</span>n_features<span class="token punctuation">]</span><span class="token punctuation">,</span> q_target<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>epsilon <span class="token operator">=</span> self<span class="token punctuation">.</span>epsilon <span class="token operator">+</span> self<span class="token punctuation">.</span>epsilon_increment <span class="token keyword">if</span> self<span class="token punctuation">.</span>epsilon <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>epsilon_max <span class="token keyword">else</span> self<span class="token punctuation">.</span>epsilon_max        self<span class="token punctuation">.</span>learn_step_counter <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他部分和莫凡代码是一样的，就不贴出来了。</p><p>完整的网络部分代码和环境部分代码放在github上了：<a href="https://github.com/Jason33Wang/ReinforcementLearning_by_keras" target="_blank" rel="noopener">https://github.com/Jason33Wang/ReinforcementLearning_by_keras</a></p><p>注明：DQN.py和maze_env.py文件是直接fork莫凡的</p><p>下面也贴上原莫凡的tensorflow代码：<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network</a></p><p>用keras搭建的网络用来训练这个游戏时，收敛的并没有莫凡原代码收敛的好，之后在原基础上，把memory的size增加了一倍后才收敛的较好。</p><p>写完这篇文章后，发现没什么技术含量，不过自己的思路更加清晰了，大家仅供参考吧。希望自己经过以后的学习能写出更好，更有深度的文章吧！</p>]]></content>
    
    
    <categories>
      
      <category>日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reinforecementLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>imageDataGenerator</title>
    <link href="/2018/09/02/imageDataGenerator/"/>
    <url>/2018/09/02/imageDataGenerator/</url>
    
    <content type="html"><![CDATA[<p>在深度学习中，我们在<strong>trian</strong>我们的模型时，往往在数据方面很难找到足够的数据。而在<strong>keras</strong>中，提供了<strong>imageDataGenerator</strong></p><p><strong>iamgeDataGenerator</strong>是一个生成器类，可以将我们输入的原始数据自动经过平移、旋转等操作，生成无限的差异性图片。在这里有意思的是在官方文档中，是用的无限（<strong>infinite</strong>）这个形容词。</p><p>方法如下：</p><p>1、实例一个生成器</p><pre class="line-numbers language-python"><code class="language-python">datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>    featurewise_center<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    featurewise_std_normalization<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    rotation_range<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>    width_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>    height_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>    horizontal_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、<code>.fit</code>方法</p><p>该方法用来计算各种操作的统计信息。</p><p>在笔者看来是类似于生成随机数，我们要生成一个seed</p><p><code>datagen.fit(x_train)</code></p><p>3、 <code>.flow</code>方法</p><p>该方法用来生成无限的图片</p><p><code>datagen.flow(x_train, y_train, batch_size=32)</code></p><p>4、接着就可以用生成的数据进行愉快的训练啦</p><p>对于这些实时产生的数据，我们可以调用<strong>fit_generator</strong>接口，实时的利用这些数据进行训练我们的模型</p><pre class="line-numbers language-python"><code class="language-python">fit_generator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> generator<span class="token punctuation">,</span> steps_per_epoch<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> callbacks<span class="token operator">=</span>None<span class="token punctuation">,</span> validation_data<span class="token operator">=</span>None<span class="token punctuation">,</span> validation_steps<span class="token operator">=</span>None<span class="token punctuation">,</span> class_weight<span class="token operator">=</span>None<span class="token punctuation">,</span> max_q_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> workers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> pickle_safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> initial_epoch<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用的Python的生成器，逐个生成数据的批次并进行训练。生成器与模型将并行执行以提高效率。例如，该函数允许我们在CPU上进行实时的数据提升，同时在GPU上进行模型训练</p><p>函数的参数是：</p><ul><li><p>发电机：生成器函数，生成器的输出应该为：</p></li><li><ul><li>一个形如（输入，目标）的元组</li><li>一个形如（inputs，targets，sample_weight）的元组。所有的返回值都应该包含相同数目的样本。生成器将无限在数据集上循环。每个<strong>epoch</strong>以经过模型的样本数达到<strong>samples_per_epoch</strong>时，记一个<strong>epoch</strong>结束</li></ul></li><li><p><strong>steps_per_epoch</strong>：整数，生成当器报道查看<strong>steps_per_epoch</strong>次数据时计一个历元结束，执行下一个历元</p></li><li><p><strong>epochs</strong>：整数，数据迭代的轮数</p></li><li><p><strong>verbose</strong>：日志显示，0为不在标准输出流输出日志信息，1为输出进度条记录，2为每个历元输出一行记录</p></li><li><p><strong>validation_data</strong>：具有以下三种形式之一</p></li><li><ul><li>生成验证集的生成器</li><li>一个形如（输入，目标）的元组</li><li>一个形如（输入，目标，<strong>sample_weights</strong>）的元组</li></ul></li><li><p><strong>validation_steps</strong>：当<strong>validation_data</strong>为生成器时，本参数指定验证集的生成器返回次数</p></li><li><p><strong>class_weight</strong>：规定类别权重的字典，将类别映射为权重，常用于处理样本不均衡问题。</p></li><li><p><strong>sample_weight</strong>：权值的<strong>numpy</strong>数组，用于在训练时调整损失函数（仅用于训练）。可以传递一个1D的与样本等长的向量用于对样本进行1对1的加权，或者在面对时序数据时，传递一个的形式为（样本，<strong>sequence_length</strong>）的矩阵来为每个时间步上的样本赋不同的权。这种情况下请确定在编译模型时添加了<strong>sample_weight_mode=’temporal’。</strong></p></li><li><p><strong>wokers</strong>：最大进程数</p></li><li><p><strong>max_q_size</strong>：生成器队列的最大容量</p></li><li><p><strong>pickle_safe</strong>：若为真，则使用基于进程的线程。由于该实现依赖多进程，不能传递<strong>non picklable</strong>（无法被pickle序列化）的参数到生成器中，因为无法轻易将它们传入子进程中。</p></li><li><p><strong>initial_epoch</strong>：从该参数指定的<strong>epoch</strong>开始训练，在继续之前的训练时有用。</p></li></ul><p>同样的，我们有<strong>evaluate_generator</strong></p><pre class="line-numbers language-python"><code class="language-python">evaluate_generator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> generator<span class="token punctuation">,</span> steps<span class="token punctuation">,</span> max_q_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> workers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> pickle_safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本函数使用一个生成器作为数据源评估模型，器生成应报道查看与test_on_batch的输入侧数据相同类型的数据。函数该参数的与fit_generator同名参数含义相同，步骤是生成器要返回数据的轮数。</p><p>同样的，我们有<strong>predict_generator</strong></p><pre class="line-numbers language-python"><code class="language-python">predict_generator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> generator<span class="token punctuation">,</span> steps<span class="token punctuation">,</span> max_q_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> workers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> pickle_safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本函数使用一个生成器作为数据源预测模型，器生成应报道查看与<strong>test_on_batch</strong>的输入侧数据相同类型的数据。函数该参数的与<strong>fit_generator</strong>同名参数含义相同，步骤是生成器要返回数据的轮数。</p><p>5、我们也有另外一种训练模型的方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> e <span class="token keyword">in</span> range<span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>batches <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x_batch<span class="token punctuation">,</span> y_batch <span class="token keyword">in</span> datagen<span class="token punctuation">.</span>flow<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>loss <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> y_batch<span class="token punctuation">)</span>batches <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> batches <span class="token operator">>=</span> len<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># we need to break the loop by hand because</span><span class="token comment" spellcheck="true"># the generator loops indefinitely</span><span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>keras</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>苟有恒，何必三更睡五更起。最无益，莫过一日曝十日寒</title>
    <link href="/2018/09/02/%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    <url>/2018/09/02/%E6%AD%A3%E8%83%BD%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>#看到的好的句子就记下来激励自己</p>]]></content>
    
    
    <categories>
      
      <category>警句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>警句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql笔记</title>
    <link href="/2018/09/02/mysql%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/09/02/mysql%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1><span id="mysql学习笔记">mysql学习笔记</span></h1><h1><span id="sql的分类">sql的分类</span></h1><ul><li>数据查询语言（dql ：data query language）<ul><li>代表关键字：select</li></ul></li><li>数据操作语言（dml：data manipulation language）<ul><li>代表关键字：insert，delete，update</li></ul></li><li>数据定义语言（ddl：data definition language）<ul><li>代表关键字：create，drop，alter</li></ul></li><li>事物控制语言（tcl：transactional control language）<ul><li>代表关键字：commit，rollback</li></ul></li><li>数据控制语言（dcl：data control language）<ul><li>代表关键字：grant，revoke</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#创建数据库create database fliename；#选择数据库use database_name#查询当前数据库select database();#查询数据版本select version();#终止当前语句\c#退出mysql\q,QUIT，EXIT#显示命令show databasesshow tablesdesc tabele_name#查看怎么创建的某个表show create table 【name】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="查询语句">查询语句</span></h1><pre class="line-numbers language-mysql"><code class="language-mysql">#无所谓大小写select 【字段，字段，字段】 from 表#条件查询select 【 】 from  表 where 表达式找出工作岗位是manger和工作岗位是salesman的员工######################################select     ename，jobfrom     empwhere    job= 'manger' or job='salesman'；等同于select     ename,jobfrom    empwhere    job in ('manger','salesman')；######################################3like 用法： 其中%代表0～n个字符  _代表一个任意字符select ename from emp where ename like '%o%'  模糊查询###################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="升序排列降序排列">升序排列，降序排列</span></h1><pre class="line-numbers language-mysql"><code class="language-mysql">select ename，sal from emp order by sal asc；#升序排列select ename，sal from emp order by sal desc；#降序排列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="数据处理函数单行处理函数">数据处理函数/单行处理函数</span></h1><table><thead><tr><th>Lower</th><th>转换成小写</th></tr></thead><tbody><tr><td>upper</td><td>转换成大写</td></tr><tr><td>substr</td><td>取子字符串（substr（被截取的字符串，起始下标，截取的长度））</td></tr><tr><td>length</td><td>去长度</td></tr><tr><td>trim</td><td>去空格</td></tr><tr><td>str_to_date</td><td>将字符串转换成日期</td></tr><tr><td>date_format</td><td>格式化日期</td></tr><tr><td>format</td><td>设置千分位</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>rand()</td><td>生成随机数</td></tr><tr><td>ifnull</td><td>可以将null转换成一个具体值</td></tr></tbody></table><h1><span id="关于mysql中的日期处理">关于mysql中的日期处理</span></h1><ul><li><p>每一个数据库处理日期的时候，采用的机制是不同的，日期处理都有自己的一套机制。所以在实际的开发中，表中的字段定义为DATA类型，这种情况很少。因为一旦使用日期类型，那么java程序将不能够通用那么在实际开发中，一般会使用”日期字符串“来表示日期</p></li><li><p>日期是数据库本身的特色，也是数据库本身机制中的一个重要的内容，所以还是需要掌握</p></li><li><p>MYSQL数据库管理系统中对日期提供了两个重要的函数：</p><p>-str_to_date</p><p>-date_format</p></li><li><p>str_to_date</p><p>该函数的作用是：将”日期字符串“转换成”日期类型“数据。【varchar—&gt;date】</p><p>该函数的执行结果是date类型</p><p>该函数的使用格式：</p><p>​               str_to_date(‘日期类型’,’日期格式’)</p><p>关于MYSQL中的日期格式：</p><pre><code>    回顾java中的日期格式：</code></pre><p>​            yyyy        年</p><p>​            MM        月</p><p>​            dd        日</p><p>​            HH        时</p><p>​            mm        分</p><p>​            ss        秒</p><p>​            SSS        毫秒</p><p>java中将字符串转换成日期类型：</p><p>​    </p><pre class="line-numbers language-java"><code class="language-java">SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span>（<span class="token string">"yyyy-MM-dd"</span>）Date date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1970-10-10"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>MYSQL的日期格式：</p><p>|  %Y  | 年   |<br>| :–: | —- |<br>|  %m  | 月   |<br>|  %d  | 日   |<br>|  %H  | 时   |<br>|  %i  | 分   |<br>|  %s  | 秒   |</p></li><li><p>案例：查询出1980-12-17入职的员工</p><pre class="line-numbers language-mysql"><code class="language-mysql">select ename from hirdate from emp where hirdate='1980-12-17'#mysql默认的日期格式：%Y-%m-%d，以上的日期字符串'1980-12-17'正好和默认的日期格式一致，存在了自动类型转换，自动将日期字符串转换了日期类型，所以以上查询可以查询出结果。#如果写下面语句则会报错select ename from hirdate from emp where hirdate='12-17-1980'#想要纠正错误可以改成以下语句select ename from hirdate from emp where hirdate=str_to_date('12-17-1980','%m-%d-%Y')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>date_format </p><ul><li><p>该函数的作用是：将日期类型date转换成具有特定格式的日期字符串varchar</p></li><li><p>该函数的运算结果是：varchar类型【具备特定格式的】</p></li><li><p>该函数的语法的格式：</p><p>​    date_format(日期类型数据，’日期格式’)</p></li><li><p>多用于查询操作</p></li></ul></li></ul><h1><span id="分组函数聚合函数多行处理函数">分组函数/聚合函数/多行处理函数</span></h1><table><thead><tr><th>count</th><th>取得记录数</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>取平均</td></tr><tr><td>max</td><td>取最大的数</td></tr><tr><td>min</td><td>取最小的数</td></tr></tbody></table><p>以上函数自动忽略空值，分组函数不能使用在where语句中</p><h1><span id="去除重复内容">去除重复内容</span></h1><p>distinct只能放在记录最前面</p><pre class="line-numbers language-mysql"><code class="language-mysql">select distinct job from emp；select distinct deptno，job from emp；#将两个字段同时来看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="分组查询">分组查询</span></h1><ul><li><p>group by </p><ul><li><p>group by 【表示通过哪个或者哪些字段进行排序】</p></li><li><p>案例：找出每个工作岗位的最高薪水</p></li><li><p><code>`</code>mysql<br>#先按照工作岗位分组，使用max函数求每一组的最大值<br>select max(sal) from emp group by job<br>#其中 emp group by job 是一个整体<br>#表示先按照job分组，然后对每一组使用max（sal）求最高薪水</p></li></ul></li></ul><pre><code>#在这里有个坑select ename,job,max(sal) from emp group by job#在低版本的mysql中这个语句是可以执行的但是执行结果没有意义，这是由于语法在这方面比较松散，不严格。因为ename这个字段根本不是分组字段所以是不能放在select后面的。在其他数据库中比如oracle中时会报错的#重点：若一条DQL语句中有group by 子句，那么select关键字后面只能跟参与分组的字段和分组函数```</code></pre><ul><li><p>having</p><ul><li><p>having和where功能相同都是为了完成数据的过滤</p></li><li><p>where和having后面都是添加条件</p></li><li><p>where在group by之前完成过滤</p></li><li><p>having在group 后面完成过滤</p></li><li><p>案例：找出每个工作岗位的平均薪水，要求显示平均薪水大于1500</p></li><li><pre class="line-numbers language-mysql"><code class="language-mysql">select job,avg(sal) from emp group by job having avg(sal)>1500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>原则：</p><ul><li>尽量在where中过滤，无法过滤的数据，通常都是需要先分组之后再过滤的，这个时候可以选择使用having。</li></ul></li></ul></li><li><p>一个完整的DQL语句的总结：</p><p>select </p><p>​    ×××××</p><p>from</p><p>​    ×××××</p><p>where</p><p>​    ×××××</p><p>group</p><p>​    ×××××</p><p>having</p><p>​    ×××××</p><p>order by</p><p>​    ×××××</p><p>第一：以上的关键字顺序不能变，严格遵守</p><p>第二：执行顺序：</p><p>​    1、from                从某张表中检查数据</p><p>​    2、where            经过某条件进行过滤</p><p>​    3、group             然后分组</p><p>​    4、having            分组之后不满意在过滤</p><p>​    5、select            查询出来</p><p>​    6、order by            排序输出</p></li></ul><h1><span id="连接查询">连接查询</span></h1><ul><li><p>连接查询，也可以叫跨表查询，需要关联多个表进行查询</p></li><li><p>链接查询根据出现的年代分类：</p><ul><li>sql92</li><li>sql99</li></ul></li><li><p>链接查根据链接方式可以分为：</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li><li>全连接【不讲，使用很少】</li></ul></li><li><p>当多张表进行连接查询，若没有任何条件限制，会发生什么现象？</p><p>案例1：查询每个员工所在的部门名称，要求最终显示员工名和对应的部门名。</p><ul><li><p>小知识点：在进行多表连接查询的时候，尽量给表起别名，这样效率高，可读性高。</p><pre class="line-numbers language-mysql"><code class="language-mysql">select e.ename,d.dname from emp e,dept d;#如果不增加任何限制的话会出现笛卡尔积现象#注意：连接查询过程中虽然使用了限制条件，但是匹配的次数没有减少，还是相乘次数，只不过这一次显示的结果都是有效记录select e.ename,d.dname from emp e,dept d where e.xx = d.xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>案例2：找出每一个员工对应的工资等级，要求显示员工名，工资，工资等级</p><ul><li><pre class="line-numbers language-mysql"><code class="language-mysql">#sql99语法中的等值连接中的非等值连接select e.ename,e.sal,s.grade from emp e 【inner】 join salgrade s on e.sal between s.local ans s.hisal#sql92语法：select e.ename,e.sal,s.grade from emp e ， salgrade s where e.sal between s.local ans s.hisal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>案例3：找出每一个员工的上级领导，要求显示员工名以及对应的领导名</p><ul><li><pre class="line-numbers language-mysql"><code class="language-mysql">#同一张表，我们需要吧一张表看成两张表#sql99语法中内连接中的非等值连接select a.ename empname ,b.ename leadername from emp a 【inner】join emp b on a.mgr = b.empno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>案例4：找出每一个员工对应的部门名称，要求部门名称全部显示</p><ul><li><pre class="line-numbers language-mysql"><code class="language-mysql">#内连接：#    a表和b表能够完全匹配的记录查询出来，就被称为内连接#外连接：#    a表和b表能够完全匹配的记录查询出来之外，将其中一张表的记录无条件的      完全查询出来，对方表没有匹配的记录，会自动模拟出null与之匹配，这种     查询被称为外链接。    外连接查询的结果条数>=内连接的查询结果条数#sql99语法：外连接中的右外连接【右连接】select e.ename,d.dname from emp e right 【outer】 join dept d on e.deptno = deptno; #outer可以省略#sql99语法：外连接中的左外连接【左连接】select e.ename,d.dname from dept d left 【outer】 join emp e on e.deptno = deptno; #outer可以省略#上面两种写法是相同的，任何一个右外连接都可以写成左外连接，反之同样成立<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么inner和outer可以省略，加上去有什么好处？</p><ul><li>可以省略，因为区分内连接和外连接依靠的不是这些关键字，而是看sql             语句中是否存在right和left，若存在，表示一定是一个外连接，其他的都是内连接<ul><li>加上去的好处是增强可读性</li></ul></li></ul></li></ul></li></ul><p>  多张表进行表连接的语法格式：</p><p>  select   xxx  from  a </p><p>  join </p><p>  ​    b</p><p>  on</p><p>  ​    条件</p><p>  join</p><p>  ​    c</p><p>  on</p><p>  ​    条件；</p><p>  原理：</p><h1><span id="子查询">子查询</span></h1><p>1、什么是子查询？</p><ul><li>select语句嵌套select语句</li></ul><p>2、子查询可以出现在哪而？</p><ul><li><p>select…(select)</p><p>from…(select)</p><p>where..(select)</p></li></ul><p>3、where后面添加select子查询</p><p>案例：找出薪水比公司平均薪水高的员工，要求显示员工名和薪水。</p><ul><li><pre class="line-numbers language-mysql"><code class="language-mysql">select ename，sal from emp where sal > avg(sal)#以上语句执行报错，分组函数不能直接使用在where后面#正确做法#第一步：找出公司的平均薪水#第二部：找出薪水大于平均薪水的员工信息select ename,sal from emp where sal > (select avg(sal) from emp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>4、from后面使用子查询</p><p>案例：找出每个部门的平均薪水，并且要求显示平均薪水的薪水等级。</p><p>第一步：找出每个部门的平均薪水</p><pre class="line-numbers language-mysql"><code class="language-mysql">select deptno, avg(sal) as avgsal from emp group by deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步：将上面的临时查询结果当做临时表t，t表进行表连接，条件：t.avg(sal) between s.local and s.hisal</p><pre class="line-numbers language-mysql"><code class="language-mysql">select     t.deptno,t.avgsal,s.grade from     (select deptno, avg(sal) as avgsal from emp group by deptno) tjoin    salgrade s on     t.avgsal between s.local and s.hisal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、在select后面使用子查询【了解】</p><pre class="line-numbers language-mysql"><code class="language-mysql">select e.ename,(select d.dname from dept d where e,deptno = d.deptno) as dname from emp e;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="union">union</span></h1><p>union可以合并集合（相加）</p><pre class="line-numbers language-mysql"><code class="language-mysql">select    ename,job from emp where job = "manager"unionselect  ename,job from emp where job = "salesman"#等同于以下写法select ename,job from emp where job in ["manager","salesman"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="limit">limit</span></h1><ul><li>limit用来获取一张表中的某部分数据</li><li>limit只有在mysql数据库中存在，不通用，是mysql数据库管理系统的特色</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#案例1：找出员工表中前5条记录select ename from emp limit 5；#以上的sql语句的“limit 5”中的5表示从表中记录下标0开始，取5条等同于下面的sql语句select ename from emp limit 0,5；#limit的使用语法格式：limit起始下标没有指定，默认从0开始，0表示表中第一条记录。#案例2：找出公司中工资排名在前5名的员工select ename,sal from emp order by sal desc limit 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mysql中通用的分页sql语句：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">#每页显示3条记录每页显示3条记录第1页：0,3第2页：3,3第3页：6,3第4页：9,3.。。。。每页显示pagesize条记录第pageNo页：（pageNo-1）×pagesize，pageSizeselect ename,sal from emp order by sal desc limit （（pageNo-1）×pagesize，pageSize）;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="表">表</span></h1><ul><li><p>创建表</p><ul><li>表格（table），用来存储数据，表格是一种结构化文件。</li><li>表格行被称为记录（表中的数据），表格列被称为字段。</li><li>表格的字段属性包括：字段名称、字段数据类型、字段长度、字段约束</li></ul></li><li><pre class="line-numbers language-mysql"><code class="language-mysql">create table tableName（    columnName dataType(length),    columnName dataType(length)）;set character_set_results='gbk';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关于mysql数据库中的数据类型？</p><ul><li>varchar        可变长度字符串<ul><li>空间效率高，时间效率低</li></ul></li><li>char                定长字符串<ul><li>时间效率高，但是空间效率不一定会高</li></ul></li><li>int                   整数型<ul><li>int(3)表示最大可以存储999</li></ul></li><li>bigint              长整形<ul><li>对应的java程序中的lon类型</li></ul></li><li>float                浮点型单精度</li><li>double            浮点型双精度<ul><li>double（7,2）表示7个有效数字，2个小数位</li></ul></li><li>date                日期类型<ul><li>在实际来发中为了通用，所以日期类型一般不适用，采用字符串代替日期类型比较多</li></ul></li><li>blob                 Binary Largre Object二进制大对象<ul><li>专门存储图片声音视频等数据</li><li>数据库表中存储一个图片是很常见的，但是存储一个比较大的视频是很少见的，一般都是提供一个视频的链接地址</li></ul></li><li>clob                  character Large Object字符大对象<ul><li>可以存储比较大的文本，4G+的字符串可以存储</li></ul></li><li>其他</li></ul></li></ul><h1><span id="insert">insert</span></h1><ul><li>向表格插入数据必须是使用insert语句，这属于dml语句</li><li>dml语句包括：insert，update，delete、</li><li>insert语句的语法格式：<ul><li>insert into tablename （columnname1，columnname2，columnname3）values（value1，value2，value3）</li></ul></li><li>字段和值必须一一对应，个数必须相同，数据类型必须一致。</li></ul><h1><span id="关于sql脚本">关于sql脚本</span></h1><ul><li>该文件是一个普通的文本文件，后缀名.sql，被称为sql脚本</li><li>在sql脚本中有大量的sql语句，想批量的执行sql语句，可以将这些sql语句写入sql脚本文件中，直接使用source执行这个脚本，可以执行大量的sql语句</li><li></li></ul><h1><span id="增删改表结构不是很重要ddl">增删改表结构(不是很重要)（DDL）</span></h1><pre class="line-numbers language-mysql"><code class="language-mysql">#如需求改变，需要向t_studnts中加联系电话字段，字段名称为：contact_tel 类型为varchar（40）#增alter table t_student add contact_tel varchar(40)#将长度改为20#改alter table t_student modify tel varchar(20)#删alter table t_student drop tel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="增删改表中的数据insert-update-delete">增删改表中的数据【insert、update、delete】</span></h1><h2><span id="update">update</span></h2><ul><li><p>update语句的语法格式：</p><ul><li>update tablename set 字段名 = 字段值，字段名 = 字段值，where 条件；</li></ul></li><li><p>注意：update语句没有条件，会将一张表中所有的数据全部更新</p></li><li><pre class="line-numbers language-mysql"><code class="language-mysql">#将no=3的记录name修改为zhangsan，email修改为zhangsan@bjpowernode.comupdate t_student set name='zhangsan',email ='zhangsan@bjpowernode.com' where no = 3;#将所有的name都修改为lisiupdate t_student set name = 'lisi';#将emp_bak中的所有的名字中含有o的员工名修改为zhangsanupdate emp_bak set ename = 'zhangsan' where ename like '%o%';#将emp_bak表中所有工作岗位是manager和salesman的员工工资上调10%update emp_bak set sal=sal*1.1 where job = 'manager' or job = 'salesman'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2><span id="delete">delete</span></h2><ul><li><p>delete 语句的语法格式：</p><ul><li>delete from tablename where 条件</li></ul></li><li><p>注意：若没有条件限制，会将这种表中所有的记录全部删除</p></li><li><pre class="line-numbers language-mysql"><code class="language-mysql">#删除学号=3的学生delete from t_student where no = 3#删除所有记录delete from t_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1><span id="约束">约束</span></h1><ul><li><p>什么是约束，为什么要使用约束？</p><ul><li>约束对应的英语单词：constraint</li><li>约束实际上就是表中数据的限制条件</li><li>表在设计的时候加入约束的目的就是为了保证表中的记录完整和有效 </li></ul></li><li><p>约束包括哪些？</p><ul><li>非空约束            not null</li><li>唯一性约束             unique</li><li>主键约束                 primary key 简称PK</li><li>外键约束                 foreign key   简称FK</li><li>检查约束【目前mysql不支持，oracle支持】      </li></ul></li><li><p>非空约束</p><ul><li><p>not null约束的字段，不能为NULL值，必须给定具体的数据</p></li><li><p>创建表，给字段添加非空约束【创建用户表，用户名不能为空】</p></li><li><pre class="line-numbers language-mysql"><code class="language-mysql">create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>唯一性约束</p><ul><li><p>unique约束的字段具有唯一性，不可重复</p></li><li><pre class="line-numbers language-mysql"><code class="language-mysql">#创建用户，保证邮箱地址唯一#列级约束create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) unique);#表级约束create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    unique（email）);#注意，使用表级约束给多个字段联合添加约束【以下程序表示name和email两个字段联合唯一】create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    unique（name,email）);#表级约束还可以给约束起名字#为什么要起名字，因为以后可以通过这个名字删除这个约束drop table if exist t_user;create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    constraint t_user_email_unique unique（name,email）);#查询约束名字use information_schema;show tables;#其中有个表叫table_constraint的表专门用来存储约束信息的select constraint_name from table_constraints where table_name='t_user';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>主键约束-primary key 简称PK</p><ul><li><p>主键涉及到的术语：</p><ul><li>主键约束</li><li>主键字段</li><li>主键值</li></ul></li><li><p>以上的主键约束、主键字段、主键值的关系？</p><ul><li>表中的某个字段添加主键约束之后，该字段被称为主键字段，主键字段中出现的每一个数据都被称为主键值。</li></ul></li><li><p>给某个字段添加主键约束primary key后，该字段不能重复，并且也不能为空。效果和not null unique相同，但是本质不同，主键约束除了可以做到not null unique之外，主键字段还会默认添加“索引-index”</p></li><li><p>一张表应该有主键字段，若没有，表示这张表是无效的。“主键值”是当前行数据的唯一标识。“主键值”是当前行数据的身份证号。即使表中的两行记录相关的数据是相同的，但是由于主键值不同，我们认为这是两行完全不同的数据。</p></li><li><p>给一个字段添加主键约束，被称为单一主键。</p></li><li><pre class="line-numbers language-mysql"><code class="language-mysql"> #单一主键 #列表定义方式   drop table if exist t_user;   create table t_user(      id int(10) primary key,    name varchar(32)   )   #单一主键   #列表定义方式   drop table if exist t_user;   create table t_user(     id int(10),    name varchar(32)，    primary key（id）   )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code></code></pre></li><li></li><li><p>给多个字段联合添加一个主键约束，被称为复合主键。</p></li><li><p>无论是单一主键还是复合主键，一张表主键约束只能有一个</p></li><li><p>主键根据性质分类：</p><ul><li>自然主键<ul><li>主键值若是一个自然数，这个自然数和当前表的业务没有任何关系，这种主键叫做自然主键 。</li></ul></li><li>业务主键<ul><li>主键值若和当前表中业务紧密相关的，那么这种主键值被称为业务主键，当业务数据发生改变的时候，主键值通常会受到影响，所以业务主键使用较少。大部分都是使用自然主键。</li></ul></li></ul></li><li><p>在mysql数据库管理系统中提供了一个自增的数字，专门用来自动生成主键值。主键值不需要用户维护，也不需要用户提供了，自动生成的。这个自增的数字默认从1开始，以1递增：1、 2、 3、 …….</p><ul><li><pre class="line-numbers language-mysql"><code class="language-mysql">drop table if exist t_uesr;create table t_user(    id int(10) primary key auto_increment,    name varchar(32))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><code>`</code></li></ul><p><code>`</code></p></li></ul></li><li><p>外键约束 foreign key 简称FK</p><ul><li><p>外键涉及到的术语</p><ul><li>外键约束</li><li>外键字段</li><li>外键值</li></ul></li><li><p>外键约束、外键字段、外键值之间的关系？</p><ul><li>某个字段添加外键约束之后，该字段称为外键字段，外键字段中的每一个数据都是外键值。</li></ul></li><li><p>外键也分为：单一外键和复合外键（联合多个字段添加一个外键）</p></li><li><p>一张表中可以有多个外键字段。</p></li><li><p>分析场景：</p><p>请设计数据库用来存储学生和班级信息，给出两种解决方案：</p><p>学生信息和班级信息之间的关系，一个班级对应多个学生，这是典型的一对多的关系。</p><p>第一种设计方案：将学生信息和班级信息存储到一张表中。</p><p>学生信息表t_student</p><p>sno(pk)             sname               classno                     cname</p><hr><p>1                         jack                   100                            实验中学1班</p><p>2                         allen                 200                             实验中学2班</p><p>3                         lucy                   200                            实验中学2班                     </p><p>4                         lisi                     300                            实验中学3班</p><p><u>以上设计缺点：数据冗余</u></p><p>第二种解决方案：将学生信息和班级信息分开两张表存储你，学生表 + 班级表</p><p>学生表t_student</p><p>sno(pk)             sname            classno（fk）</p><hr><p>1                         jack                   100</p><p>2                         allen                 200</p><p>3                         lucy                  200</p><p>4                         lisi                     300</p><p>班级表t_class</p><p>cno(pk)       cname</p><hr><p>100               实验中学1班</p><p>200               实验中学2班</p><p>300               实验中学3班</p><p>结论：为了保证t_student表中的classno字段中的数据必须来自于t_class表中cno字段中的数据，有必要给t_student表中的classno字段添加外键约束，classno字段被称为外键字段，该字段中的100、 200、 300、被称为外键值。classno这里是一个单一外键字段</p><p>注：外键值可以为null。</p><p>注：外键字段去引用一张表的某一个字段的时候，被引用的字段必须具有unique约束。</p><p>注：有了外键引用之后，表分为父表和子表，以上父表是：班级表，子表是：学生表。创建表先创建父表，在创建子表，删除数据的时候，先删除子表中的数据，后删除父表中的数据。插入数据的时候先插入父表中的数据，再插入子表中的数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">insert into t_student(sno,sname,classno) value(1,'',100);insert into t_student(sno,sname,classno) value(1,'',100);drop table if exists t_student;drop table if exists t_class;create table t_class(    cno int(3) primary key,    cname varchar(128) not null unique);create table t_students(    sno int(3) primary key,    sname varchar(32) not null,    classno int(3),    constraint t_student_classno_fk foreign key(classno) reference t_class(cno));insert into t_class(cno,cname) value(100,'高三一班')；insert into t_class(cno,cname) value(200,'高三二班')；insert into t_class(cno,cname) value(300,'高三三班')；insert into t_student(sno,sname,classno) value(1,'jack',100);insert into t_student(sno,sname,classno) value(2,'tom',100);insert into t_student(sno,sname,classno) value(3,'lucy',200);insert into t_student(sno,sname,classno) value(4,'king',200);insert into t_student(sno,sname,classno) value(5,'wang',300);insert into t_student(sno,sname,classno) value(6,'lisi',300);select * from t_studengt;select * from t_class;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点：典型的一对多的设计模式，在多的一方加外键。</p></li></ul></li></ul><h1><span id="级联更新和经联删除">级联更新和经联删除</span></h1><ul><li>添加级联更新和级联删除的时候需要在外键约束后面添加</li><li>在删除父表中的数据时，级联删除子表中的数据 on delete cascade<ul><li>删除外键约束<ul><li>alter table t_student drop foreign key fk_name;</li></ul></li><li>添加外键约束<ul><li>alter table t_student add constraint   fk_name foreign key (classno) references t_class(cno) on delete cascade</li></ul></li></ul></li><li>在更新父表中的数据时，级联更新子表中的数据 on update cascade<ul><li>删除外键约束<ul><li>alter table t_student drop foreign key fk_name;</li></ul></li><li>添加外键约束<ul><li>alter table t_student add constraint   fk_name foreign key (classno) references t_class(cno) on update cascade</li></ul></li></ul></li><li>以上的级联更新和级联删除谨慎使用，因为级联操作会将数据改变或者删除【数据无价】</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog初级自定义自定义教程</title>
    <link href="/2018/08/02/hello-world/"/>
    <url>/2018/08/02/hello-world/</url>
    
    <content type="html"><![CDATA[<h1><span id="远程部署">远程部署</span></h1><p>ssh-keygen -t rsa -C <a href="mailto:&#39;862722353@qq.com" target="_blank" rel="noopener">&#39;862722353@qq.com</a>‘   #将公钥拷贝到远程端</p><p>ssh  -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>   #测试连接</p><p>hexo s 本地查看</p><p>hexo g</p><p>hexo d</p><h1><span id="建立标签页">建立标签页</span></h1><p>hexo n page tags</p><p>index文件 加入</p><p>type： “tags”</p><h1><span id="启用社交">启用社交</span></h1><p>主题配置文件搜索social</p><h1><span id="加新文章">加新文章</span></h1><p>hexo n  名字</p><h1><span id="加入打赏">加入打赏</span></h1><p>主题配置文件搜索reward</p><h1><span id="计入公众号">计入公众号</span></h1><p>主题配置文件搜索wechat</p><h1><span id="圆头像">圆头像</span></h1><p>/themes/next/source/css/_common/components/sidebar目录下</p><p>sidebar-author.style</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.site-author-image</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> $site-author-image-padding<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> $site-author-image-width<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> $site-author-image-height<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> $site-author-image-border-width solid $site-author-image-border-color<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">2</span>s all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.site-author-image</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.site-author-name</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> $site-author-name-margin<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> $site-author-name-align<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> $site-author-name-color<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> $site-author-name-weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.site-description</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> $site-description-margin-top<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> $site-description-align<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> $site-description-font-size<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> $site-description-color<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="设置阅读全文">设置阅读全文</span></h1><p>主题配置文件搜索auto_excerpt</p><h1><span id="添加fork-github">添加fork github</span></h1><p><a href="http://tholman.com/github-corners/网址选择想要的图形代码赋值" target="_blank" rel="noopener">http://tholman.com/github-corners/网址选择想要的图形代码赋值</a></p><p>找到blogs/themes/next/layout/_layout.swig文件</p><p>找到23行将代码复制到</p><p>headband下面</p><h1><span id="修改链接样式">修改链接样式</span></h1><p>/themes/next/source/css/_common/components/post/post.style文件</p><p>最后面加上以下语句</p><p>.post-body p a{<br>  color: #345;<br>  border-bottom: none;<br>  &amp;:hover{<br>    color: red<br>}<br>}</p><h1><span id="修改文章底部的">修改文章底部的</span></h1><p>/home/jason/Documents/blogs/themes/next/layout/_macro/post.swig</p><p>搜索tags</p><p>找到#位置添加</p><p><i class="fa fa-google"></i></p><h1><span id="添加评论系统valine">添加评论系统valine</span></h1><p>主题配置文件搜索valine</p><p>注册learncloud</p><h1><span id="添加搜索">添加搜索</span></h1><p>next官网教程</p><h1><span id="添加不蒜子统计">添加不蒜子统计</span></h1><p>next官网教程</p><h1><span id="添加加载">添加加载</span></h1><p>主题配置文件</p><p>搜索pace</p><h1><span id="添加点击特效">添加点击特效</span></h1><h1><span id="去除下面强力驱动">去除下面强力驱动</span></h1><p>/themes/next/layout/_partials/footer.swig文件</p><p>修改</p><!--–&gt;<h1 id="统计字数阅读时长"><a href="#统计字数阅读时长" class="headerlink" title="统计字数阅读时长"></a>统计字数阅读时长</h1><p>sudo npm install hexo-wordcount –save</p><p>主题配置文件</p><p>搜索post——wordcount</p>-->]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

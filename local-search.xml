<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/01/16/hello-world/"/>
    <url>/2020/01/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记1</title>
    <link href="/2020/01/16/Django%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/01/16/Django%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-day"><a href="#1-day" class="headerlink" title="1 day"></a>1 day</h2><h3 id="了解小知识"><a href="#了解小知识" class="headerlink" title="了解小知识"></a>了解小知识</h3><ul><li><p>了解 djngo设计模式（MVC，MTV）</p></li><li><p>安装django（1.11.4）</p><p><code>pip install Django==1.11.4</code></p></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li><p>在合适位置创建一个目录</p><p><code>/home/jason/Doucements/code/forDjango/</code></p></li><li><p>在目录位置打开终端</p></li><li><p><code>django-admin startproject project01</code></p></li><li><p><code>tree . /F</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229154035290.png" srcset="/img/loading.gif" alt="image-20191229154035290"></p></li><li><p>manage.py 是一个命令行工具，可以使我们用多种方式对django项目进行交互</p></li><li><p>init.py  项目的配置文件</p></li><li><p>urls.py 项目的url声明</p></li><li><p>wsgi.py 项目与wsgi兼容的web服务入口</p></li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="设计表结构"><a href="#设计表结构" class="headerlink" title="设计表结构"></a>设计表结构</h4><ul><li>班级表结构<ul><li>表名 grade</li><li>字段<ul><li>班级名称 gname</li><li>成立时间gdate</li><li>女生总数ggirlname</li><li>男生总数gboyname</li><li>是否删除isDelete</li></ul></li></ul></li><li>学生表结构<ul><li>表名student</li><li>字段<ul><li>学生姓名sname</li><li>学生性别sgender</li><li>学生年龄sage</li><li>学生简介scontend</li><li>学生班级sgrade</li><li>是否删除isDelete</li></ul></li></ul></li></ul><h4 id="配置数据库-（注意django-默认sqlite）"><a href="#配置数据库-（注意django-默认sqlite）" class="headerlink" title="配置数据库 （注意django 默认sqlite）"></a>配置数据库 （注意django 默认sqlite）</h4><ul><li><p>在setting.py文件中的databasees选项中进行数据库配置</p></li><li><p>配置mysql</p><ul><li><p>python3 安装的pymysql</p></li><li><p>在 init文件中 写入下面两行代码</p><pre><code class="python">import pymysqlpymysql.install_as_MySQLdb()</code></pre></li><li><p>创建一个数据库</p></li><li><p>配置</p></li><li><pre><code class="python">DATABASES = {    &#39;default&#39;: {        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        &#39;NAME&#39;: &#39;forDjango&#39;,        &#39;USER&#39;: &#39;root&#39;,        &#39;PASSWORD&#39;: &#39;qq123&#39;,        &#39;HOST&#39;: &#39;localhost&#39;,        &#39;PORT&#39;: &#39;3306&#39;,    }}</code></pre></li></ul></li></ul><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><ul><li><p>在一个项目中可以创建多个应用，每个应用进行一种业务处理</p></li><li><p>打开终端，进入project01目录</p></li><li><p><code>python manage.py startapp myApp</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229161301835.png" srcset="/img/loading.gif" alt="image-20191229161301835"></p></li><li><p>myApp目录说明</p><ul><li>admin.py 站点配置</li><li>model.py 模型</li><li>view.py 视图</li></ul></li></ul><h4 id="激活应用"><a href="#激活应用" class="headerlink" title="激活应用"></a>激活应用</h4><ul><li><p>在<code>setting.py</code>文件中，将myApp应用加入到INSTALLED_APP中</p></li><li><pre><code class="python">INSTALLED_APPS = [    &#39;django.contrib.admin&#39;,    &#39;django.contrib.auth&#39;,    &#39;django.contrib.contenttypes&#39;,    &#39;django.contrib.sessions&#39;,    &#39;django.contrib.messages&#39;,    &#39;django.contrib.staticfiles&#39;,    &#39;myAPP&#39;,]</code></pre></li></ul><h4 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h4><ul><li><p>一个数据表就对应一个模型</p></li><li><p>在<code>models.py</code>中定义模型</p><ul><li><p>引入<code>from django.db import models</code></p></li><li><p>模型类型要继承models.Model类</p></li><li><pre><code class="python">from django.db import models# Create your models here.class Grades(models.Model):    gname = models.CharField(max_length=20)    gdate = models.DateField()    ggirlnum = models.IntegerField()    gboynum = models.IntegerField()    isDelete = models.BooleanField(default=False)class Students(models.Model):    sname = models.CharField(max_length=20)    sgender = models.BooleanField(default=True)    sage = models.IntegerField()    scontend = models.CharField(max_length=20)    isDelete = models.BooleanField(default=False)    sgrade = models.ForeignKey(&quot;Grades&quot;)</code></pre></li></ul></li><li><p>说明： 不需要定义主键， 在生成时自动添加，并且值为自动增加</p></li></ul><h4 id="在数据库中生成数据表"><a href="#在数据库中生成数据表" class="headerlink" title="在数据库中生成数据表"></a>在数据库中生成数据表</h4><ul><li><p>生成迁移文件</p><ul><li><p><code>python manage.py makemigrations</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229163651715.png" srcset="/img/loading.gif" alt="image-20191229163651715"></p></li><li><p>在migration目录下生成了以迁移文件，此时数据库中还有生成数据表</p></li></ul></li><li><p>执行迁移（相当于执行了sql语句）</p><ul><li><p><code>python manage.py migrate</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229164023734.png" srcset="/img/loading.gif" alt="image-20191229164023734"></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229164123022.png" srcset="/img/loading.gif" alt="image-20191229164123022"></p></li><li><p>数据表已经生成，</p></li></ul></li></ul><h4 id="测试数据操作"><a href="#测试数据操作" class="headerlink" title="测试数据操作"></a>测试数据操作</h4><ul><li><p>进入到<code>python mange.py shell</code></p></li><li><p>引入包 </p><ul><li><pre><code class="python">from myApp.models import Grades,Studentsfrom django.utils improt timezonefrom datetime import *Grades.objects.all() # 类名.object.all()查询该表所有数据</code></pre></li></ul></li><li><p>添加数据</p><ul><li><p>本质：创建一个模型的实例</p></li><li><pre><code class="python">grade1=Grade()grade1.gname =&#39;python04&#39;grade1.gdate=datetime(year=2017,month=7,day=17)grade1.ggirlnum=2grade1.gboynum=70###关键步骤,执行save后才能像数据库汇总存储数据grade1.save()</code></pre></li><li><p>为了方便查看数据可以mdoel.py中Grade类中重写<code>__str__</code>函数</p></li><li><pre><code class="python">def __str__(self):    return &quot;%s-%d-%d&quot; %(self.gname, self.ggirlnum, self.gboynum)</code></pre></li></ul></li><li><p>查看某个对象</p><ul><li><pre><code class="python">Grade.objects.get(pk=2)#类名.objects.get(pk=2)</code></pre></li></ul></li><li><p>修改数据</p><ul><li><pre><code class="python">对象名.属性=新值对象名.save()</code></pre></li></ul></li><li><p>删除数据</p><ul><li><pre><code class="python">对象名.delete()</code></pre></li></ul></li><li><p>关联对象</p><ul><li><pre><code class="python">stu = Student()stu.sname=&quot;jason&quot;stu.sgender=Truestu.sage=22stu.scontend=&#39;i am jason&#39;stu.sgrade = garade1  #关联数据库，生成外键stu.save()</code></pre></li><li><p>获得关联对象的集合</p><ul><li>需求：获取pyhton04班级的所有学生</li><li>对象名关联的类名小写_set.all()</li><li>grade1.students_set.all()</li></ul></li><li><p>创建关联对象</p><pre><code class="python">stu = grade1.students_set.create(sname=u&#39;曾志伟&#39;，sgender=True,scontend=u&#39;我叫曾志伟&#39;，sage=45)#不需要save（）</code></pre></li></ul></li></ul><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><ul><li>格式<ul><li><code>python manage.py runserver ip:port</code></li><li>ip 可以不写，表示本机ip</li><li>端口号默认是8000</li></ul></li><li>这是一个pyhton写的轻量级web服务器，仅用来在开发测试中使用</li></ul><h4 id="Admin站点管理"><a href="#Admin站点管理" class="headerlink" title="Admin站点管理"></a>Admin站点管理</h4><ul><li><p>概述</p><ul><li>内容发布：负责添加、修改、删除内容</li><li>公共访问</li></ul></li><li><p>配置Admin应用</p><ul><li>在settings.py文件中的INSTALLED_APPS中添加<code>‘django.contrib.admin’</code>默认已经添加好了</li></ul></li><li><p>创建管理员用户</p><ul><li><code>python manage.py createsuperuser</code></li><li>依次输入用户信息</li><li>可以在<code>127.0.0.1:8000/admin/</code>网址进入管理员登录界面</li></ul></li><li><p>汉化</p><ul><li>修改setting.py文件中的language选项为<code>zh-Hans</code>，还有TIME_ZONE=’Asia/Shanghai‘</li></ul></li><li><p>管理数据表</p><ul><li><p>修改myApp目录下的admin.py文件</p><pre><code class="python">from .models import Grades,Studentsadmin.site.register(Grades)admin.site.register(Students)</code></pre></li><li><p>自定义管理页面</p><pre><code class="python">class GradeAdmin(admin.ModelAdmin):    # 列表页属性    #显示字段    list_display = [&#39;pk&#39;,&#39;gname&#39;,&#39;gdate&#39;,&#39;ggirlnum&#39;,&#39;gboynum&#39;,&#39;isDelete&#39;]    #过滤字段    list_filter = [&#39;gname&#39;]    #搜索字段    search_fields = [&#39;gname&#39;]    #分页    list_per_page = 5    # 添加、修改页属性    #规定属性的顺序    # 给属性分组    #fieldsets和field不能同时使用    #fields =    fieldsets = [        (&quot;num&quot;,{&quot;fields&quot;:[&#39;ggirlnum&#39;,&#39;gboynum&#39;]}),        (&quot;base&quot;,{&quot;fields&quot;:[&#39;gname&#39;,&#39;gdate&#39;,&#39;isDelete&#39;]}),    ]#注意：自定义完成已定义要注册admin.site.register(Grades,GradeAdmin)admin.site.register(Students)</code></pre></li><li><p>关联对象</p><ul><li><p>需求：在创建一个班级时可以直接添加几个学生</p><pre><code class="python">class StudentInfo(admin.TabularInline): #还有一个StackedInline    model = Students    extra =2class GradeAdmin(admin.ModelAdmin):    inlines = [StudentInfo]</code></pre></li></ul></li><li><p>布尔值显示问题</p><pre><code class="python">class StudentsAdmin(admin.ModelAdmin):    def gender(self):        if self.sgender:            return &quot;男&quot;        else:            return  &quot;女&quot;    #设置页面列的名称    gender.short_description = &quot;性别&quot;</code></pre></li><li><p>执行动作在页面位置问题</p><pre><code class="python">actions_on_top = Falseactions_on_bottom = True</code></pre></li><li><p>使用装饰器来进行注册</p></li><li><pre><code class="python">@admin.register(类名)</code></pre></li></ul></li></ul><h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><blockquote><p>在django中，视图对web请求进行回应</p><p>视图就是python函数，在view.py文件中定义</p></blockquote><h4 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h4><pre><code class="python">from django.http import HttpResponsedef index(request):    return HttpResponse(&quot;jason is a good man&quot;)</code></pre><h4 id="配置URL控制器"><a href="#配置URL控制器" class="headerlink" title="配置URL控制器"></a>配置URL控制器</h4><ul><li><p>修改project目录下的urls.py文件</p><pre><code class="python">from django.conf.urls import url,includefrom django.contrib import adminurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),    url(r&#39;^&#39;, include(&#39;myApp.urls&#39;)),]</code></pre></li><li><p>在myApp应用目录下创建一个urls.py文件</p><pre><code class="python">from django.conf.urls import urlfrom . import viewsurlpatterns=[    url(r&#39;^$&#39;,views.index)]</code></pre></li></ul><h3 id="模板的基本使用"><a href="#模板的基本使用" class="headerlink" title="模板的基本使用"></a>模板的基本使用</h3><blockquote><p>模板是HTML页面，可以根据视图中传递过来的数据进行填充</p></blockquote><h4 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h4><ul><li><p>创建templates目录，在目录下创建对应项目的模板目录（project/templates/myApp）</p></li><li><p>配置模板路径</p><ul><li><p>修改setting.py文件下的templates</p><pre><code class="python">TEMPLATES = [    {        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,        #设置下面的DIRS属性        &#39;DIRS&#39;: [os.path.join(BASE_DIR,&#39;templates&#39;)],        &#39;APP_DIRS&#39;: True,        &#39;OPTIONS&#39;: {            &#39;context_processors&#39;: [                &#39;django.template.context_processors.debug&#39;,                &#39;django.template.context_processors.request&#39;,                &#39;django.contrib.auth.context_processors.auth&#39;,                &#39;django.contrib.messages.context_processors.messages&#39;,            ],        },    },]</code></pre></li></ul></li><li><p>定义两个模板</p><ul><li><p>在templates/myApp/目录下定义两个模板（grades.html文件和students.html）</p></li><li><p>模板语法</p><pre><code class="python">{{输出值，可以是变量，也可以是对象属性}}{{%执行代码段%}}</code></pre></li></ul></li><li><p><code>http://127.0.0.1:8000/grades/</code></p><ul><li><p>写grades.html模板</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;班级信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;班级信息列表&lt;/h1&gt;&lt;ul&gt;    &lt;!--[python04, python05,python06]--&gt;    {%for grade in grades%}        <li>            <a href="#">{{grade.gname}}</a>        </li>        {%endfor%}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>去视图中写函数，用来响应http请求即调用模板</p><pre><code class="python">def grades(request):    #去模板中取数据    gradesList = Grades.objects.all()    #将数据传递给模板，模板在渲染页面，将渲染好的页面返回浏览器    return render(request,&#39;myApp/grades.html&#39;,{&quot;grades&quot;:gradesList})</code></pre></li><li><p>要去myAPP中的urls.py 加入模板</p><pre><code class="python">urlpatterns=[    url(r&#39;^$&#39;,views.index),    url(r&#39;^grades/$&#39;,views.grades)]</code></pre></li></ul></li><li><p>点击班级，显示对应班级的所有学生</p><ul><li><p>修改模板</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;班级信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;班级信息列表&lt;/h1&gt;&lt;ul&gt;    &lt;!--[python04, python05,python06]--&gt;    {%for grade in grades%}        <li>            <!--主要是加入了href，-->            <a href="{{grade.id}}">{{grade.gname}}</a>        </li>        {%endfor%}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>定义视图</p><pre><code class="python">from django.shortcuts import render# Create your views here.from django.http import HttpResponsefrom .models import Grades,Studentsdef index(request):    return HttpResponse(&quot;jason is a good man&quot;)def detail(request,num,num2):    return HttpResponse(&quot;detail-%s-%s&quot; %(num,num2))def grades(request):    #去模板中取数据    gradesList = Grades.objects.all()    #将数据传递给模板，模板在渲染页面，将渲染好的页面返回浏览器    return render(request,&#39;myApp/grades.html&#39;,                  {&quot;grades&quot;:gradesList})def students(request):    studentsLsit = Students.objects.all()    return  render(request,&#39;myApp/students.html&#39;,{&quot;students&quot;:studentsLsit})def gradestudents(request,num):    grade = Grades.objects.get(pk=num)    studentsLsit = grade.students_set.all()    return render(request, &#39;myApp/students.html&#39;, {&quot;students&quot;: studentsLsit})</code></pre></li><li><p>配置url</p><pre><code class="python">from django.conf.urls import urlfrom . import viewsurlpatterns=[    url(r&#39;^$&#39;,views.index),    url(r&#39;^grades/$&#39;,views.grades),    url(r&#39;^students/$&#39;,views.students),    url(r&#39;^grades/(\d+)$&#39;,views.gradestudents)]</code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用keras搭建DQN</title>
    <link href="/2018/09/14/%E7%94%A8keras%E6%90%AD%E5%BB%BADQN/"/>
    <url>/2018/09/14/%E7%94%A8keras%E6%90%AD%E5%BB%BADQN/</url>
    
    <content type="html"><![CDATA[<p>dqn总结：<br>最近时间虽然一直看这个dqn代码，虽然看懂了，但是思路却一直不明确，无法自己复写出自己的代码，所以就想写一篇博客来整理一下思路。如果这篇文章写完了，应该思路就清晰了。</p><p>本文主要是看了莫烦的教学视频，在视频中，老师（尊称一声老师O(∩_∩)O哈哈~）是用tensoflow1.2来搭建框架的。本人在看懂了代码后，认为DQN中采用了两个模型，此时用tensorflow来完成这些网络的灵活搭建时当让是最好的选择，但是在我看来，似乎keras中的函数式模型似乎也可以做到啊（Sequential模型肯定是不能完成这件事的），所以我就想用keras来重写这个代码，以此来验证自己是不是真的把DQN的实现过程搞懂了。</p><pre><code class="python">#首先我们要构建一个DQN类class DQN:    #之后我们需要构建网络    def _build_net(self):        pass    #学习需要经验池，这个学习是off-learning    def store_transition(self,s,a,r,s_):        pass    #进行学习    def learn(self):        pass    #动作决策    def choose_action(self,observation):        pass</code></pre><p>以上就是我们要完成的东西了，按四个部分一次完成就可以实现DQN类了</p><p>但是我们还要重写类方法中<code>__init__</code>方法：</p><pre><code class="python">def __init__(    self,    n_actions,    n_features,    learning_rate=0.01,    reward_decay=0.9,    e_greedy=0.9,    replace_target_iter=300,    memory_size=500,    batch_size=32,    e_greedy_increment=None,    output_graph=False,):    self.n_actions = n_actions    self.n_features = n_features    self.lr = learning_rate    self.gamma = reward_decay    self.epsilon_max = e_greedy    self.replace_target_iter = replace_target_iter    self.memory_size = memory_size    self.batch_size = batch_size    self.epsilon_increment = e_greedy_increment    self.epsilon = 0 if e_greedy_increment is not None else self.epsilon_max    self.learn_step_counter = 0    self.memory = np.zeros((self.memory_size, n_features * 2 + 2))    self._build_net()</code></pre><p>其实用keras来实现DQN的话，和tenosrflow来写，没有很大的区别。主要是就是在构建网络时代码有些许差别。代码如下：</p><pre><code class="python">def _build_net(self):    # 构建evaluation网络    eval_inputs = Input(shape=(self.n_features,))    x = Dense(64, activation=&#39;relu&#39;)(eval_inputs)    x = Dense(64, activation=&#39;relu&#39;)(x)    self.q_eval = Dense(self.n_actions)(x)    # 构建target网络，注意这个target层输出是q_next而不是，算法中的q_target    target_inputs = Input(shape=(self.n_features,))    x = Dense(64, activation=&#39;relu&#39;)(target_inputs)    x = Dense(64, activation=&#39;relu&#39;)(x)    self.q_next = Dense(self.n_actions)(x)    self.model1 = Model(target_inputs, self.q_next)    self.model2 = Model(eval_inputs, self.q_eval)    rmsprop = RMSprop(lr=self.lr)    self.model1.compile(loss=&#39;mean_squared_error&#39;, optimizer=rmsprop, metrics=[&#39;accuracy&#39;])    self.model2.compile(loss=&#39;mean_squared_error&#39;, optimizer=rmsprop, metrics=[&#39;accuracy&#39;])</code></pre><p>每隔一段时间将evaluation层参数赋值给target层</p><pre><code class="python">def store_transition(self, s, a, r, s_):    if not hasattr(self, &#39;memory_counter&#39;):        self.memory_counter = 0    transition = np.hstack((s, [a, r], s_))    index = self.memory_counter % self.memory_size    self.memory[index, :] = transition  # memory是一个二维列表    self.memory_counter += 1</code></pre><p>接着是learning函数</p><pre><code class="python">    def learn(self):        if self.learn_step_counter % self.replace_target_iter == 0:            self.target_replace_op()            print(&#39;\ntarget_params_replaced\n&#39;)        if self.memory_counter &gt; self.memory_size:            sample_index = np.random.choice(self.memory_size, size=self.batch_size)        else:            sample_index = np.random.choice(self.memory_counter, size=self.batch_size)        batch_memory = self.memory[sample_index, :]        q_next, q_eval = self.model1.predict(batch_memory[:, -self.n_features:]), self.model2.predict(            batch_memory[:, :self.n_features])        q_target = q_eval.copy()        batch_index = np.arange(self.batch_size, dtype=np.int32)        eval_act_index = batch_memory[:, self.n_features].astype(int)        reward = batch_memory[:, self.n_features + 1]        q_target[batch_index, eval_act_index] = reward + self.gamma * np.max(q_next, axis=1)        self.model2.fit(batch_memory[:, :self.n_features], q_target, epochs=10)        self.epsilon = self.epsilon + self.epsilon_increment if self.epsilon &lt; self.epsilon_max else self.epsilon_max        self.learn_step_counter += 1</code></pre><p>其他部分和莫凡代码是一样的，就不贴出来了。</p><p>完整的网络部分代码和环境部分代码放在github上了：<a href="https://github.com/Jason33Wang/ReinforcementLearning_by_keras" target="_blank" rel="noopener">https://github.com/Jason33Wang/ReinforcementLearning_by_keras</a></p><p>注明：DQN.py和maze_env.py文件是直接fork莫凡的</p><p>下面也贴上原莫凡的tensorflow代码：<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network</a></p><p>用keras搭建的网络用来训练这个游戏时，收敛的并没有莫凡原代码收敛的好，之后在原基础上，把memory的size增加了一倍后才收敛的较好。</p><p>写完这篇文章后，发现没什么技术含量，不过自己的思路更加清晰了，大家仅供参考吧。希望自己经过以后的学习能写出更好，更有深度的文章吧！</p>]]></content>
    
    
    <categories>
      
      <category>日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reinforecementLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>imageDataGenerator</title>
    <link href="/2018/09/02/imageDataGenerator/"/>
    <url>/2018/09/02/imageDataGenerator/</url>
    
    <content type="html"><![CDATA[<p>在深度学习中，我们在<strong>trian</strong>我们的模型时，往往在数据方面很难找到足够的数据。而在<strong>keras</strong>中，提供了<strong>imageDataGenerator</strong></p><p><strong>iamgeDataGenerator</strong>是一个生成器类，可以将我们输入的原始数据自动经过平移、旋转等操作，生成无限的差异性图片。在这里有意思的是在官方文档中，是用的无限（<strong>infinite</strong>）这个形容词。</p><p>方法如下：</p><p>1、实例一个生成器</p><pre><code class="python">datagen = ImageDataGenerator(    featurewise_center=True,    featurewise_std_normalization=True,    rotation_range=20,    width_shift_range=0.2,    height_shift_range=0.2,    horizontal_flip=True)</code></pre><p>2、<code>.fit</code>方法</p><p>该方法用来计算各种操作的统计信息。</p><p>在笔者看来是类似于生成随机数，我们要生成一个seed</p><p><code>datagen.fit(x_train)</code></p><p>3、 <code>.flow</code>方法</p><p>该方法用来生成无限的图片</p><p><code>datagen.flow(x_train, y_train, batch_size=32)</code></p><p>4、接着就可以用生成的数据进行愉快的训练啦</p><p>对于这些实时产生的数据，我们可以调用<strong>fit_generator</strong>接口，实时的利用这些数据进行训练我们的模型</p><pre><code class="python">fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_q_size=10, workers=1, pickle_safe=False, initial_epoch=0)</code></pre><p>利用的Python的生成器，逐个生成数据的批次并进行训练。生成器与模型将并行执行以提高效率。例如，该函数允许我们在CPU上进行实时的数据提升，同时在GPU上进行模型训练</p><p>函数的参数是：</p><ul><li><p>发电机：生成器函数，生成器的输出应该为：</p></li><li><ul><li>一个形如（输入，目标）的元组</li><li>一个形如（inputs，targets，sample_weight）的元组。所有的返回值都应该包含相同数目的样本。生成器将无限在数据集上循环。每个<strong>epoch</strong>以经过模型的样本数达到<strong>samples_per_epoch</strong>时，记一个<strong>epoch</strong>结束</li></ul></li><li><p><strong>steps_per_epoch</strong>：整数，生成当器报道查看<strong>steps_per_epoch</strong>次数据时计一个历元结束，执行下一个历元</p></li><li><p><strong>epochs</strong>：整数，数据迭代的轮数</p></li><li><p><strong>verbose</strong>：日志显示，0为不在标准输出流输出日志信息，1为输出进度条记录，2为每个历元输出一行记录</p></li><li><p><strong>validation_data</strong>：具有以下三种形式之一</p></li><li><ul><li>生成验证集的生成器</li><li>一个形如（输入，目标）的元组</li><li>一个形如（输入，目标，<strong>sample_weights</strong>）的元组</li></ul></li><li><p><strong>validation_steps</strong>：当<strong>validation_data</strong>为生成器时，本参数指定验证集的生成器返回次数</p></li><li><p><strong>class_weight</strong>：规定类别权重的字典，将类别映射为权重，常用于处理样本不均衡问题。</p></li><li><p><strong>sample_weight</strong>：权值的<strong>numpy</strong>数组，用于在训练时调整损失函数（仅用于训练）。可以传递一个1D的与样本等长的向量用于对样本进行1对1的加权，或者在面对时序数据时，传递一个的形式为（样本，<strong>sequence_length</strong>）的矩阵来为每个时间步上的样本赋不同的权。这种情况下请确定在编译模型时添加了<strong>sample_weight_mode=’temporal’。</strong></p></li><li><p><strong>wokers</strong>：最大进程数</p></li><li><p><strong>max_q_size</strong>：生成器队列的最大容量</p></li><li><p><strong>pickle_safe</strong>：若为真，则使用基于进程的线程。由于该实现依赖多进程，不能传递<strong>non picklable</strong>（无法被pickle序列化）的参数到生成器中，因为无法轻易将它们传入子进程中。</p></li><li><p><strong>initial_epoch</strong>：从该参数指定的<strong>epoch</strong>开始训练，在继续之前的训练时有用。</p></li></ul><p>同样的，我们有<strong>evaluate_generator</strong></p><pre><code class="python">evaluate_generator(self, generator, steps, max_q_size=10, workers=1, pickle_safe=False)</code></pre><p>本函数使用一个生成器作为数据源评估模型，器生成应报道查看与test_on_batch的输入侧数据相同类型的数据。函数该参数的与fit_generator同名参数含义相同，步骤是生成器要返回数据的轮数。</p><p>同样的，我们有<strong>predict_generator</strong></p><pre><code class="python">predict_generator(self, generator, steps, max_q_size=10, workers=1, pickle_safe=False, verbose=0)</code></pre><p>本函数使用一个生成器作为数据源预测模型，器生成应报道查看与<strong>test_on_batch</strong>的输入侧数据相同类型的数据。函数该参数的与<strong>fit_generator</strong>同名参数含义相同，步骤是生成器要返回数据的轮数。</p><p>5、我们也有另外一种训练模型的方法：</p><pre><code class="python">for e in range(epochs):print(&#39;Epoch&#39;, e)batches = 0for x_batch, y_batch in datagen.flow(x_train, y_train, batch_size=32):loss = model.fit(x_batch, y_batch)batches += 1if batches &gt;= len(x_train) / 32:# we need to break the loop by hand because# the generator loops indefinitelybreak</code></pre>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>keras</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>苟有恒，何必三更睡五更起。最无益，莫过一日曝十日寒</title>
    <link href="/2018/09/02/%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    <url>/2018/09/02/%E6%AD%A3%E8%83%BD%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>#看到的好的句子就记下来激励自己</p>]]></content>
    
    
    <categories>
      
      <category>警句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>警句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql笔记</title>
    <link href="/2018/09/02/mysql%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/09/02/mysql%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql学习笔记"><a href="#mysql学习笔记" class="headerlink" title="mysql学习笔记"></a>mysql学习笔记</h1><h1 id="sql的分类"><a href="#sql的分类" class="headerlink" title="sql的分类"></a>sql的分类</h1><ul><li>数据查询语言（dql ：data query language）<ul><li>代表关键字：select</li></ul></li><li>数据操作语言（dml：data manipulation language）<ul><li>代表关键字：insert，delete，update</li></ul></li><li>数据定义语言（ddl：data definition language）<ul><li>代表关键字：create，drop，alter</li></ul></li><li>事物控制语言（tcl：transactional control language）<ul><li>代表关键字：commit，rollback</li></ul></li><li>数据控制语言（dcl：data control language）<ul><li>代表关键字：grant，revoke</li></ul></li></ul><pre><code class="mysql">#创建数据库create database fliename；#选择数据库use database_name#查询当前数据库select database();#查询数据版本select version();#终止当前语句\c#退出mysql\q,QUIT，EXIT#显示命令show databasesshow tablesdesc tabele_name#查看怎么创建的某个表show create table 【name】</code></pre><h1 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h1><pre><code class="mysql">#无所谓大小写select 【字段，字段，字段】 from 表#条件查询select 【 】 from  表 where 表达式找出工作岗位是manger和工作岗位是salesman的员工######################################select     ename，jobfrom     empwhere    job= &#39;manger&#39; or job=&#39;salesman&#39;；等同于select     ename,jobfrom    empwhere    job in (&#39;manger&#39;,&#39;salesman&#39;)；######################################3like 用法： 其中%代表0～n个字符  _代表一个任意字符select ename from emp where ename like &#39;%o%&#39;  模糊查询###################################################</code></pre><h1 id="升序排列，降序排列"><a href="#升序排列，降序排列" class="headerlink" title="升序排列，降序排列"></a>升序排列，降序排列</h1><pre><code class="mysql">select ename，sal from emp order by sal asc；#升序排列select ename，sal from emp order by sal desc；#降序排列</code></pre><h1 id="数据处理函数-单行处理函数"><a href="#数据处理函数-单行处理函数" class="headerlink" title="数据处理函数/单行处理函数"></a>数据处理函数/单行处理函数</h1><table><thead><tr><th>Lower</th><th>转换成小写</th></tr></thead><tbody><tr><td>upper</td><td>转换成大写</td></tr><tr><td>substr</td><td>取子字符串（substr（被截取的字符串，起始下标，截取的长度））</td></tr><tr><td>length</td><td>去长度</td></tr><tr><td>trim</td><td>去空格</td></tr><tr><td>str_to_date</td><td>将字符串转换成日期</td></tr><tr><td>date_format</td><td>格式化日期</td></tr><tr><td>format</td><td>设置千分位</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>rand()</td><td>生成随机数</td></tr><tr><td>ifnull</td><td>可以将null转换成一个具体值</td></tr></tbody></table><h1 id="关于mysql中的日期处理"><a href="#关于mysql中的日期处理" class="headerlink" title="关于mysql中的日期处理"></a>关于mysql中的日期处理</h1><ul><li><p>每一个数据库处理日期的时候，采用的机制是不同的，日期处理都有自己的一套机制。所以在实际的开发中，表中的字段定义为DATA类型，这种情况很少。因为一旦使用日期类型，那么java程序将不能够通用那么在实际开发中，一般会使用”日期字符串“来表示日期</p></li><li><p>日期是数据库本身的特色，也是数据库本身机制中的一个重要的内容，所以还是需要掌握</p></li><li><p>MYSQL数据库管理系统中对日期提供了两个重要的函数：</p><p>-str_to_date</p><p>-date_format</p></li><li><p>str_to_date</p><p>该函数的作用是：将”日期字符串“转换成”日期类型“数据。【varchar—&gt;date】</p><p>该函数的执行结果是date类型</p><p>该函数的使用格式：</p><p>​               str_to_date(‘日期类型’,’日期格式’)</p><p>关于MYSQL中的日期格式：</p><pre><code>    回顾java中的日期格式：</code></pre><p>​            yyyy        年</p><p>​            MM        月</p><p>​            dd        日</p><p>​            HH        时</p><p>​            mm        分</p><p>​            ss        秒</p><p>​            SSS        毫秒</p><p>java中将字符串转换成日期类型：</p><p>​    </p><pre><code class="java">SimpleDateFormat sdf = new SimpleDateFormat（&quot;yyyy-MM-dd&quot;）Date date = sdf.parse(&quot;1970-10-10&quot;)</code></pre><p>MYSQL的日期格式：</p><p>|  %Y  | 年   |<br>| :–: | —- |<br>|  %m  | 月   |<br>|  %d  | 日   |<br>|  %H  | 时   |<br>|  %i  | 分   |<br>|  %s  | 秒   |</p></li><li><p>案例：查询出1980-12-17入职的员工</p><pre><code class="mysql">select ename from hirdate from emp where hirdate=&#39;1980-12-17&#39;#mysql默认的日期格式：%Y-%m-%d，以上的日期字符串&#39;1980-12-17&#39;正好和默认的日期格式一致，存在了自动类型转换，自动将日期字符串转换了日期类型，所以以上查询可以查询出结果。#如果写下面语句则会报错select ename from hirdate from emp where hirdate=&#39;12-17-1980&#39;#想要纠正错误可以改成以下语句select ename from hirdate from emp where hirdate=str_to_date(&#39;12-17-1980&#39;,&#39;%m-%d-%Y&#39;)</code></pre></li><li><p>date_format </p><ul><li><p>该函数的作用是：将日期类型date转换成具有特定格式的日期字符串varchar</p></li><li><p>该函数的运算结果是：varchar类型【具备特定格式的】</p></li><li><p>该函数的语法的格式：</p><p>​    date_format(日期类型数据，’日期格式’)</p></li><li><p>多用于查询操作</p></li></ul></li></ul><h1 id="分组函数-聚合函数-多行处理函数"><a href="#分组函数-聚合函数-多行处理函数" class="headerlink" title="分组函数/聚合函数/多行处理函数"></a>分组函数/聚合函数/多行处理函数</h1><table><thead><tr><th>count</th><th>取得记录数</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>取平均</td></tr><tr><td>max</td><td>取最大的数</td></tr><tr><td>min</td><td>取最小的数</td></tr></tbody></table><p>以上函数自动忽略空值，分组函数不能使用在where语句中</p><h1 id="去除重复内容"><a href="#去除重复内容" class="headerlink" title="去除重复内容"></a>去除重复内容</h1><p>distinct只能放在记录最前面</p><pre><code class="mysql">select distinct job from emp；select distinct deptno，job from emp；#将两个字段同时来看</code></pre><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><ul><li><p>group by </p><ul><li><p>group by 【表示通过哪个或者哪些字段进行排序】</p></li><li><p>案例：找出每个工作岗位的最高薪水</p></li><li><p><code>`</code>mysql<br>#先按照工作岗位分组，使用max函数求每一组的最大值<br>select max(sal) from emp group by job<br>#其中 emp group by job 是一个整体<br>#表示先按照job分组，然后对每一组使用max（sal）求最高薪水</p></li></ul></li></ul><pre><code>#在这里有个坑select ename,job,max(sal) from emp group by job#在低版本的mysql中这个语句是可以执行的但是执行结果没有意义，这是由于语法在这方面比较松散，不严格。因为ename这个字段根本不是分组字段所以是不能放在select后面的。在其他数据库中比如oracle中时会报错的#重点：若一条DQL语句中有group by 子句，那么select关键字后面只能跟参与分组的字段和分组函数```</code></pre><ul><li><p>having</p><ul><li><p>having和where功能相同都是为了完成数据的过滤</p></li><li><p>where和having后面都是添加条件</p></li><li><p>where在group by之前完成过滤</p></li><li><p>having在group 后面完成过滤</p></li><li><p>案例：找出每个工作岗位的平均薪水，要求显示平均薪水大于1500</p></li><li><pre><code class="mysql">select job,avg(sal) from emp group by job having avg(sal)&gt;1500</code></pre></li><li><p>原则：</p><ul><li>尽量在where中过滤，无法过滤的数据，通常都是需要先分组之后再过滤的，这个时候可以选择使用having。</li></ul></li></ul></li><li><p>一个完整的DQL语句的总结：</p><p>select </p><p>​    ×××××</p><p>from</p><p>​    ×××××</p><p>where</p><p>​    ×××××</p><p>group</p><p>​    ×××××</p><p>having</p><p>​    ×××××</p><p>order by</p><p>​    ×××××</p><p>第一：以上的关键字顺序不能变，严格遵守</p><p>第二：执行顺序：</p><p>​    1、from                从某张表中检查数据</p><p>​    2、where            经过某条件进行过滤</p><p>​    3、group             然后分组</p><p>​    4、having            分组之后不满意在过滤</p><p>​    5、select            查询出来</p><p>​    6、order by            排序输出</p></li></ul><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><ul><li><p>连接查询，也可以叫跨表查询，需要关联多个表进行查询</p></li><li><p>链接查询根据出现的年代分类：</p><ul><li>sql92</li><li>sql99</li></ul></li><li><p>链接查根据链接方式可以分为：</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li><li>全连接【不讲，使用很少】</li></ul></li><li><p>当多张表进行连接查询，若没有任何条件限制，会发生什么现象？</p><p>案例1：查询每个员工所在的部门名称，要求最终显示员工名和对应的部门名。</p><ul><li><p>小知识点：在进行多表连接查询的时候，尽量给表起别名，这样效率高，可读性高。</p><pre><code class="mysql">select e.ename,d.dname from emp e,dept d;#如果不增加任何限制的话会出现笛卡尔积现象#注意：连接查询过程中虽然使用了限制条件，但是匹配的次数没有减少，还是相乘次数，只不过这一次显示的结果都是有效记录select e.ename,d.dname from emp e,dept d where e.xx = d.xx</code></pre></li></ul><p>案例2：找出每一个员工对应的工资等级，要求显示员工名，工资，工资等级</p><ul><li><pre><code class="mysql">#sql99语法中的等值连接中的非等值连接select e.ename,e.sal,s.grade from emp e 【inner】 join salgrade s on e.sal between s.local ans s.hisal#sql92语法：select e.ename,e.sal,s.grade from emp e ， salgrade s where e.sal between s.local ans s.hisal</code></pre></li></ul><p>案例3：找出每一个员工的上级领导，要求显示员工名以及对应的领导名</p><ul><li><pre><code class="mysql">#同一张表，我们需要吧一张表看成两张表#sql99语法中内连接中的非等值连接select a.ename empname ,b.ename leadername from emp a 【inner】join emp b on a.mgr = b.empno;</code></pre></li></ul><p>案例4：找出每一个员工对应的部门名称，要求部门名称全部显示</p><ul><li><pre><code class="mysql">#内连接：#    a表和b表能够完全匹配的记录查询出来，就被称为内连接#外连接：#    a表和b表能够完全匹配的记录查询出来之外，将其中一张表的记录无条件的      完全查询出来，对方表没有匹配的记录，会自动模拟出null与之匹配，这种     查询被称为外链接。    外连接查询的结果条数&gt;=内连接的查询结果条数#sql99语法：外连接中的右外连接【右连接】select e.ename,d.dname from emp e right 【outer】 join dept d on e.deptno = deptno; #outer可以省略#sql99语法：外连接中的左外连接【左连接】select e.ename,d.dname from dept d left 【outer】 join emp e on e.deptno = deptno; #outer可以省略#上面两种写法是相同的，任何一个右外连接都可以写成左外连接，反之同样成立</code></pre><p>为什么inner和outer可以省略，加上去有什么好处？</p><ul><li>可以省略，因为区分内连接和外连接依靠的不是这些关键字，而是看sql             语句中是否存在right和left，若存在，表示一定是一个外连接，其他的都是内连接<ul><li>加上去的好处是增强可读性</li></ul></li></ul></li></ul></li></ul><p>  多张表进行表连接的语法格式：</p><p>  select   xxx  from  a </p><p>  join </p><p>  ​    b</p><p>  on</p><p>  ​    条件</p><p>  join</p><p>  ​    c</p><p>  on</p><p>  ​    条件；</p><p>  原理：</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>1、什么是子查询？</p><ul><li>select语句嵌套select语句</li></ul><p>2、子查询可以出现在哪而？</p><ul><li><p>select…(select)</p><p>from…(select)</p><p>where..(select)</p></li></ul><p>3、where后面添加select子查询</p><p>案例：找出薪水比公司平均薪水高的员工，要求显示员工名和薪水。</p><ul><li><pre><code class="mysql">select ename，sal from emp where sal &gt; avg(sal)#以上语句执行报错，分组函数不能直接使用在where后面#正确做法#第一步：找出公司的平均薪水#第二部：找出薪水大于平均薪水的员工信息select ename,sal from emp where sal &gt; (select avg(sal) from emp)</code></pre></li></ul><p>4、from后面使用子查询</p><p>案例：找出每个部门的平均薪水，并且要求显示平均薪水的薪水等级。</p><p>第一步：找出每个部门的平均薪水</p><pre><code class="mysql">select deptno, avg(sal) as avgsal from emp group by deptno;</code></pre><p>第二步：将上面的临时查询结果当做临时表t，t表进行表连接，条件：t.avg(sal) between s.local and s.hisal</p><pre><code class="mysql">select     t.deptno,t.avgsal,s.grade from     (select deptno, avg(sal) as avgsal from emp group by deptno) tjoin    salgrade s on     t.avgsal between s.local and s.hisal;</code></pre><p>5、在select后面使用子查询【了解】</p><pre><code class="mysql">select e.ename,(select d.dname from dept d where e,deptno = d.deptno) as dname from emp e;</code></pre><h1 id="union"><a href="#union" class="headerlink" title="union"></a>union</h1><p>union可以合并集合（相加）</p><pre><code class="mysql">select    ename,job from emp where job = &quot;manager&quot;unionselect  ename,job from emp where job = &quot;salesman&quot;#等同于以下写法select ename,job from emp where job in [&quot;manager&quot;,&quot;salesman&quot;]</code></pre><h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><ul><li>limit用来获取一张表中的某部分数据</li><li>limit只有在mysql数据库中存在，不通用，是mysql数据库管理系统的特色</li></ul><pre><code class="mysql">#案例1：找出员工表中前5条记录select ename from emp limit 5；#以上的sql语句的“limit 5”中的5表示从表中记录下标0开始，取5条等同于下面的sql语句select ename from emp limit 0,5；#limit的使用语法格式：limit起始下标没有指定，默认从0开始，0表示表中第一条记录。#案例2：找出公司中工资排名在前5名的员工select ename,sal from emp order by sal desc limit 5;</code></pre><ul><li>mysql中通用的分页sql语句：</li></ul><pre><code class="mysql">#每页显示3条记录每页显示3条记录第1页：0,3第2页：3,3第3页：6,3第4页：9,3.。。。。每页显示pagesize条记录第pageNo页：（pageNo-1）×pagesize，pageSizeselect ename,sal from emp order by sal desc limit （（pageNo-1）×pagesize，pageSize）;</code></pre><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><ul><li><p>创建表</p><ul><li>表格（table），用来存储数据，表格是一种结构化文件。</li><li>表格行被称为记录（表中的数据），表格列被称为字段。</li><li>表格的字段属性包括：字段名称、字段数据类型、字段长度、字段约束</li></ul></li><li><pre><code class="mysql">create table tableName（    columnName dataType(length),    columnName dataType(length)）;set character_set_results=&#39;gbk&#39;;</code></pre></li><li><p>关于mysql数据库中的数据类型？</p><ul><li>varchar        可变长度字符串<ul><li>空间效率高，时间效率低</li></ul></li><li>char                定长字符串<ul><li>时间效率高，但是空间效率不一定会高</li></ul></li><li>int                   整数型<ul><li>int(3)表示最大可以存储999</li></ul></li><li>bigint              长整形<ul><li>对应的java程序中的lon类型</li></ul></li><li>float                浮点型单精度</li><li>double            浮点型双精度<ul><li>double（7,2）表示7个有效数字，2个小数位</li></ul></li><li>date                日期类型<ul><li>在实际来发中为了通用，所以日期类型一般不适用，采用字符串代替日期类型比较多</li></ul></li><li>blob                 Binary Largre Object二进制大对象<ul><li>专门存储图片声音视频等数据</li><li>数据库表中存储一个图片是很常见的，但是存储一个比较大的视频是很少见的，一般都是提供一个视频的链接地址</li></ul></li><li>clob                  character Large Object字符大对象<ul><li>可以存储比较大的文本，4G+的字符串可以存储</li></ul></li><li>其他</li></ul></li></ul><h1 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h1><ul><li>向表格插入数据必须是使用insert语句，这属于dml语句</li><li>dml语句包括：insert，update，delete、</li><li>insert语句的语法格式：<ul><li>insert into tablename （columnname1，columnname2，columnname3）values（value1，value2，value3）</li></ul></li><li>字段和值必须一一对应，个数必须相同，数据类型必须一致。</li></ul><h1 id="关于sql脚本"><a href="#关于sql脚本" class="headerlink" title="关于sql脚本"></a>关于sql脚本</h1><ul><li>该文件是一个普通的文本文件，后缀名.sql，被称为sql脚本</li><li>在sql脚本中有大量的sql语句，想批量的执行sql语句，可以将这些sql语句写入sql脚本文件中，直接使用source执行这个脚本，可以执行大量的sql语句</li><li></li></ul><h1 id="增删改表结构-不是很重要-（DDL）"><a href="#增删改表结构-不是很重要-（DDL）" class="headerlink" title="增删改表结构(不是很重要)（DDL）"></a>增删改表结构(不是很重要)（DDL）</h1><pre><code class="mysql">#如需求改变，需要向t_studnts中加联系电话字段，字段名称为：contact_tel 类型为varchar（40）#增alter table t_student add contact_tel varchar(40)#将长度改为20#改alter table t_student modify tel varchar(20)#删alter table t_student drop tel</code></pre><h1 id="增删改表中的数据【insert、update、delete】"><a href="#增删改表中的数据【insert、update、delete】" class="headerlink" title="增删改表中的数据【insert、update、delete】"></a>增删改表中的数据【insert、update、delete】</h1><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><ul><li><p>update语句的语法格式：</p><ul><li>update tablename set 字段名 = 字段值，字段名 = 字段值，where 条件；</li></ul></li><li><p>注意：update语句没有条件，会将一张表中所有的数据全部更新</p></li><li><pre><code class="mysql">#将no=3的记录name修改为zhangsan，email修改为zhangsan@bjpowernode.comupdate t_student set name=&#39;zhangsan&#39;,email =&#39;zhangsan@bjpowernode.com&#39; where no = 3;#将所有的name都修改为lisiupdate t_student set name = &#39;lisi&#39;;#将emp_bak中的所有的名字中含有o的员工名修改为zhangsanupdate emp_bak set ename = &#39;zhangsan&#39; where ename like &#39;%o%&#39;;#将emp_bak表中所有工作岗位是manager和salesman的员工工资上调10%update emp_bak set sal=sal*1.1 where job = &#39;manager&#39; or job = &#39;salesman&#39;</code></pre></li></ul><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul><li><p>delete 语句的语法格式：</p><ul><li>delete from tablename where 条件</li></ul></li><li><p>注意：若没有条件限制，会将这种表中所有的记录全部删除</p></li><li><pre><code class="mysql">#删除学号=3的学生delete from t_student where no = 3#删除所有记录delete from t_student</code></pre></li></ul><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul><li><p>什么是约束，为什么要使用约束？</p><ul><li>约束对应的英语单词：constraint</li><li>约束实际上就是表中数据的限制条件</li><li>表在设计的时候加入约束的目的就是为了保证表中的记录完整和有效 </li></ul></li><li><p>约束包括哪些？</p><ul><li>非空约束            not null</li><li>唯一性约束             unique</li><li>主键约束                 primary key 简称PK</li><li>外键约束                 foreign key   简称FK</li><li>检查约束【目前mysql不支持，oracle支持】      </li></ul></li><li><p>非空约束</p><ul><li><p>not null约束的字段，不能为NULL值，必须给定具体的数据</p></li><li><p>创建表，给字段添加非空约束【创建用户表，用户名不能为空】</p></li><li><pre><code class="mysql">create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128));</code></pre></li></ul></li><li><p>唯一性约束</p><ul><li><p>unique约束的字段具有唯一性，不可重复</p></li><li><pre><code class="mysql">#创建用户，保证邮箱地址唯一#列级约束create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) unique);#表级约束create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    unique（email）);#注意，使用表级约束给多个字段联合添加约束【以下程序表示name和email两个字段联合唯一】create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    unique（name,email）);#表级约束还可以给约束起名字#为什么要起名字，因为以后可以通过这个名字删除这个约束drop table if exist t_user;create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    constraint t_user_email_unique unique（name,email）);#查询约束名字use information_schema;show tables;#其中有个表叫table_constraint的表专门用来存储约束信息的select constraint_name from table_constraints where table_name=&#39;t_user&#39;;</code></pre></li></ul></li><li><p>主键约束-primary key 简称PK</p><ul><li><p>主键涉及到的术语：</p><ul><li>主键约束</li><li>主键字段</li><li>主键值</li></ul></li><li><p>以上的主键约束、主键字段、主键值的关系？</p><ul><li>表中的某个字段添加主键约束之后，该字段被称为主键字段，主键字段中出现的每一个数据都被称为主键值。</li></ul></li><li><p>给某个字段添加主键约束primary key后，该字段不能重复，并且也不能为空。效果和not null unique相同，但是本质不同，主键约束除了可以做到not null unique之外，主键字段还会默认添加“索引-index”</p></li><li><p>一张表应该有主键字段，若没有，表示这张表是无效的。“主键值”是当前行数据的唯一标识。“主键值”是当前行数据的身份证号。即使表中的两行记录相关的数据是相同的，但是由于主键值不同，我们认为这是两行完全不同的数据。</p></li><li><p>给一个字段添加主键约束，被称为单一主键。</p></li><li><pre><code class="mysql"> #单一主键 #列表定义方式   drop table if exist t_user;   create table t_user(      id int(10) primary key,    name varchar(32)   )   #单一主键   #列表定义方式   drop table if exist t_user;   create table t_user(     id int(10),    name varchar(32)，    primary key（id）   )</code></pre><pre><code></code></pre></li><li></li><li><p>给多个字段联合添加一个主键约束，被称为复合主键。</p></li><li><p>无论是单一主键还是复合主键，一张表主键约束只能有一个</p></li><li><p>主键根据性质分类：</p><ul><li>自然主键<ul><li>主键值若是一个自然数，这个自然数和当前表的业务没有任何关系，这种主键叫做自然主键 。</li></ul></li><li>业务主键<ul><li>主键值若和当前表中业务紧密相关的，那么这种主键值被称为业务主键，当业务数据发生改变的时候，主键值通常会受到影响，所以业务主键使用较少。大部分都是使用自然主键。</li></ul></li></ul></li><li><p>在mysql数据库管理系统中提供了一个自增的数字，专门用来自动生成主键值。主键值不需要用户维护，也不需要用户提供了，自动生成的。这个自增的数字默认从1开始，以1递增：1、 2、 3、 …….</p><ul><li><pre><code class="mysql">drop table if exist t_uesr;create table t_user(    id int(10) primary key auto_increment,    name varchar(32))</code></pre><code>`</code></li></ul><p><code>`</code></p></li></ul></li><li><p>外键约束 foreign key 简称FK</p><ul><li><p>外键涉及到的术语</p><ul><li>外键约束</li><li>外键字段</li><li>外键值</li></ul></li><li><p>外键约束、外键字段、外键值之间的关系？</p><ul><li>某个字段添加外键约束之后，该字段称为外键字段，外键字段中的每一个数据都是外键值。</li></ul></li><li><p>外键也分为：单一外键和复合外键（联合多个字段添加一个外键）</p></li><li><p>一张表中可以有多个外键字段。</p></li><li><p>分析场景：</p><p>请设计数据库用来存储学生和班级信息，给出两种解决方案：</p><p>学生信息和班级信息之间的关系，一个班级对应多个学生，这是典型的一对多的关系。</p><p>第一种设计方案：将学生信息和班级信息存储到一张表中。</p><p>学生信息表t_student</p><p>sno(pk)             sname               classno                     cname</p><hr><p>1                         jack                   100                            实验中学1班</p><p>2                         allen                 200                             实验中学2班</p><p>3                         lucy                   200                            实验中学2班                     </p><p>4                         lisi                     300                            实验中学3班</p><p><u>以上设计缺点：数据冗余</u></p><p>第二种解决方案：将学生信息和班级信息分开两张表存储你，学生表 + 班级表</p><p>学生表t_student</p><p>sno(pk)             sname            classno（fk）</p><hr><p>1                         jack                   100</p><p>2                         allen                 200</p><p>3                         lucy                  200</p><p>4                         lisi                     300</p><p>班级表t_class</p><p>cno(pk)       cname</p><hr><p>100               实验中学1班</p><p>200               实验中学2班</p><p>300               实验中学3班</p><p>结论：为了保证t_student表中的classno字段中的数据必须来自于t_class表中cno字段中的数据，有必要给t_student表中的classno字段添加外键约束，classno字段被称为外键字段，该字段中的100、 200、 300、被称为外键值。classno这里是一个单一外键字段</p><p>注：外键值可以为null。</p><p>注：外键字段去引用一张表的某一个字段的时候，被引用的字段必须具有unique约束。</p><p>注：有了外键引用之后，表分为父表和子表，以上父表是：班级表，子表是：学生表。创建表先创建父表，在创建子表，删除数据的时候，先删除子表中的数据，后删除父表中的数据。插入数据的时候先插入父表中的数据，再插入子表中的数据</p><pre><code class="mysql">insert into t_student(sno,sname,classno) value(1,&#39;&#39;,100);insert into t_student(sno,sname,classno) value(1,&#39;&#39;,100);drop table if exists t_student;drop table if exists t_class;create table t_class(    cno int(3) primary key,    cname varchar(128) not null unique);create table t_students(    sno int(3) primary key,    sname varchar(32) not null,    classno int(3),    constraint t_student_classno_fk foreign key(classno) reference t_class(cno));insert into t_class(cno,cname) value(100,&#39;高三一班&#39;)；insert into t_class(cno,cname) value(200,&#39;高三二班&#39;)；insert into t_class(cno,cname) value(300,&#39;高三三班&#39;)；insert into t_student(sno,sname,classno) value(1,&#39;jack&#39;,100);insert into t_student(sno,sname,classno) value(2,&#39;tom&#39;,100);insert into t_student(sno,sname,classno) value(3,&#39;lucy&#39;,200);insert into t_student(sno,sname,classno) value(4,&#39;king&#39;,200);insert into t_student(sno,sname,classno) value(5,&#39;wang&#39;,300);insert into t_student(sno,sname,classno) value(6,&#39;lisi&#39;,300);select * from t_studengt;select * from t_class;</code></pre><p>重点：典型的一对多的设计模式，在多的一方加外键。</p></li></ul></li></ul><h1 id="级联更新和经联删除"><a href="#级联更新和经联删除" class="headerlink" title="级联更新和经联删除"></a>级联更新和经联删除</h1><ul><li>添加级联更新和级联删除的时候需要在外键约束后面添加</li><li>在删除父表中的数据时，级联删除子表中的数据 on delete cascade<ul><li>删除外键约束<ul><li>alter table t_student drop foreign key fk_name;</li></ul></li><li>添加外键约束<ul><li>alter table t_student add constraint   fk_name foreign key (classno) references t_class(cno) on delete cascade</li></ul></li></ul></li><li>在更新父表中的数据时，级联更新子表中的数据 on update cascade<ul><li>删除外键约束<ul><li>alter table t_student drop foreign key fk_name;</li></ul></li><li>添加外键约束<ul><li>alter table t_student add constraint   fk_name foreign key (classno) references t_class(cno) on update cascade</li></ul></li></ul></li><li>以上的级联更新和级联删除谨慎使用，因为级联操作会将数据改变或者删除【数据无价】</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

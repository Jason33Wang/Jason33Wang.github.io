<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>blog自定义教程</title>
    <link href="/2020/03/30/hello-world/"/>
    <url>/2020/03/30/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h1><p>ssh-keygen -t rsa -C <a href="mailto:&#39;862722353@qq.com" target="_blank" rel="noopener">&#39;862722353@qq.com</a>‘   #将公钥拷贝到远程端</p><p>ssh  -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>   #测试连接</p><p>hexo s 本地查看</p><p>hexo g</p><p>hexo d</p><h1 id="建立标签页"><a href="#建立标签页" class="headerlink" title="建立标签页"></a>建立标签页</h1><p>hexo n page tags</p><p>index文件 加入</p><p>type： “tags”</p><h1 id="启用社交"><a href="#启用社交" class="headerlink" title="启用社交"></a>启用社交</h1><p>主题配置文件搜索social</p><h1 id="加新文章"><a href="#加新文章" class="headerlink" title="加新文章"></a>加新文章</h1><p>hexo n  名字</p><h1 id="加入打赏"><a href="#加入打赏" class="headerlink" title="加入打赏"></a>加入打赏</h1><p>主题配置文件搜索reward</p><h1 id="计入公众号"><a href="#计入公众号" class="headerlink" title="计入公众号"></a>计入公众号</h1><p>主题配置文件搜索wechat</p><h1 id="圆头像"><a href="#圆头像" class="headerlink" title="圆头像"></a>圆头像</h1><p>/themes/next/source/css/_common/components/sidebar目录下</p><p>sidebar-author.style</p><pre><code class="css">.site-author-image {  display: block;  margin: 0 auto;  padding: $site-author-image-padding;  max-width: $site-author-image-width;  height: $site-author-image-height;  border: $site-author-image-border-width solid $site-author-image-border-color;  border-radius: 50%;  transition: 2s all;}.site-author-image:hover{  transform:rotate(360deg);}.site-author-name {  margin: $site-author-name-margin;  text-align: $site-author-name-align;  color: $site-author-name-color;  font-weight: $site-author-name-weight;}.site-description {  margin-top: $site-description-margin-top;  text-align: $site-description-align;  font-size: $site-description-font-size;  color: $site-description-color;}</code></pre><h1 id="设置阅读全文"><a href="#设置阅读全文" class="headerlink" title="设置阅读全文"></a>设置阅读全文</h1><p>主题配置文件搜索auto_excerpt</p><h1 id="添加fork-github"><a href="#添加fork-github" class="headerlink" title="添加fork github"></a>添加fork github</h1><p><a href="http://tholman.com/github-corners/网址选择想要的图形代码赋值" target="_blank" rel="noopener">http://tholman.com/github-corners/网址选择想要的图形代码赋值</a></p><p>找到blogs/themes/next/layout/_layout.swig文件</p><p>找到23行将代码复制到</p><p>headband下面</p><h1 id="修改链接样式"><a href="#修改链接样式" class="headerlink" title="修改链接样式"></a>修改链接样式</h1><p>/themes/next/source/css/_common/components/post/post.style文件</p><p>最后面加上以下语句</p><p>.post-body p a{<br>  color: #345;<br>  border-bottom: none;<br>  &amp;:hover{<br>    color: red<br>}<br>}</p><h1 id="修改文章底部的"><a href="#修改文章底部的" class="headerlink" title="修改文章底部的"></a>修改文章底部的</h1><p>/home/jason/Documents/blogs/themes/next/layout/_macro/post.swig</p><p>搜索tags</p><p>找到#位置添加</p><p><i class="fa fa-google"></i></p><h1 id="添加评论系统valine"><a href="#添加评论系统valine" class="headerlink" title="添加评论系统valine"></a>添加评论系统valine</h1><p>主题配置文件搜索valine</p><p>注册learncloud</p><h1 id="添加搜索"><a href="#添加搜索" class="headerlink" title="添加搜索"></a>添加搜索</h1><p>next官网教程</p><h1 id="添加不蒜子统计"><a href="#添加不蒜子统计" class="headerlink" title="添加不蒜子统计"></a>添加不蒜子统计</h1><p>next官网教程</p><h1 id="添加加载"><a href="#添加加载" class="headerlink" title="添加加载"></a>添加加载</h1><p>主题配置文件</p><p>搜索pace</p><h1 id="添加点击特效"><a href="#添加点击特效" class="headerlink" title="添加点击特效"></a>添加点击特效</h1><h1 id="去除下面强力驱动"><a href="#去除下面强力驱动" class="headerlink" title="去除下面强力驱动"></a>去除下面强力驱动</h1><p>/themes/next/layout/_partials/footer.swig文件</p><p>修改</p><!--–&gt;<h1 id="统计字数阅读时长"><a href="#统计字数阅读时长" class="headerlink" title="统计字数阅读时长"></a>统计字数阅读时长</h1><p>sudo npm install hexo-wordcount –save</p><p>主题配置文件</p><p>搜索post——wordcount</p>-->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Trojan配置</title>
    <link href="/2020/03/26/Trojan%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/03/26/Trojan%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<hr><p>cloudFlare</p><p>namesilo</p>]]></content>
    
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记5</title>
    <link href="/2020/02/05/django%E7%AC%94%E8%AE%B05/"/>
    <url>/2020/02/05/django%E7%AC%94%E8%AE%B05/</url>
    
    <content type="html"><![CDATA[<h1 id="Djang高级扩展"><a href="#Djang高级扩展" class="headerlink" title="Djang高级扩展"></a>Djang高级扩展</h1><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>包括：css、js、图片、json文件、字体文件等</p><p>配置setting.py文件</p><pre><code class="python">STATICFILES_DIRS=[    os.path.join(BASE_DIR,&#39;static&#39;)]</code></pre><p>或者静态引用</p><pre><code class="html">{% load static from staticfiles %}&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;index&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/myApp/css/style.css&quot;/&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;/static/myApp/js/hello.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;jason is a good man&lt;/h1&gt;    &lt;img src=&quot;/static/myApp/img/2.png&quot;&gt;    &lt;img src=&quot;{% static 'myApp/img/2.png'%}&quot;/&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p><strong>概述</strong></p><p>一个轻量级、底层的插件、可以介入Django的请求和响应</p><p><strong>本质</strong></p><p>一个python类</p><p><strong>方法</strong></p><ul><li><p><code>__init__</code>:不需要传参数，服务器响应第一个请求的时候自动调用，用于确定是否启用该中间件</p></li><li><p><code>process_request(self,request)</code>:在执行视图之前被调用(分配url匹配视图之前)，每个请求上都会调用。返回None或者HttpResponse</p></li><li><code>process_view(self,request,view_func,view_args,view_kwarfs)</code>:调用视图之前执行，每个请求都会调用。返回None或者HttpResponse</li><li><code>process_template_response(self,request,response)</code>:在视图刚好执行完后调用，每个请求上都会调用。返回None或者HttpResponse。</li><li><code>process_response(self,request,response)</code>:所有响应返回浏览器之前调用，每个请求上都会调用。返回HttpResponse。</li><li><code>process_exception(self,request,exception)</code>:当视图跑出异常时调用，返回HttpResponse。</li><li><img src="//yoursite.com/2020/02/05/django笔记5/image-20200203223510982.png" srcset="/img/loading.gif" alt="image-20200203223510982"></li></ul><h2 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><ul><li><p>新建<code>项目/middleware/myApp</code>文件夹，在这下面自定义中间件<code>myMiddle.py</code></p></li><li><p>配置setting.py文件</p></li></ul><pre><code class="python">MIDDLEWARE = [    &#39;middleware.myApp.myMiddle.MyMiddle&#39;]</code></pre><ul><li><code>myMiddle.py</code></li></ul><pre><code class="python">from django.utils.deprecation import MiddlewareMixinclass MyMiddle(MiddlewareMixin):    def process_request(self,request):        print(&quot;get参数为:&quot;,request.GET.get(&quot;a&quot;))</code></pre><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p><strong>概述</strong></p><ul><li>文件上传时，文件数据存储在request.FILES属性中</li><li>注意：form表单要上传文件需要加属性<code>enctype=&quot;multipart/form-data&quot;</code></li><li>注意：上传必须是post请求</li></ul><p><strong>存储路径</strong></p><ul><li><p>在static目录下创建upfile目录用于存储接收上传的文件</p></li><li><p>配置setting.py文件</p></li></ul><pre><code class="python">MEDIA_ROOT = os.path.join(BASE_DIR,r&#39;static/upfile&#39;)</code></pre><p><strong>代码示例</strong></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;上传文件&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form method=&quot;post&quot; action=&quot;/savefile/&quot; enctype=&quot;multipart/form-data&quot;&gt;        {% csrf_token %}        &lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;        &lt;hr/&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="python">def upfile(request):    return render(request,&#39;myApp/upfile.html&#39;)from django.conf import settingsdef savefile(request):    if request.method==&quot;POST&quot;:        f = request.FILES[&quot;file&quot;]        # 文件在服务器端的路径        file_path=os.path.join(settings.MEDIA_ROOT,f.name)        with open(file_path,&#39;wb&#39;) as fp:            for info in f.chunks():                fp.write(info)        return HttpResponse(&quot;上传成功&quot;)    else:        return HttpResponse(&quot;上传失败&quot;)</code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><strong>Paginator对象</strong></p><ul><li>创建对象<ul><li>格式：<code>Paginator(列表，整数)</code></li><li>返回值：返回一个分页对象</li></ul></li><li>属性<ul><li>count：对象总数</li><li>num_pages：页面总数</li><li>page_range：页码列表，从1开始</li></ul></li><li>方法<ul><li><code>page(num)</code>：获得一个Page对象，如果提供的页码不存在会抛出<code>InvalidPage</code>异常</li></ul></li><li>异常<ul><li><code>InvalidPage</code>：当向page()传递的是一个无效的页码时抛出的异常</li><li><code>PageNotInteger</code>：当向page()传递的不是一个整数时抛出</li><li><code>EmptyPage</code>：当向page()传递一个有效值，但是该页面没有数据时抛出</li></ul></li></ul><p><strong>page对象</strong></p><ul><li>创建对象<ul><li>Paginator对象的page()方法返回得到Page对象，不需要手动创建</li></ul></li><li>属性<ul><li><code>Object_list</code>：当前页上所有的数据（对象）列表</li><li><code>nnumber</code>：当前页的页码值</li><li><code>paginator</code>:当前page对象关联的Paginator对象</li></ul></li><li>方法<ul><li><code>has_next()</code>：判断是否有下一页，如果有返回True</li><li><code>has_previous()</code>：判断是否有上一页，如果有返回True</li><li><code>has_other_pages()</code>：判断是否有其他页（上一页或者下一页），如果有返回True</li><li><code>next_page_number()</code>：返回下一页的页码，如果下一页不存在抛出<code>InvalidPage</code>异常</li><li><code>previous_page_number()</code>：返回上一页的页码，如果上一页不存在抛出<code>InvalidPage</code>异常</li><li><code>len</code>：放回当前页的数据对象个数</li></ul></li></ul><p><strong>代码示例</strong></p><pre><code class="python"># 分页from django.core.paginator import Paginatordef studentpage(request,pageid):    allList = Students.stuObj.all()    paginator = Paginator(allList,6)    page=paginator.page(pageid)    print(page.paginator.page_range)    retu</code></pre><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;分页显示&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        {% for stu in students%}        <li>            {{stu.sname}}--{{stu.sgrade}}        </li>        {% endfor%}    &lt;/ul&gt;    &lt;ul&gt;        {% for index in students.paginator.page_range %}        {% if index == students.number %}        <li>            <a> {{index}} </a>        </li>        {% else %}        <li>            <a href="/studentpage/{{index}}/"> {{index}} </a>        </li>        {% endif %}        {% endfor %}    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p><strong>示例</strong></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;学生信息列表&lt;/title&gt;    &lt;script src=&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;学生信息列表&lt;/h1&gt;    &lt;button id=&quot;btn&quot;&gt;显示学生信息&lt;/button&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;/static/myApp/js/stu.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="js">$(document).ready(function(){    document.getElementById(&quot;btn&quot;).onclick=    function(){        $.ajax({            type:&quot;get&quot;,            url:&quot;/studentsinfo/&quot;,            dataType:&quot;json&quot;,            success:function(data,status){                console.log(data)                var d = data[&quot;data&quot;]                for(var i =0; i&lt;d.length;i++){                document.write(&#39;&lt;p&gt;&#39;+d[i][0]+&#39;&lt;/p&gt;&#39;)}                }        })    }})</code></pre><pre><code class="python">def ajaxstudents(request):    return render(request,&quot;myApp/ajaxstudents.html&quot;)from django.http import JsonResponsedef studentsinfo(request):    stus = Students.stuObj.all()    list=[]    for stu in stus:        list.append([stu.sname,stu.sage])    return JsonResponse({&quot;data&quot;:list})</code></pre><h2 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h2><ul><li><p>安装：<code>pip install django-tinymce</code></p></li><li><p>在站点中使用</p><ul><li>配置setting.py文件。</li></ul><pre><code class="python">INSTALLED_APPS = [    &#39;tinymce&#39;]TINYMCE_DEFAULT_CONFIG={    &#39;theme&#39;:&#39;advanced&#39;,    &#39;width&#39;:600,    &#39;height&#39;:400,}</code></pre><ul><li>增加模型文件</li></ul><pre><code class="python">from tinymce.models import HTMLFieldclass Text(models.Model):    str = HTMLField</code></pre><ul><li>配置站点（admin.py文件配置）</li></ul><pre><code class="python">from .models import Textadmin.site.register(Text)</code></pre></li><li><p>在自定义视图中使用</p><ul><li>主要展示html代码</li></ul></li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;富文本&lt;/title&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;/static/tiny_mce/tiny_mce.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        tinyMCE.init({            &#39;mode&#39;: &#39;textareas&#39;,            &#39;theme&#39;:&#39;advanced&#39;,            &#39;width&#39;:800,            &#39;height&#39;:600,        })    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;form&gt;        &lt;textarea name=&quot;str&quot;&gt;jason is a good man&lt;/textarea&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="celery"><a href="#celery" class="headerlink" title="celery"></a>celery</h2><p>文档地址：<code>http://docs.jinkan.org/docs/celery/</code></p><p><strong>问题</strong></p><ul><li>用户发起request，并且要等待response返回，但是在视图中有一些耗时的操作，导致用户可能会response的返回很慢</li><li>网站每隔一段时间要同步一次数据，但是http请求是需要触发的。</li></ul><p><strong>解决</strong></p><ul><li>celery解决：<ul><li>将耗时的操作放到celery中执行</li><li>使用celery定时执行</li></ul></li></ul><p><strong>celery</strong></p><ul><li>任务task：本质是一个python函数，将耗时操作封装成一个函数</li><li>队列queue：将要执行的任务放到队列里</li><li>工人worker;负责执行队列中的任务</li><li>代理broker：负责调度，在部署环境中使用redis</li></ul><p><strong>安装</strong></p><ul><li><code>pip install celery</code></li><li><code>pip install celery-with-redis</code></li><li><code>pip install django-celery</code></li></ul><p><strong>配置settings.py</strong></p><pre><code class="python">INSTALLED_APPS = [    &#39;djcelery&#39;]#celeryimport djcelerydjcelery.setup_loader()#初始化BROKER_URL =&#39;redis://:127.0.0.1:6379/0&#39;CELERY_IMPORTS=(&#39;myApp.task&#39;)</code></pre><p><strong>在应用目录下创建task.py文件</strong></p><p><strong>迁移，生成celery需要的数据库表</strong></p><p><code>python manage.py migrate</code></p><p><strong>在工程目录下的project目录下创建celery.py的文件</strong></p><pre><code class="python">from __future__ import absolute_importimport osfrom celery import Celeryfrom django.conf import settingsos.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;,&#39;whthas_home.settings&#39;)app=Celery(&#39;portal&#39;)app.config_from_object(&#39;django.conf:settings&#39;)app.autodiscover_tasks(lambda:settings.INSTALLED_APPS)@app.task(bind=True)def debug_task(self):    print(&#39;Request:{0!r}&#39;.format(self.request))</code></pre><p><strong>在工程目录下的<code>__init__.py</code>文件添加</strong></p><pre><code class="python">import pymysqlpymysql.install_as_MySQLdb()from .celery import app as celert_app</code></pre><p><strong>在task.py文件中添加</strong></p><pre><code class="python">from celery import taskimport timefrom celery import shared_task@shared_taskdef jason():    print(&quot;jason is a good man&quot;)    time.sleep(5)    print(&quot;jason is a nice man&quot;)</code></pre><p><strong>利用delay方法执行</strong></p><pre><code class="python">from .task import jasondef celery(request):    jason.delay()    return render(request,&#39;myApp/celery.html&#39;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记4</title>
    <link href="/2020/02/05/django%E7%AC%94%E8%AE%B04/"/>
    <url>/2020/02/05/django%E7%AC%94%E8%AE%B04/</url>
    
    <content type="html"><![CDATA[<h1 id="day3-视图"><a href="#day3-视图" class="headerlink" title="day3 视图"></a>day3 视图</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><ul><li><p>作用：视图接受web请求，并响应web请求</p></li><li><p>本质：视图就是一个python函数</p></li><li><p>响应：</p></li><li><p>网页</p><ul><li>重定向</li><li>错误视图</li></ul></li><li><p>json数据</p></li><li><p>过程</p></li></ul><p><img src="//yoursite.com/2020/02/05/django笔记4/image-20200129123737853.png" srcset="/img/loading.gif" alt="image-20200129123737853"></p></blockquote><h2 id="url配置"><a href="#url配置" class="headerlink" title="url配置"></a>url配置</h2><p>配置流程</p><ul><li><p>设置根级url配置文件</p><ul><li>设置<code>setting.py</code>文件中的<code>ROOT_URLCONF</code></li><li><code>ROOT_URLCONF=Progject.urls</code></li><li>默认实现了</li></ul></li><li><p>urlpatterns</p><ul><li>一个url实例的列表 </li><li>一个url对象包括：<ul><li>正则表达式</li><li>视图名称</li><li>名称</li></ul></li></ul></li><li><p>url匹配正则的注意事项</p><ul><li>如果想要从url中获得一个值，需要对正则加小括号</li><li>匹配正则前方不需要加反斜杠</li><li>正则前需要加<code>r</code>表示字符串不转义</li></ul></li><li><p>引入其他url配置</p><ul><li><p>在应用中创建<code>urls.py</code>文件，定义本应用的url配置，在工程<code>urls.py</code>文件中使用<code>include()</code>管理项目的urls文件。这样可以方便管理该项目下不同应用之间的url管理。</p><pre><code class="python"># 在project/urls.py 文件中from django.conf.urls import url,includefrom django.contrib import adminurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),    url(r&#39;^&#39;, include(&#39;myApp.urls&#39;,namespace=&#39;myApp&#39;)),]</code></pre><pre><code class="python"># 在myApp/urls.py文件中添加from django.conf.urls import urlfrom . import viewsurlpatterns=[    url(r&#39;^$&#39;,views.index，name=&#39;index&#39;),]</code></pre></li></ul></li><li><p>url的反向解析</p><ul><li>概述：如果在视图、模板中使用了硬编码链接，在url配置发生改变时，相应的url路径都需要进行修改</li><li>解决：在使用链接时，通过url配置的名称，动态生成url地址</li><li>常使用与url模板</li></ul></li></ul><h2 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h2><ul><li><p>定义视图</p><ul><li>本质：一个函数</li><li>视图参数：<ul><li>1、<code>request</code> 一个<code>HttpRequest</code>的实例 </li><li>2、通过正则表达式获取的参数</li><li>位置：一般在<code>viwes.py</code>文件中定义（官方不建议在其他文件中定义）</li></ul></li></ul></li><li><p>错误视图</p><ul><li><p><code>404</code>视图：<code>url</code>匹配不成功时返回该错误</p><ul><li><p>可以在<code>templates</code>目录下定义<code>404.html</code></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;404 error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;找不到对应的页面&lt;/h1&gt;    &lt;h2&gt;{{request_path}&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><code>request_path</code>：导致错误的网址</li></ul></li><li><p>配置<code>setting.py</code>文件</p><pre><code class="python">DEBUG = False #等于True，永远都不会调用404界面ALLOWED_HOSTS = [&#39;*&#39;] #允许任何用户访问</code></pre></li></ul></li><li><p><code>500</code>视图：在视图代码中出现错误（服务器内部错误）</p></li><li><p><code>400</code>视图：错误出现于客户操作错误</p></li></ul></li></ul><h2 id="HttpRequest对象"><a href="#HttpRequest对象" class="headerlink" title="HttpRequest对象"></a>HttpRequest对象</h2><p><strong>概述：</strong></p><ul><li>服务器接收http请求后，会根据报文创建<code>HttpRequest</code>对象</li><li>视图的第一个参数就是<code>HttpRequest</code>对象</li><li>django创建的，之后调用视图时传递给视图</li></ul><p><strong>属性</strong></p><ul><li><code>path</code>：请求的完整路径（不包括域名和端口）</li><li><code>method</code>：表示请求的额方式，常用的有<code>GET</code>、<code>POST</code></li><li><p><code>encoding</code>：表示浏览器提交的数据编码方式，一般为<code>utf-8</code></p></li><li><p><code>GET</code>：类似字典的对象，包含打了<code>get</code>请求的所有参数</p></li><li><p><code>Post</code>：类似字典的对象，包含打了<code>post</code>请求的所有参数</p></li><li><code>FILES</code> ：类似字典的对象，包含了所有的上传的文件</li><li><code>COOKIES</code>：字典，包含所有的cookie</li><li><code>session</code>：类似字典的对象，表示当前会话</li></ul><p><strong>方法</strong></p><ul><li><code>is_ajax()</code>:如果是通过XMLHttpRequest发起的，返回True</li></ul><p><strong>QueryDict对象</strong></p><ul><li>request对象中的GET、POST都属于QueryDict对象</li><li>方法：<ul><li><code>get()</code>：根据<code>key</code>值获取<code>value</code>值</li><li><code>getlist</code>：将键的值以列表的形式返回</li></ul></li></ul><p><strong>GET属性</strong></p><p>获取浏览器传递过来给服务器的数据</p><ul><li><pre><code class="html">http://127.0.0.1:8000/get1?a=1&amp;b=2&amp;c=3</code></pre><pre><code class="python">def get1(request):    a= request.GET.get(&#39;a&#39;)    b= request.GET.get(&#39;b&#39;)    c= request.GET.get(&#39;c&#39;)    return HttpResponse(a+&quot; &quot;+b+&quot; &quot;+c)</code></pre></li></ul><ul><li><pre><code class="html">http://127.0.0.1:8000/get2?a=1&amp;a=2&amp;c=3</code></pre><pre><code class="python">def get2(request):    a= request.GET.getlist(&#39;a&#39;)    a1 =a[0]    a2 =a[2]    c= request.GET.get(&#39;c&#39;)    return HttpResponse(a1+&quot; &quot;+a2+&quot; &quot;+c)</code></pre></li></ul><p><strong>POST属性</strong></p><ul><li><p>使用表单提交post请求</p><pre><code class="python">def register(request):    name = request.POST.get(&quot;name&quot;)    gender = request.POST.get(&quot;gender&quot;)    age =  request.POST.get(&quot;age&quot;)    hobby =  request.POST.getlist(&quot;hobby&quot;)    print(name,gender,age,hobby)    return HttpResponse(&quot;注册成功&quot;)</code></pre></li></ul><h2 id="HttpResponse对象"><a href="#HttpResponse对象" class="headerlink" title="HttpResponse对象"></a>HttpResponse对象</h2><p><strong>概述</strong></p><ul><li>作用：给浏览器返回数据</li><li><code>HttpRequest</code>是有django创建的，<code>HttpResponse</code>对象是由程序员创建的</li></ul><p><strong>返回数据用法</strong></p><ul><li><p>不调用模板，直接返回数据</p></li><li><p>调用模板</p><ul><li><p>使用<code>render</code>方法</p><ul><li><p>原型：<code>render(requesr,templateName,{context})</code></p></li><li><p>作用：结合数据和模板，返回完整的HTML界面</p></li><li><p>参数</p><ul><li><code>request</code>：请求体对象</li><li><code>templateName</code>：模板路径</li><li><code>context</code>：传递给需要渲染在模板上的数据</li></ul></li><li><p>实例</p><pre><code class="python">def studentsearch(request):    #包含条件匹配    # studentsList = Students.objects.filter(sname__contains=&#39;孙&#39;)    #起始匹配    studentsList = Students.stuObj.filter(sname__startswith=&#39;j&#39;)    return render(request,&#39;myApp/students.html&#39;,{&quot;students&quot;:studentsList})</code></pre></li></ul></li></ul></li></ul><p><strong>属性</strong></p><ul><li><code>content</code>：表示返回内容</li><li><code>charset</code>：返回数据的编码格式</li><li><code>status_code</code>:响应状态编码：404,200,304</li><li><code>content-type</code>:指定输出的MIME类型</li></ul><pre><code class="python">#查看response内容def showresponse(request):    res = HttpResponse()    print(res.content)    print(res.charset)    print(res.status_code)    print(res.content-type)    return res</code></pre><p><strong>方法</strong></p><ul><li><code>init</code>：使用页面内容实例化<code>HttpResponse</code>对象</li><li><code>write(content)</code>以文件的形式写入</li><li><code>flush()</code>:以文件的形式输出缓冲区</li><li><code>set_cookie(key,value=&#39;&#39;,max_age=None,exprise=None)</code>设置cookie</li><li><code>delete_cookie(key)</code><ul><li>删除cookie</li><li>注意：如果删除一个不存在的key，就当什么都没有发生</li></ul></li></ul><p><strong>子类HttpResponseRedirect</strong></p><ul><li>功能： 重定向，服务器跳转</li></ul><pre><code class="python">from django.http import HttpResponseRedirectfrom django.shortcuts import redirectdef redirect1(request):    # return  HttpResponseRedirect(&#39;/redirect2&#39;)    return redirect(&#39;/redirect2&#39;)def redirect2(request):    return HttpResponse(&#39;我是重定向得到的视图&#39;)</code></pre><p><strong>子类JsonResponse</strong></p><ul><li>返回json数据，一般用于异步请求</li><li><code>__init__(self.data)</code></li><li>data是一个字典对象</li><li>注意： Content-type类型为application/json</li></ul><h2 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h2><ul><li><p>概述</p><ul><li><p>http协议是无状态的，每次请求都是一次新的请求，不记得以前的请求</p></li><li><p>客户端与服务器的一次通信就是一次会话</p></li><li><p>实现状态的保持，在客户端或者服务端存储相关会话的数据</p></li><li><p>存储方式</p><ul><li><code>Cookie</code>：所有的数据存储在客户端，不要存敏感的数据</li><li><code>session</code>：所有的数据存储在服务端，在客户端用<code>Cookie</code>存储<code>session_id</code></li><li>在一段时间内跟踪请求者的状态，可以实现跨页面访问当前的请求者的数据</li><li>注意：不同的请求者之间不会共享这个数据，与请求者一一对应</li></ul></li><li><p>启用<code>session</code></p><ul><li>在<code>settings.py</code>文件中</li></ul><pre><code class="python"># INSTALLED_APPS选项INSTALLED_APPS = [&#39;django.contrib.sessions&#39;]# IDDLEWARE选项MIDDLEWARE = [&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;]</code></pre></li><li><p>使用<code>session</code></p><ul><li>启用<code>session</code>后，每个<code>HttpRequest</code>对象都有一个<code>session</code>属性，就是一个类似字典的对象</li><li><code>get(key,default=None)</code>:根据键获取<code>session</code>值</li><li><code>clear()</code>:清空所有的会话</li><li><code>flush()</code>:删除当前的会话并删除会话的<code>Cookie</code></li></ul></li></ul><pre><code class="python">def main(request):    username=request.session.get(&#39;name&#39;,&quot;游客&quot;)    # print(username)    return render(request,&#39;myApp/main.html&#39;,{&#39;username&#39;:username})def login(request):    return render(request,&#39;myApp/login.html&#39;)def showmain(request):    username = request.POST.get(&#39;username&#39;)    # 存储session    print(username)    request.session[&#39;name&#39;]=username    print(request.session)    return redirect(&#39;/main&#39;)from django.contrib.auth import logoutdef quit(request):    logout(request)    # request.session.clear()    # request.session.flush()    return redirect(&#39;/main&#39;)</code></pre><ul><li><p>设置<code>session</code>过期时间</p><ul><li><code>set_expiry(value)</code></li><li>如果不设置两个星期后过期</li><li><code>value</code>为整数（表示多少秒后过期）</li></ul><pre><code class="python">request.session.set_expiry(10)</code></pre><ul><li><code>value</code>可以是一个时间对象</li><li><code>value=0</code>关闭浏览器时失效</li><li><code>value=None</code>永不过期</li></ul></li><li><p>存储session的位置</p><ul><li>数据库：默认存储数据库中<code>django.contrib.sessions.backends.db</code></li><li>缓存：只存储在本地内存中，如果丢失不能找回，比数据库快<code>django.contrib.sessions.backends.cache</code></li><li>同时缓存和数据库，优先从本地缓存中读取，读取不到再去数据库中获取：<code>django.contrib.sessions.backends.cache_db</code></li></ul></li><li><p>使用<code>redis</code>缓存<code>session</code></p><ul><li>首先要安装redis并开启redis服务</li><li><code>pip install django-redis-sessions</code></li></ul><p><code>`</code>python<br>SESSION_ENGINE=’redis_sessions.session’<br>SESSION_REDIS_HOST=’local_host’<br>SESSION_REDIS_PORT=6379<br>SESSION_REDIS_DB=0<br>SESSION_REDIS_PASSWORD=’qq123’<br>SESSION_REDIS_PREFIX=’session’</p></li></ul></li></ul><pre><code>#或者   SESSION_ENGINE = &#39;redis_sessions.session&#39;   SESSION_REDIS = {       &#39;host&#39;: &#39;localhost&#39;,       &#39;port&#39;: 6379,       &#39;db&#39;: 0,       &#39;password&#39;: &#39;password&#39;,       &#39;prefix&#39;: &#39;session&#39;,       &#39;socket_timeout&#39;: 1   }```</code></pre><p># </p>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记3</title>
    <link href="/2020/02/02/Django%E7%AC%94%E8%AE%B03/"/>
    <url>/2020/02/02/Django%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p><strong>定义模板</strong></p><ul><li><p>变量：</p><ul><li><p>视图传递给模板的数据，要遵循标识符规则</p></li><li><p>语法：</p></li></ul></li></ul><pre><code class="python">{{值}}</code></pre><ul><li><p>注意：如果使用的变量不存在，则插入的是空字符串</p></li><li><p>在模板中使用点语法<code>xx.xx</code>：代表字典查询，属性或者方法，数字索引</p></li><li><p>在模板中调用对象的方法，注意，模板中不能传递参数</p></li></ul><ul><li><p>标签</p><ul><li>语法：</li></ul></li></ul><pre><code class="python">{% 语句 %}</code></pre><ul><li>作用：在输出中创建文本；控制逻辑和循环</li><li>条件语句</li></ul><pre><code class="python">{% if 表达式 %}语句1{% else %}语句2{% endif %}# 或者{% if 表达式1 %}语句1{% elif 表达式2 %}语句2{% endif %}</code></pre><ul><li>循环</li></ul><pre><code class="python">{% for 变量 in 列表 %}语句{% endfor %}############################{% for 变量 in 列表 %}语句1{% empty %}语句2{% endfor %}#####################################{{forloop.counter}} # 循环的次数</code></pre><ul><li><code>comment</code></li></ul><pre><code class="python">{% comment %}注释的内容{% endcomment %}</code></pre><ul><li><code>ifequal</code>等于，<code>ifnotequal</code>不等于</li></ul><pre><code class="python">{% ifequal 值1 值2 %}语句{% endifequal %}</code></pre><ul><li><code>include</code></li></ul><pre><code class="python"># 加载模板并以标签内的参数渲染# 格式{% include ‘模板目录’ 参数1 参数2 %}</code></pre><ul><li><code>url</code></li></ul><pre><code class="python"># 反向解析# 格式{% url 'namespace' p1 p2 %}</code></pre><ul><li><code>csrf_token</code></li></ul><pre><code class="python"># 用于跨站请求伪造保护# 格式{% csrf_token %}</code></pre><ul><li><code>block</code>、<code>extend</code></li></ul><pre><code class="python"># 用于模板的继承</code></pre><ul><li><code>autoescape</code></li></ul><pre><code class="python">用于html转义</code></pre><ul><li>过滤器</li></ul><pre><code class="python"># 作用： 在变量被显示前修改它语法： {{变量 | 过滤器}}# 示例{{str | upper}} #将字符串转换为大写{{str | upper}} #将字符串转换为小写# 过滤器可以传递参数，参数用引号引起来# 示例join将字符串用 ‘#’连接{{列表|join:'#'}}# 如果一个变量没有被提供，或者值为false，空，可以使用默认值#　格式{{值|default:'默认值'}}#　根据给定格式转换日期为字符串#　格式{{ date值|date:'y-m-d'}}# HTML转义# escape#加减乘除&lt;h1&gt;num = {{num}}&lt;/h1&gt;&lt;h1&gt;num = {{num|add:10}}&lt;/h1&gt;&lt;h1&gt;num = {{num|add:-5}}&lt;/h1&gt;&lt;!--num/1*5--&gt;&lt;h1&gt;num = {% num widthratio num 1 5 %}&lt;/h1&gt;&lt;!--num/5*1--&gt;&lt;h1&gt;num = {% num widthratio num 5 1 %}&lt;/h1&gt;{{ 值|divisiableby:2}}</code></pre><ul><li>注释</li></ul><pre><code class="python"># 单行注释：（在网页中显示不出来，不知道为？）# 多行注释：{% comment %}注释的内容{% endcomment %}</code></pre><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><pre><code class="python"># project文件目录下的urls.py文件设置url(r&#39;^&#39;, include(&#39;myApp.urls&#39;,namespace=&#39;app&#39;)),# app文件夹下设置urls.py文件url(r&#39;^good/(\d+)/(\d+)/$&#39;, views.good,name=&#39;good&#39;),# 模板&lt;a href = &#39;{% url 'app:good' 1 %}&#39;&gt;链接&lt;/a&gt;</code></pre><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p><strong>作用</strong></p><p>模板继承可以减少页面的内容的重复定义，实现页面的重用</p><p><strong><code>block标签</code></strong></p><p>在父模板中预留区域，子模板去填充</p><p><strong><code>extends标签</code></strong></p><p>继承模板，需要写在模板文件的第一行</p><p><strong>示例</strong></p><pre><code class="html">&lt;!--基础模板--&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        #header{            width:100%;            height:100px;            background-color:red;        }        #footer{            width:100%;            height:100px;            background-color:blue;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;header&quot;&gt;header&lt;/div&gt;    &lt;div id=&quot;main&quot;&gt;        {% block main %}        {% endblock main %}    &lt;/div&gt;    &lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="python">&lt;!-- 子模板文件--&gt;{% extends 'myApp/base.html' %}{% block main %}    <!--jason is a good man-->{% endblock main %}</code></pre><h2 id="HTML转义"><a href="#HTML转义" class="headerlink" title="HTML转义"></a>HTML转义</h2><pre><code class="python">return render(request,&#39;myApp/index.html&#39;,{&quot;code&quot;:&quot;&lt;h1&gt;jason is a good man!&lt;/h1&gt;&quot;})# 在idnex.html中将接收到的code当成普通字符串渲染{{code}}{{code|escape}}# 在idnex.html中将接收到的code当成html代码渲染{{code|safe}}{% autoescape off %}{{code}}{% endautoescape %}</code></pre><h2 id="CRSF（跨站请求伪造）"><a href="#CRSF（跨站请求伪造）" class="headerlink" title="CRSF（跨站请求伪造）"></a>CRSF（跨站请求伪造）</h2><p>某些恶意网站包含链接、表单、按钮、<code>js</code>，利用登录用户在浏览器中认证，从而攻击服务器</p><p><strong>防止CSRF</strong></p><ul><li><p>在<code>setting.py</code>文件中的<code>MIDDLEWARE</code>增加<code>&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</code></p></li><li><p>在模板的表单中加入</p><pre><code class="html">{% csrf_token %}</code></pre></li></ul><p><strong>验证码</strong></p><ul><li>在用户注册，登录页面的时候使用，为了防止暴力请求，减轻服务器的压力-</li><li>防止<code>csrf</code>的一种方式</li></ul><pre><code class="python">def verifycode(request):    # 引入绘图模块    from PIL import Image,ImageDraw,ImageFont    import random    # 定义背景颜色    bgcolor = (random.randrange(20,100),random.randrange(20,100),random.randrange(20,100))    width =100    height=50    #创建一个图片矩阵    im = Image.new(&#39;RGB&#39;,(width,height),bgcolor)    #创建画笔对象    draw = ImageDraw.Draw(im)    # 调用画笔的point()函数绘制噪点    for i in range(0,100):        xy = (random.randrange(0,width),random.randrange(0,height))        fill = (random.randrange(0,255),255,random.randrange(0,255))        draw.point(xy,fill=fill)    # 定义验证码的被选值    str = &#39;1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#39;    # 随机选取4个值作为验证码    rand_str = &#39;&#39;    for i in range(0,4):        rand_str+=str[random.randrange(0,len(str))]    # 构造字体对象    font = ImageFont.truetype(r&#39;/usr/share/fonts/MyFonts/simhei.ttf&#39;,size=40)    # 构造字体颜色    fontcolor1 = (255,random.randrange(0,255),random.randrange(0,255))    fontcolor2 = (255,random.randrange(0,255),random.randrange(0,255))    fontcolor3 = (255,random.randrange(0,255),random.randrange(0,255))    fontcolor4 = (255,random.randrange(0,255),random.randrange(0,255))    # 绘制4个字    draw.text((5,2),rand_str[0],font=font,fill=fontcolor1)    draw.text((25,2),rand_str[1],font=font,fill=fontcolor2)    draw.text((50,2),rand_str[2],font=font,fill=fontcolor3)    draw.text((75,2),rand_str[3],font=font,fill=fontcolor4)    del draw    # 存入session，用于做进一步验证    request.session[&#39;verify&#39;] = rand_str    # 内存文件操作    import io    buf = io.BytesIO()    # 将图片保存在内存中，文件类型为png    im.save(buf,&#39;png&#39;)    # 将内存中的图片数据返回给客户端，MIME类型为图片png    return HttpResponse(buf.getvalue(),&#39;image/png&#39;)def verifycodefile(request):    f = request.session.get(&#39;flag&#39;,True)    str = &quot;&quot;    if f == False:        str=&quot;验证码错误&quot;    request.session.clear()    return render(request,&#39;myApp/verifycodefile.html&#39;,{&quot;flag&quot;:str})def verifycodecheck(request):    code1 = request.POST.get(&quot;verifycode&quot;).upper()    code2=request.session[&#39;verify&#39;].upper()    if code1==code2:        return render(request,&#39;myApp/success.html&#39;)    else:        request.session[&#39;flag&#39;]=False        return redirect(&#39;/verifycodefile/&#39;)</code></pre><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/verifycodecheck/&quot; method=&quot;post&quot;&gt;        {% csrf_token %}        &lt;input type=&quot;text&quot; name=&quot;verifycode&quot;/&gt;        &lt;img src=&quot;/verifycode/&quot;&gt;        &lt;input type=&quot;submit&quot; value=&quot;确定&quot;/&gt;        &lt;span&gt;            {{flag}}        &lt;/span&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记2</title>
    <link href="/2020/01/27/Django%E7%AC%94%E8%AE%B02/"/>
    <url>/2020/01/27/Django%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<p>#Django笔记2</p><blockquote><p>2020年正月初三小记</p><p>今天早晨传来消息，篮球传奇球员科比意外去世。虽然我不是什么篮球迷，但也熟悉他的传奇人生。2020年刚开始，它似乎就开始小孩似地，不顾他人感受地、不停地宣告它的不平凡。让本应该全国欢庆的春节变得沉默起来。先有武汉肺炎肆虐搞得全国闭门不出，人心惶惶（尤其是笔者我在武汉上学）；后有紫金王朝球迷的默哀；</p><p>可是怎么办了？生活还是得继续；做好自己的；灾难终究汇过去；</p></blockquote><h1 id="2day-模型"><a href="#2day-模型" class="headerlink" title="2day 模型"></a>2day 模型</h1><p><em>搬轮子过程</em></p><p><em>1、在setting.py里修改数据库名</em></p><p><em>2、在setting.py里修改数据库密码</em></p><p><em>3、删除迁移文件</em></p><p><em>4、在数据库中创建对应第一步的数据库</em></p><p><em>5、执行生成迁移文件</em></p><p><em>6、执行迁移</em></p><p><em>7、启动服务，浏览器测试</em></p><blockquote><p>Django对各种数据库提供了很好的支持，Django为这些数据库提供了统一的调用API，可以根据不同的业务需求选择不同的数据库</p></blockquote><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><ul><li>配置数据库</li><li>定义模型类（一个模型类都在数据库中对应一张数据表）</li><li>生成迁移文件</li><li>执行迁移生成数据表</li><li>使用模型类进行增删改查</li></ul><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><ul><li><p>修改工程目录下的<code>__init__.py</code>文件</p><pre><code class="python">import pymysqlpymysql.install_as_MySQLdb()</code></pre></li><li><p>修改setting.py文件</p><pre><code class="python">DATABASES = {    &#39;default&#39;: {        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        &#39;NAME&#39;: &#39;forDjango&#39;,        &#39;USER&#39;: &#39;root&#39;,        &#39;PASSWORD&#39;: &#39;qq123&#39;,        &#39;HOST&#39;: &#39;localhost&#39;,        &#39;PORT&#39;: &#39;3306&#39;,    }}</code></pre></li></ul><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><blockquote><p>对象-关系-映射</p><p>Django—ORM—各种数据库</p></blockquote><ul><li>任务<ul><li>根据对象类型生成表结构</li><li>将对象、列表的操作转换为sql语句</li><li>将sql语句查询到的结果转换为对象、列表</li></ul></li></ul><h4 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h4><ul><li><p>模型、属性、表、字段间的关系</p></li><li><p>定义属性：详情请见定义属性部分</p></li><li><p>穿件模型类</p></li><li><p>元选项（在模型类中定义meta类，用于设置元信息）</p><pre><code class="python">class Meta:    # 定义数据表名，推荐使用小写字母，数据表名默认为项目小写_类名小写    db_table=&quot;students&quot;    # 对象的默认排序字段，获取对象的列表时使用    ordering=[&#39;id&#39;] #对id字段升序排列     #ordering=[&#39;-id&#39;]# 对id字降序排列    #注意：排序会增加数据库的开销</code></pre></li></ul><h4 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h4><p>概述</p><ul><li>django根据属性确定一下信息<ul><li>当前选择的数据库支持字段的类型</li><li>渲染管理表单时使用的默认html空间</li><li>在管理站点最低限度的验证</li></ul></li><li>django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列</li><li>属性命名限制<ul><li>遵循标识符规则</li><li>由于django的查询方式，不允许使用连续的下划线</li></ul></li></ul><p>库</p><ul><li>定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中</li><li>使用方式<ul><li>导入<code>from django import mdoels</code></li><li>通过models.fields创建字段类型的对象，赋值给属性</li></ul></li><li>逻辑删除<ul><li>对于重要的数据都做逻辑删除，不做物理删除，实现方式是定义isDelete属性，类型为BooleanField，默认值为False</li></ul></li><li><p>字段类型</p><ul><li>AutoField<ul><li>一个根据实际ID自动增长的额IntegerField。通常不指定如果不指定</li><li>一个主键字段将自动添加到模型汇总</li></ul></li><li>CharField(max_length=字符长度)<ul><li>字符串，默认的表单样式是TextInput</li></ul></li><li>TextField<ul><li>大文本字段，一般超过4000使用，默认的表单控件是Textarea</li></ul></li><li>IntegerField<ul><li>整数</li></ul></li><li>DecimalField(max_digits=None,decimal_places=None)<ul><li>使用python的Decimal实例表示的十进制浮点数</li><li>参数说明<ul><li><code>DecimalField.max_digits</code>位数总数</li><li><code>DecimalField.decimal_places</code>小数点后的数字位数</li></ul></li></ul></li><li>FloatField<ul><li>用Python的float实例来表示的浮点数</li></ul></li><li>BooleanField<ul><li>布朗值，此字段的默认表单控制是CheckboxInput</li></ul></li><li>NullBooleanField<ul><li>支持null、true、false三种值</li></ul></li><li>DateField(auto_now=False,auto_now_add=False)<ul><li>使用Python的datetime.date实例表示的日期</li><li>参数说明<ul><li><code>DateField.auto_now</code>每次保存对象时，自动设置当前时间，用于“最后一次修改”</li><li><code>DateField.auto_now_add</code>当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false</li><li>说明<ul><li>该字段默认对应的表单控件是一个TextInput。在管理员站点添加了一个JavaScript写的日历控件，和一个“Today”的快捷按钮，包含了一个额外的Invalid_data错误消息键。</li></ul></li><li>注意：<code>auto_now_add</code>,<code>auto_now</code>,这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果</li></ul></li><li>TImeField<ul><li>使用Python的datetime.time实例表示的时间，参数同DateField</li></ul></li><li>DateTimeField<ul><li>使用python的datetime</li><li>datetime实例表示的日期和时间，参数同DateField</li></ul></li><li>FileField<ul><li>一个上传文件的字段</li></ul></li><li>ImageField<ul><li>继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image</li></ul></li></ul></li></ul></li><li><p>字段选项</p><ul><li>概述<ul><li>通过字段选项，可以实现对字段的约束</li><li>在字段对象时通过关键字参数指定</li></ul></li><li><code>null</code>如果为True，Django将空值以null存储到数据库中，默认值是False</li><li><code>blanke</code>如果为True，则该字段允许为空白，默认值是False</li><li>注意：null是数据库范畴的概念，blank是表单验证范畴的</li><li><code>db_column</code>字段的名称，如果未指定，则使用属性的名称</li><li><code>db_index</code>若值为True，则在表中会为此字段创建索引</li><li><code>default</code>默认值</li><li><code>primary_key</code>若为True，则该字段会成为模型的主键字段</li><li><code>unique</code>如果为True，这个字段在表中必须有唯一值</li></ul></li><li><p>关系</p><ul><li><p>分类</p><ul><li>ForeignKey： 一对多，将字段定义在多的端中</li><li>ManyToManyField： 多对多，将字段定义在两端中</li><li>OneToOneField：一对一，将字段定义在任意一段中</li></ul></li><li><p>用一访问多</p><ul><li>格式<ul><li>对象.模型类小写_set</li><li>示例：<code>grade.students_set</code></li></ul></li></ul></li><li><p>用一访问一</p><ul><li><p>格式</p><ul><li>对象.模型类小写</li></ul></li><li><p>示例</p><ul><li>grade.students</li></ul></li></ul></li><li><p>访问id</p><ul><li>格式<ul><li>对象.属性_id</li><li>示例<ul><li>student.sgrade_id</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="模型成员"><a href="#模型成员" class="headerlink" title="模型成员"></a>模型成员</h4><blockquote><ul><li><p>类属性</p><ul><li><p>Object  ： 是manger类型的对象，作用是与数据库进行交互；当定义模型类时没有指定管理器，则Django为模型创建一个名为Objects 的管理器</p></li><li><p>自定义模型管理器</p><pre><code class="python">#在模型类中定义stuObj = models.Manager()# 当为模型指定模型管理器，Django就不在为模型类生成Objects模型管理器了</code></pre></li><li><p>自定义管理器Manger类</p><ul><li><p>模型管理器是Django的模型进行数据库交互的接口，一个模型可以有多个模型管理器</p></li><li><p>作用</p><ul><li><p>向管理器类中添加额外的方法</p></li><li><p>修改管理器返回的原始查询集（例如重写<code>get_queryset()方法</code>实现数据软删除）</p><pre><code class="python">class StudentsManager(models.Manager):   def get_queryset(self):       return super(StudentsManager,self).get_queryset().filter(isDelete=False)class Students(models.Model):   stuObj = StudentsManager()</code></pre></li></ul></li></ul></li></ul></li><li><p>创建对象</p><ul><li><p>目的 向数据库中添加数据</p></li><li><p>当创建对象时，django不会对数据库进行读写操作，当调用save()方法时才与数据库交互，将对象保存到数据表中</p></li><li><p>注意:<code>__init__</code>方法已经在父类models.Model中使用，在自定义的模型中无法使用</p></li><li><p>方法</p><ul><li><p>在模型类中增加一个类方法</p><pre><code class="python">class Students(models.Model):  stuObj = StudentsManager()  sname = models.CharField(max_length=20)  sgender = models.BooleanField(default=True)  sage = models.IntegerField()  scontend = models.CharField(max_length=20)  isDelete = models.BooleanField(default=False)  sgrade = models.ForeignKey(&quot;Grades&quot;)  def __str__(self):      return self.sname  # class Meta:  #     db_table=&quot;students&quot;  #     ordering=[&#39;id&#39;]  @classmethod  def createStudent(cls,name,age,gender,contend,grade,isD=False):      student = cls(sname=name,sage=age,sgender=gender,scontend=contend,                  sgrade=grade,isDelete=isD)      return student</code></pre></li></ul></li></ul></li></ul><ul><li><p>在定义管理器中添加一个方法</p><pre><code class="python">class StudentsManager(models.Manager):    def get_queryset(self):        return super(StudentsManager,self).get_queryset().filter(isDelete=False)    def createstudents(self,name,age,gender,contend,grade,isD=False):        stu = self.model()        stu.sname = name        stu.sage = age        stu.agender = gender        stu.scontend = contend        stu.grade = grade        return stu</code></pre></li></ul></blockquote><h4 id="模型查询"><a href="#模型查询" class="headerlink" title="模型查询"></a>模型查询</h4><blockquote><ul><li><p>概述</p><ul><li>查询集表示从数据库获取的对象集合</li><li>查询集可以有多个过滤器</li><li>过滤器就是一个函数，基于所给的参数限制查询结果</li><li>从sql角度来说，查询集合select语句等价，过滤器就像where条件</li></ul></li><li><p>查询集</p><ul><li><p>在管理器调用方法返回查询集</p></li><li><p>查询集经过过滤器后返回新的查询集，所以可以写成链式调用</p></li><li><p>惰性执行：创建查询集不会带来任何数据的访问，直到调用数据时，才会访问数据</p></li><li><p>直接访问数据的情况</p><ul><li>迭代</li><li>序列化</li><li>与if合用</li></ul></li><li><p>返回查询集的方法称为过滤器</p><ul><li><code>all()</code>返回查询集中的所有数据</li><li><code>filter()</code>返回符合条件的数据<ul><li><code>filter(key1=value1,key2=value2)</code></li><li><code>filter(key1=value1).filter(key2=value2)</code></li></ul></li><li><code>exclude()</code>过滤掉符合条件的数据</li><li><code>order_by()</code>排序</li><li><code>values()</code>一个数据就是一个对象，返回一个列表</li></ul></li><li><p>返回单个数据</p><ul><li><code>get()</code> 返回一个满足条件的对象，如果没有找到符合条件的对象，会引发<code>模型类.DoesNotExist</code>异常；如果找到多个对象，会引发<code>模型类.MultipleObjectsReturned</code>异常</li><li><code>count()</code>返回当前查询集中的对象个数</li><li><code>first()</code>返回查询集中的第一个对象</li><li><code>last()</code> 返回查询集中最后一个对象</li><li><code>exists()</code> 判断查询集中是否有数据。</li></ul></li><li><p>限制查询集</p><ul><li><p>查询集返回列表，可以使用下标方法进行限制，等同于sql中的limit语句。<strong>下标不能使负数</strong></p><pre><code class="python">studentsList = Student.object.all()[0:5]</code></pre></li></ul></li></ul></li></ul><ul><li><p>查询集的缓存</p><ul><li>概述：每个查询集都包含一个缓存，来最小化的对数据库的访问</li><li>在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存，Django会将查询出来的数据做一个缓存，并返回查询结果，以后的查询直接使用查询集的缓存</li></ul></li><li><p>字段查询</p><ul><li><p>概述</p><ul><li>实现了sql中的where语句，作为方法<code>filter()</code>,<code>exclude</code>,<code>get()</code>的参数</li><li>语法：属性名称_比较运算法=值</li><li>外键：属性名_id</li><li>转义: <ul><li>like语句中使用%是为了匹配占位，匹配数据中的%（where like ’\%‘）</li><li><code>filter(sname__contains=&#39;%&#39;)</code></li></ul></li></ul></li><li><p>比较运算符</p><ul><li><p><code>exact</code></p><ul><li>判断，大小写敏感</li><li><code>filter(isDelete=False)</code></li></ul></li><li><p><code>contains</code>:是否包含，大小写敏感</p><pre><code class="python">studentsList = Students.object.filter(sname__contains=&#39;孙&#39;)</code></pre></li><li><p><code>startwith</code>、<code>endwith</code></p><ul><li><p>以value开头或结尾，大小写敏感</p><pre><code class="python">def studentsearch(request):    #包含条件匹配    # studentsList = Students.objects.filter(sname__contains=&#39;孙&#39;)    #起始匹配    studentsList = Students.stuObj.filter(sname__startswith=&#39;j&#39;)    return render(request,&#39;myApp/students.html&#39;,{&quot;students&quot;:studentsList})</code></pre></li></ul></li><li><p>以上四个在前面加上<code>i</code>，就表示不区分大小写：<code>iextract</code>、<code>icontains</code>、<code>istartwith</code>、<code>iendwith</code></p></li><li><p><code>isnull</code>和<code>isnotnull</code>：是否为空</p></li><li><p><code>in</code>：是否包含在范围内</p><pre><code class="python">Students.stuObj.filter(pk__in=[2,4,6,8])</code></pre></li><li><p><code>gt</code>、<code>gte</code>、<code>lt</code>、<code>lte</code> 大于；大于等于；小于；小于等于</p><pre><code class="python">studentsList = Students.stuObj,filter(sage__gt=30)</code></pre></li><li><p><code>year、month、day、week_day、hour、minute、second</code></p><pre><code class="python">StudentsList = Students.stuObj.filter(lastTime__year=2017)</code></pre></li><li><p>跨关联查询 </p><pre><code class="python">查询包含学生jason的班级（跨表查询）grade = Grades.objects.filter(students__contend__contains=&#39;jason&#39;)</code></pre></li></ul></li></ul></li></ul><pre><code> - 查询快捷   - `pk`代表主键</code></pre><ul><li><p>聚合函数</p><ul><li><p>使用<code>agggregate()</code>函数返回聚合函数的值</p></li><li><p><code>Avg</code></p></li><li><p><code>Count</code></p></li><li><p><code>Max</code></p></li><li><p><code>Min</code></p></li><li><p><code>Sum</code></p><pre><code class="python">from django.db.model import MaxmaxAge=Students.stuObj.aggregate(Max(&#39;sage&#39;))</code></pre></li></ul></li><li><p>F 对象</p><ul><li><p>可以使用模型的A属性与B属性进行比较</p><pre><code class="python">from django.db.models import F,Q    def grades(request):        g=Grades.objects.filter(ggirlnum__gt=F(&#39;gboynum&#39;))        print(g)        return HttpResponse(&quot;OOOOOo&quot;)    </code></pre></li><li><p>支持F对象的算数运算</p><pre><code class="python">g=Grades.objects.filter(ggirlnum__gt=F(&#39;gboynum&#39;)+20)</code></pre></li></ul></li><li><p>Q对象</p><ul><li><p>概述: 过滤器方法中的关键子参数，默认条件为<code>And</code>模式。因此使用Q对象解决该问题，实现<code>or</code>查询</p><pre><code class="python">StudentsList=Students.stuObj.filter(Q(pk__lte=3)|Q(sage__gt=50))#`～`表示取非StudentsList=Students.stuObj.filter(～Q(pk__lte=3))</code></pre></li></ul></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记1</title>
    <link href="/2020/01/16/Django%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/01/16/Django%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-day"><a href="#1-day" class="headerlink" title="1 day"></a>1 day</h2><h3 id="了解小知识"><a href="#了解小知识" class="headerlink" title="了解小知识"></a>了解小知识</h3><ul><li><p>了解 djngo设计模式（MVC，MTV）</p></li><li><p>安装django（1.11.4）</p><p><code>pip install Django==1.11.4</code></p></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li><p>在合适位置创建一个目录</p><p><code>/home/jason/Doucements/code/forDjango/</code></p></li><li><p>在目录位置打开终端</p></li><li><p><code>django-admin startproject project01</code></p></li><li><p><code>tree . /F</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229154035290.png" srcset="/img/loading.gif" alt="image-20191229154035290"></p></li><li><p>manage.py 是一个命令行工具，可以使我们用多种方式对django项目进行交互</p></li><li><p>init.py  项目的配置文件</p></li><li><p>urls.py 项目的url声明</p></li><li><p>wsgi.py 项目与wsgi兼容的web服务入口</p></li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="设计表结构"><a href="#设计表结构" class="headerlink" title="设计表结构"></a>设计表结构</h4><ul><li>班级表结构<ul><li>表名 grade</li><li>字段<ul><li>班级名称 gname</li><li>成立时间gdate</li><li>女生总数ggirlname</li><li>男生总数gboyname</li><li>是否删除isDelete</li></ul></li></ul></li><li>学生表结构<ul><li>表名student</li><li>字段<ul><li>学生姓名sname</li><li>学生性别sgender</li><li>学生年龄sage</li><li>学生简介scontend</li><li>学生班级sgrade</li><li>是否删除isDelete</li></ul></li></ul></li></ul><h4 id="配置数据库-（注意django-默认sqlite）"><a href="#配置数据库-（注意django-默认sqlite）" class="headerlink" title="配置数据库 （注意django 默认sqlite）"></a>配置数据库 （注意django 默认sqlite）</h4><ul><li><p>在setting.py文件中的databasees选项中进行数据库配置</p></li><li><p>配置mysql</p><ul><li><p>python3 安装的pymysql</p></li><li><p>在 init文件中 写入下面两行代码</p><pre><code class="python">import pymysqlpymysql.install_as_MySQLdb()</code></pre></li><li><p>创建一个数据库</p></li><li><p>配置</p></li><li><pre><code class="python">DATABASES = {    &#39;default&#39;: {        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        &#39;NAME&#39;: &#39;forDjango&#39;,        &#39;USER&#39;: &#39;root&#39;,        &#39;PASSWORD&#39;: &#39;qq123&#39;,        &#39;HOST&#39;: &#39;localhost&#39;,        &#39;PORT&#39;: &#39;3306&#39;,    }}</code></pre></li></ul></li></ul><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><ul><li><p>在一个项目中可以创建多个应用，每个应用进行一种业务处理</p></li><li><p>打开终端，进入project01目录</p></li><li><p><code>python manage.py startapp myApp</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229161301835.png" srcset="/img/loading.gif" alt="image-20191229161301835"></p></li><li><p>myApp目录说明</p><ul><li>admin.py 站点配置</li><li>model.py 模型</li><li>view.py 视图</li></ul></li></ul><h4 id="激活应用"><a href="#激活应用" class="headerlink" title="激活应用"></a>激活应用</h4><ul><li><p>在<code>setting.py</code>文件中，将myApp应用加入到INSTALLED_APP中</p></li><li><pre><code class="python">INSTALLED_APPS = [    &#39;django.contrib.admin&#39;,    &#39;django.contrib.auth&#39;,    &#39;django.contrib.contenttypes&#39;,    &#39;django.contrib.sessions&#39;,    &#39;django.contrib.messages&#39;,    &#39;django.contrib.staticfiles&#39;,    &#39;myAPP&#39;,]</code></pre></li></ul><h4 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h4><ul><li><p>一个数据表就对应一个模型</p></li><li><p>在<code>models.py</code>中定义模型</p><ul><li><p>引入<code>from django.db import models</code></p></li><li><p>模型类型要继承models.Model类</p></li><li><pre><code class="python">from django.db import models# Create your models here.class Grades(models.Model):    gname = models.CharField(max_length=20)    gdate = models.DateField()    ggirlnum = models.IntegerField()    gboynum = models.IntegerField()    isDelete = models.BooleanField(default=False)class Students(models.Model):    sname = models.CharField(max_length=20)    sgender = models.BooleanField(default=True)    sage = models.IntegerField()    scontend = models.CharField(max_length=20)    isDelete = models.BooleanField(default=False)    sgrade = models.ForeignKey(&quot;Grades&quot;)</code></pre></li></ul></li><li><p>说明： 不需要定义主键， 在生成时自动添加，并且值为自动增加</p></li></ul><h4 id="在数据库中生成数据表"><a href="#在数据库中生成数据表" class="headerlink" title="在数据库中生成数据表"></a>在数据库中生成数据表</h4><ul><li><p>生成迁移文件</p><ul><li><p><code>python manage.py makemigrations</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229163651715.png" srcset="/img/loading.gif" alt="image-20191229163651715"></p></li><li><p>在migration目录下生成了以迁移文件，此时数据库中还有生成数据表</p></li></ul></li><li><p>执行迁移（相当于执行了sql语句）</p><ul><li><p><code>python manage.py migrate</code></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229164023734.png" srcset="/img/loading.gif" alt="image-20191229164023734"></p><p><img src="//yoursite.com/2020/01/16/Django笔记/image-20191229164123022.png" srcset="/img/loading.gif" alt="image-20191229164123022"></p></li><li><p>数据表已经生成，</p></li></ul></li></ul><h4 id="测试数据操作"><a href="#测试数据操作" class="headerlink" title="测试数据操作"></a>测试数据操作</h4><ul><li><p>进入到<code>python mange.py shell</code></p></li><li><p>引入包 </p><ul><li><pre><code class="python">from myApp.models import Grades,Studentsfrom django.utils improt timezonefrom datetime import *Grades.objects.all() # 类名.object.all()查询该表所有数据</code></pre></li></ul></li><li><p>添加数据</p><ul><li><p>本质：创建一个模型的实例</p></li><li><pre><code class="python">grade1=Grade()grade1.gname =&#39;python04&#39;grade1.gdate=datetime(year=2017,month=7,day=17)grade1.ggirlnum=2grade1.gboynum=70###关键步骤,执行save后才能像数据库汇总存储数据grade1.save()</code></pre></li><li><p>为了方便查看数据可以mdoel.py中Grade类中重写<code>__str__</code>函数</p></li><li><pre><code class="python">def __str__(self):    return &quot;%s-%d-%d&quot; %(self.gname, self.ggirlnum, self.gboynum)</code></pre></li></ul></li><li><p>查看某个对象</p><ul><li><pre><code class="python">Grade.objects.get(pk=2)#类名.objects.get(pk=2)</code></pre></li></ul></li><li><p>修改数据</p><ul><li><pre><code class="python">对象名.属性=新值对象名.save()</code></pre></li></ul></li><li><p>删除数据</p><ul><li><pre><code class="python">对象名.delete()</code></pre></li></ul></li><li><p>关联对象</p><ul><li><pre><code class="python">stu = Student()stu.sname=&quot;jason&quot;stu.sgender=Truestu.sage=22stu.scontend=&#39;i am jason&#39;stu.sgrade = garade1  #关联数据库，生成外键stu.save()</code></pre></li><li><p>获得关联对象的集合</p><ul><li>需求：获取pyhton04班级的所有学生</li><li>对象名关联的类名小写_set.all()</li><li>grade1.students_set.all()</li></ul></li><li><p>创建关联对象</p><pre><code class="python">stu = grade1.students_set.create(sname=u&#39;曾志伟&#39;，sgender=True,scontend=u&#39;我叫曾志伟&#39;，sage=45)#不需要save（）</code></pre></li></ul></li></ul><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><ul><li>格式<ul><li><code>python manage.py runserver ip:port</code></li><li>ip 可以不写，表示本机ip</li><li>端口号默认是8000</li></ul></li><li>这是一个pyhton写的轻量级web服务器，仅用来在开发测试中使用</li></ul><h4 id="Admin站点管理"><a href="#Admin站点管理" class="headerlink" title="Admin站点管理"></a>Admin站点管理</h4><ul><li><p>概述</p><ul><li>内容发布：负责添加、修改、删除内容</li><li>公共访问</li></ul></li><li><p>配置Admin应用</p><ul><li>在settings.py文件中的INSTALLED_APPS中添加<code>‘django.contrib.admin’</code>默认已经添加好了</li></ul></li><li><p>创建管理员用户</p><ul><li><code>python manage.py createsuperuser</code></li><li>依次输入用户信息</li><li>可以在<code>127.0.0.1:8000/admin/</code>网址进入管理员登录界面</li></ul></li><li><p>汉化</p><ul><li>修改setting.py文件中的language选项为<code>zh-Hans</code>，还有TIME_ZONE=’Asia/Shanghai‘</li></ul></li><li><p>管理数据表</p><ul><li><p>修改myApp目录下的admin.py文件</p><pre><code class="python">from .models import Grades,Studentsadmin.site.register(Grades)admin.site.register(Students)</code></pre></li><li><p>自定义管理页面</p><pre><code class="python">class GradeAdmin(admin.ModelAdmin):    # 列表页属性    #显示字段    list_display = [&#39;pk&#39;,&#39;gname&#39;,&#39;gdate&#39;,&#39;ggirlnum&#39;,&#39;gboynum&#39;,&#39;isDelete&#39;]    #过滤字段    list_filter = [&#39;gname&#39;]    #搜索字段    search_fields = [&#39;gname&#39;]    #分页    list_per_page = 5    # 添加、修改页属性    #规定属性的顺序    # 给属性分组    #fieldsets和field不能同时使用    #fields =    fieldsets = [        (&quot;num&quot;,{&quot;fields&quot;:[&#39;ggirlnum&#39;,&#39;gboynum&#39;]}),        (&quot;base&quot;,{&quot;fields&quot;:[&#39;gname&#39;,&#39;gdate&#39;,&#39;isDelete&#39;]}),    ]#注意：自定义完成已定义要注册admin.site.register(Grades,GradeAdmin)admin.site.register(Students)</code></pre></li><li><p>关联对象</p><ul><li><p>需求：在创建一个班级时可以直接添加几个学生</p><pre><code class="python">class StudentInfo(admin.TabularInline): #还有一个StackedInline    model = Students    extra =2class GradeAdmin(admin.ModelAdmin):    inlines = [StudentInfo]</code></pre></li></ul></li><li><p>布尔值显示问题</p><pre><code class="python">class StudentsAdmin(admin.ModelAdmin):    def gender(self):        if self.sgender:            return &quot;男&quot;        else:            return  &quot;女&quot;    #设置页面列的名称    gender.short_description = &quot;性别&quot;</code></pre></li><li><p>执行动作在页面位置问题</p><pre><code class="python">actions_on_top = Falseactions_on_bottom = True</code></pre></li><li><p>使用装饰器来进行注册</p></li><li><pre><code class="python">@admin.register(类名)</code></pre></li></ul></li></ul><h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><blockquote><p>在django中，视图对web请求进行回应</p><p>视图就是python函数，在view.py文件中定义</p></blockquote><h4 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h4><pre><code class="python">from django.http import HttpResponsedef index(request):    return HttpResponse(&quot;jason is a good man&quot;)</code></pre><h4 id="配置URL控制器"><a href="#配置URL控制器" class="headerlink" title="配置URL控制器"></a>配置URL控制器</h4><ul><li><p>修改project目录下的urls.py文件</p><pre><code class="python">from django.conf.urls import url,includefrom django.contrib import adminurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),    url(r&#39;^&#39;, include(&#39;myApp.urls&#39;)),]</code></pre></li><li><p>在myApp应用目录下创建一个urls.py文件</p><pre><code class="python">from django.conf.urls import urlfrom . import viewsurlpatterns=[    url(r&#39;^$&#39;,views.index)]</code></pre></li></ul><h3 id="模板的基本使用"><a href="#模板的基本使用" class="headerlink" title="模板的基本使用"></a>模板的基本使用</h3><blockquote><p>模板是HTML页面，可以根据视图中传递过来的数据进行填充</p></blockquote><h4 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h4><ul><li><p>创建templates目录，在目录下创建对应项目的模板目录（project/templates/myApp）</p></li><li><p>配置模板路径</p><ul><li><p>修改setting.py文件下的templates</p><pre><code class="python">TEMPLATES = [    {        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,        #设置下面的DIRS属性        &#39;DIRS&#39;: [os.path.join(BASE_DIR,&#39;templates&#39;)],        &#39;APP_DIRS&#39;: True,        &#39;OPTIONS&#39;: {            &#39;context_processors&#39;: [                &#39;django.template.context_processors.debug&#39;,                &#39;django.template.context_processors.request&#39;,                &#39;django.contrib.auth.context_processors.auth&#39;,                &#39;django.contrib.messages.context_processors.messages&#39;,            ],        },    },]</code></pre></li></ul></li><li><p>定义两个模板</p><ul><li><p>在templates/myApp/目录下定义两个模板（grades.html文件和students.html）</p></li><li><p>模板语法</p><pre><code class="python">{{输出值，可以是变量，也可以是对象属性}}{{%执行代码段%}}</code></pre></li></ul></li><li><p><code>http://127.0.0.1:8000/grades/</code></p><ul><li><p>写grades.html模板</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;班级信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;班级信息列表&lt;/h1&gt;&lt;ul&gt;    &lt;!--[python04, python05,python06]--&gt;    {%for grade in grades%}        <li>            <a href="#">{{grade.gname}}</a>        </li>        {%endfor%}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>去视图中写函数，用来响应http请求即调用模板</p><pre><code class="python">def grades(request):    #去模板中取数据    gradesList = Grades.objects.all()    #将数据传递给模板，模板在渲染页面，将渲染好的页面返回浏览器    return render(request,&#39;myApp/grades.html&#39;,{&quot;grades&quot;:gradesList})</code></pre></li><li><p>要去myAPP中的urls.py 加入模板</p><pre><code class="python">urlpatterns=[    url(r&#39;^$&#39;,views.index),    url(r&#39;^grades/$&#39;,views.grades)]</code></pre></li></ul></li><li><p>点击班级，显示对应班级的所有学生</p><ul><li><p>修改模板</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;班级信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;班级信息列表&lt;/h1&gt;&lt;ul&gt;    &lt;!--[python04, python05,python06]--&gt;    {%for grade in grades%}        <li>            <!--主要是加入了href，-->            <a href="{{grade.id}}">{{grade.gname}}</a>        </li>        {%endfor%}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>定义视图</p><pre><code class="python">from django.shortcuts import render# Create your views here.from django.http import HttpResponsefrom .models import Grades,Studentsdef index(request):    return HttpResponse(&quot;jason is a good man&quot;)def detail(request,num,num2):    return HttpResponse(&quot;detail-%s-%s&quot; %(num,num2))def grades(request):    #去模板中取数据    gradesList = Grades.objects.all()    #将数据传递给模板，模板在渲染页面，将渲染好的页面返回浏览器    return render(request,&#39;myApp/grades.html&#39;,                  {&quot;grades&quot;:gradesList})def students(request):    studentsLsit = Students.objects.all()    return  render(request,&#39;myApp/students.html&#39;,{&quot;students&quot;:studentsLsit})def gradestudents(request,num):    grade = Grades.objects.get(pk=num)    studentsLsit = grade.students_set.all()    return render(request, &#39;myApp/students.html&#39;, {&quot;students&quot;: studentsLsit})</code></pre></li><li><p>配置url</p><pre><code class="python">from django.conf.urls import urlfrom . import viewsurlpatterns=[    url(r&#39;^$&#39;,views.index),    url(r&#39;^grades/$&#39;,views.grades),    url(r&#39;^students/$&#39;,views.students),    url(r&#39;^grades/(\d+)$&#39;,views.gradestudents)]</code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>好记性不如烂笔头，web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用keras搭建DQN</title>
    <link href="/2018/09/14/%E7%94%A8keras%E6%90%AD%E5%BB%BADQN/"/>
    <url>/2018/09/14/%E7%94%A8keras%E6%90%AD%E5%BB%BADQN/</url>
    
    <content type="html"><![CDATA[<p>dqn总结：<br>最近时间虽然一直看这个dqn代码，虽然看懂了，但是思路却一直不明确，无法自己复写出自己的代码，所以就想写一篇博客来整理一下思路。如果这篇文章写完了，应该思路就清晰了。</p><p>本文主要是看了莫烦的教学视频，在视频中，老师（尊称一声老师O(∩_∩)O哈哈~）是用tensoflow1.2来搭建框架的。本人在看懂了代码后，认为DQN中采用了两个模型，此时用tensorflow来完成这些网络的灵活搭建时当让是最好的选择，但是在我看来，似乎keras中的函数式模型似乎也可以做到啊（Sequential模型肯定是不能完成这件事的），所以我就想用keras来重写这个代码，以此来验证自己是不是真的把DQN的实现过程搞懂了。</p><pre><code class="python">#首先我们要构建一个DQN类class DQN:    #之后我们需要构建网络    def _build_net(self):        pass    #学习需要经验池，这个学习是off-learning    def store_transition(self,s,a,r,s_):        pass    #进行学习    def learn(self):        pass    #动作决策    def choose_action(self,observation):        pass</code></pre><p>以上就是我们要完成的东西了，按四个部分一次完成就可以实现DQN类了</p><p>但是我们还要重写类方法中<code>__init__</code>方法：</p><pre><code class="python">def __init__(    self,    n_actions,    n_features,    learning_rate=0.01,    reward_decay=0.9,    e_greedy=0.9,    replace_target_iter=300,    memory_size=500,    batch_size=32,    e_greedy_increment=None,    output_graph=False,):    self.n_actions = n_actions    self.n_features = n_features    self.lr = learning_rate    self.gamma = reward_decay    self.epsilon_max = e_greedy    self.replace_target_iter = replace_target_iter    self.memory_size = memory_size    self.batch_size = batch_size    self.epsilon_increment = e_greedy_increment    self.epsilon = 0 if e_greedy_increment is not None else self.epsilon_max    self.learn_step_counter = 0    self.memory = np.zeros((self.memory_size, n_features * 2 + 2))    self._build_net()</code></pre><p>其实用keras来实现DQN的话，和tenosrflow来写，没有很大的区别。主要是就是在构建网络时代码有些许差别。代码如下：</p><pre><code class="python">def _build_net(self):    # 构建evaluation网络    eval_inputs = Input(shape=(self.n_features,))    x = Dense(64, activation=&#39;relu&#39;)(eval_inputs)    x = Dense(64, activation=&#39;relu&#39;)(x)    self.q_eval = Dense(self.n_actions)(x)    # 构建target网络，注意这个target层输出是q_next而不是，算法中的q_target    target_inputs = Input(shape=(self.n_features,))    x = Dense(64, activation=&#39;relu&#39;)(target_inputs)    x = Dense(64, activation=&#39;relu&#39;)(x)    self.q_next = Dense(self.n_actions)(x)    self.model1 = Model(target_inputs, self.q_next)    self.model2 = Model(eval_inputs, self.q_eval)    rmsprop = RMSprop(lr=self.lr)    self.model1.compile(loss=&#39;mean_squared_error&#39;, optimizer=rmsprop, metrics=[&#39;accuracy&#39;])    self.model2.compile(loss=&#39;mean_squared_error&#39;, optimizer=rmsprop, metrics=[&#39;accuracy&#39;])</code></pre><p>每隔一段时间将evaluation层参数赋值给target层</p><pre><code class="python">def store_transition(self, s, a, r, s_):    if not hasattr(self, &#39;memory_counter&#39;):        self.memory_counter = 0    transition = np.hstack((s, [a, r], s_))    index = self.memory_counter % self.memory_size    self.memory[index, :] = transition  # memory是一个二维列表    self.memory_counter += 1</code></pre><p>接着是learning函数</p><pre><code class="python">    def learn(self):        if self.learn_step_counter % self.replace_target_iter == 0:            self.target_replace_op()            print(&#39;\ntarget_params_replaced\n&#39;)        if self.memory_counter &gt; self.memory_size:            sample_index = np.random.choice(self.memory_size, size=self.batch_size)        else:            sample_index = np.random.choice(self.memory_counter, size=self.batch_size)        batch_memory = self.memory[sample_index, :]        q_next, q_eval = self.model1.predict(batch_memory[:, -self.n_features:]), self.model2.predict(            batch_memory[:, :self.n_features])        q_target = q_eval.copy()        batch_index = np.arange(self.batch_size, dtype=np.int32)        eval_act_index = batch_memory[:, self.n_features].astype(int)        reward = batch_memory[:, self.n_features + 1]        q_target[batch_index, eval_act_index] = reward + self.gamma * np.max(q_next, axis=1)        self.model2.fit(batch_memory[:, :self.n_features], q_target, epochs=10)        self.epsilon = self.epsilon + self.epsilon_increment if self.epsilon &lt; self.epsilon_max else self.epsilon_max        self.learn_step_counter += 1</code></pre><p>其他部分和莫凡代码是一样的，就不贴出来了。</p><p>完整的网络部分代码和环境部分代码放在github上了：<a href="https://github.com/Jason33Wang/ReinforcementLearning_by_keras" target="_blank" rel="noopener">https://github.com/Jason33Wang/ReinforcementLearning_by_keras</a></p><p>注明：DQN.py和maze_env.py文件是直接fork莫凡的</p><p>下面也贴上原莫凡的tensorflow代码：<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network</a></p><p>用keras搭建的网络用来训练这个游戏时，收敛的并没有莫凡原代码收敛的好，之后在原基础上，把memory的size增加了一倍后才收敛的较好。</p><p>写完这篇文章后，发现没什么技术含量，不过自己的思路更加清晰了，大家仅供参考吧。希望自己经过以后的学习能写出更好，更有深度的文章吧！</p>]]></content>
    
    
    <categories>
      
      <category>日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reinforecementLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>imageDataGenerator</title>
    <link href="/2018/09/02/imageDataGenerator/"/>
    <url>/2018/09/02/imageDataGenerator/</url>
    
    <content type="html"><![CDATA[<p>在深度学习中，我们在<strong>trian</strong>我们的模型时，往往在数据方面很难找到足够的数据。而在<strong>keras</strong>中，提供了<strong>imageDataGenerator</strong></p><p><strong>iamgeDataGenerator</strong>是一个生成器类，可以将我们输入的原始数据自动经过平移、旋转等操作，生成无限的差异性图片。在这里有意思的是在官方文档中，是用的无限（<strong>infinite</strong>）这个形容词。</p><p>方法如下：</p><p>1、实例一个生成器</p><pre><code class="python">datagen = ImageDataGenerator(    featurewise_center=True,    featurewise_std_normalization=True,    rotation_range=20,    width_shift_range=0.2,    height_shift_range=0.2,    horizontal_flip=True)</code></pre><p>2、<code>.fit</code>方法</p><p>该方法用来计算各种操作的统计信息。</p><p>在笔者看来是类似于生成随机数，我们要生成一个seed</p><p><code>datagen.fit(x_train)</code></p><p>3、 <code>.flow</code>方法</p><p>该方法用来生成无限的图片</p><p><code>datagen.flow(x_train, y_train, batch_size=32)</code></p><p>4、接着就可以用生成的数据进行愉快的训练啦</p><p>对于这些实时产生的数据，我们可以调用<strong>fit_generator</strong>接口，实时的利用这些数据进行训练我们的模型</p><pre><code class="python">fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_q_size=10, workers=1, pickle_safe=False, initial_epoch=0)</code></pre><p>利用的Python的生成器，逐个生成数据的批次并进行训练。生成器与模型将并行执行以提高效率。例如，该函数允许我们在CPU上进行实时的数据提升，同时在GPU上进行模型训练</p><p>函数的参数是：</p><ul><li><p>发电机：生成器函数，生成器的输出应该为：</p></li><li><ul><li>一个形如（输入，目标）的元组</li><li>一个形如（inputs，targets，sample_weight）的元组。所有的返回值都应该包含相同数目的样本。生成器将无限在数据集上循环。每个<strong>epoch</strong>以经过模型的样本数达到<strong>samples_per_epoch</strong>时，记一个<strong>epoch</strong>结束</li></ul></li><li><p><strong>steps_per_epoch</strong>：整数，生成当器报道查看<strong>steps_per_epoch</strong>次数据时计一个历元结束，执行下一个历元</p></li><li><p><strong>epochs</strong>：整数，数据迭代的轮数</p></li><li><p><strong>verbose</strong>：日志显示，0为不在标准输出流输出日志信息，1为输出进度条记录，2为每个历元输出一行记录</p></li><li><p><strong>validation_data</strong>：具有以下三种形式之一</p></li><li><ul><li>生成验证集的生成器</li><li>一个形如（输入，目标）的元组</li><li>一个形如（输入，目标，<strong>sample_weights</strong>）的元组</li></ul></li><li><p><strong>validation_steps</strong>：当<strong>validation_data</strong>为生成器时，本参数指定验证集的生成器返回次数</p></li><li><p><strong>class_weight</strong>：规定类别权重的字典，将类别映射为权重，常用于处理样本不均衡问题。</p></li><li><p><strong>sample_weight</strong>：权值的<strong>numpy</strong>数组，用于在训练时调整损失函数（仅用于训练）。可以传递一个1D的与样本等长的向量用于对样本进行1对1的加权，或者在面对时序数据时，传递一个的形式为（样本，<strong>sequence_length</strong>）的矩阵来为每个时间步上的样本赋不同的权。这种情况下请确定在编译模型时添加了<strong>sample_weight_mode=’temporal’。</strong></p></li><li><p><strong>wokers</strong>：最大进程数</p></li><li><p><strong>max_q_size</strong>：生成器队列的最大容量</p></li><li><p><strong>pickle_safe</strong>：若为真，则使用基于进程的线程。由于该实现依赖多进程，不能传递<strong>non picklable</strong>（无法被pickle序列化）的参数到生成器中，因为无法轻易将它们传入子进程中。</p></li><li><p><strong>initial_epoch</strong>：从该参数指定的<strong>epoch</strong>开始训练，在继续之前的训练时有用。</p></li></ul><p>同样的，我们有<strong>evaluate_generator</strong></p><pre><code class="python">evaluate_generator(self, generator, steps, max_q_size=10, workers=1, pickle_safe=False)</code></pre><p>本函数使用一个生成器作为数据源评估模型，器生成应报道查看与test_on_batch的输入侧数据相同类型的数据。函数该参数的与fit_generator同名参数含义相同，步骤是生成器要返回数据的轮数。</p><p>同样的，我们有<strong>predict_generator</strong></p><pre><code class="python">predict_generator(self, generator, steps, max_q_size=10, workers=1, pickle_safe=False, verbose=0)</code></pre><p>本函数使用一个生成器作为数据源预测模型，器生成应报道查看与<strong>test_on_batch</strong>的输入侧数据相同类型的数据。函数该参数的与<strong>fit_generator</strong>同名参数含义相同，步骤是生成器要返回数据的轮数。</p><p>5、我们也有另外一种训练模型的方法：</p><pre><code class="python">for e in range(epochs):print(&#39;Epoch&#39;, e)batches = 0for x_batch, y_batch in datagen.flow(x_train, y_train, batch_size=32):loss = model.fit(x_batch, y_batch)batches += 1if batches &gt;= len(x_train) / 32:# we need to break the loop by hand because# the generator loops indefinitelybreak</code></pre>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>keras</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>苟有恒，何必三更睡五更起。最无益，莫过一日曝十日寒</title>
    <link href="/2018/09/02/%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
    <url>/2018/09/02/%E6%AD%A3%E8%83%BD%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>#看到的好的句子就记下来激励自己</p>]]></content>
    
    
    <categories>
      
      <category>警句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>警句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql笔记</title>
    <link href="/2018/09/02/mysql%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/09/02/mysql%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql学习笔记"><a href="#mysql学习笔记" class="headerlink" title="mysql学习笔记"></a>mysql学习笔记</h1><h1 id="sql的分类"><a href="#sql的分类" class="headerlink" title="sql的分类"></a>sql的分类</h1><ul><li>数据查询语言（dql ：data query language）<ul><li>代表关键字：select</li></ul></li><li>数据操作语言（dml：data manipulation language）<ul><li>代表关键字：insert，delete，update</li></ul></li><li>数据定义语言（ddl：data definition language）<ul><li>代表关键字：create，drop，alter</li></ul></li><li>事物控制语言（tcl：transactional control language）<ul><li>代表关键字：commit，rollback</li></ul></li><li>数据控制语言（dcl：data control language）<ul><li>代表关键字：grant，revoke</li></ul></li></ul><pre><code class="mysql">#创建数据库create database fliename；#选择数据库use database_name#查询当前数据库select database();#查询数据版本select version();#终止当前语句\c#退出mysql\q,QUIT，EXIT#显示命令show databasesshow tablesdesc tabele_name#查看怎么创建的某个表show create table 【name】</code></pre><h1 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h1><pre><code class="mysql">#无所谓大小写select 【字段，字段，字段】 from 表#条件查询select 【 】 from  表 where 表达式找出工作岗位是manger和工作岗位是salesman的员工######################################select     ename，jobfrom     empwhere    job= &#39;manger&#39; or job=&#39;salesman&#39;；等同于select     ename,jobfrom    empwhere    job in (&#39;manger&#39;,&#39;salesman&#39;)；######################################3like 用法： 其中%代表0～n个字符  _代表一个任意字符select ename from emp where ename like &#39;%o%&#39;  模糊查询###################################################</code></pre><h1 id="升序排列，降序排列"><a href="#升序排列，降序排列" class="headerlink" title="升序排列，降序排列"></a>升序排列，降序排列</h1><pre><code class="mysql">select ename，sal from emp order by sal asc；#升序排列select ename，sal from emp order by sal desc；#降序排列</code></pre><h1 id="数据处理函数-单行处理函数"><a href="#数据处理函数-单行处理函数" class="headerlink" title="数据处理函数/单行处理函数"></a>数据处理函数/单行处理函数</h1><table><thead><tr><th>Lower</th><th>转换成小写</th></tr></thead><tbody><tr><td>upper</td><td>转换成大写</td></tr><tr><td>substr</td><td>取子字符串（substr（被截取的字符串，起始下标，截取的长度））</td></tr><tr><td>length</td><td>去长度</td></tr><tr><td>trim</td><td>去空格</td></tr><tr><td>str_to_date</td><td>将字符串转换成日期</td></tr><tr><td>date_format</td><td>格式化日期</td></tr><tr><td>format</td><td>设置千分位</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>rand()</td><td>生成随机数</td></tr><tr><td>ifnull</td><td>可以将null转换成一个具体值</td></tr></tbody></table><h1 id="关于mysql中的日期处理"><a href="#关于mysql中的日期处理" class="headerlink" title="关于mysql中的日期处理"></a>关于mysql中的日期处理</h1><ul><li><p>每一个数据库处理日期的时候，采用的机制是不同的，日期处理都有自己的一套机制。所以在实际的开发中，表中的字段定义为DATA类型，这种情况很少。因为一旦使用日期类型，那么java程序将不能够通用那么在实际开发中，一般会使用”日期字符串“来表示日期</p></li><li><p>日期是数据库本身的特色，也是数据库本身机制中的一个重要的内容，所以还是需要掌握</p></li><li><p>MYSQL数据库管理系统中对日期提供了两个重要的函数：</p><p>-str_to_date</p><p>-date_format</p></li><li><p>str_to_date</p><p>该函数的作用是：将”日期字符串“转换成”日期类型“数据。【varchar—&gt;date】</p><p>该函数的执行结果是date类型</p><p>该函数的使用格式：</p><p>​               str_to_date(‘日期类型’,’日期格式’)</p><p>关于MYSQL中的日期格式：</p><pre><code>    回顾java中的日期格式：</code></pre><p>​            yyyy        年</p><p>​            MM        月</p><p>​            dd        日</p><p>​            HH        时</p><p>​            mm        分</p><p>​            ss        秒</p><p>​            SSS        毫秒</p><p>java中将字符串转换成日期类型：</p><p>​    </p><pre><code class="java">SimpleDateFormat sdf = new SimpleDateFormat（&quot;yyyy-MM-dd&quot;）Date date = sdf.parse(&quot;1970-10-10&quot;)</code></pre><p>MYSQL的日期格式：</p><p>|  %Y  | 年   |<br>| :–: | —- |<br>|  %m  | 月   |<br>|  %d  | 日   |<br>|  %H  | 时   |<br>|  %i  | 分   |<br>|  %s  | 秒   |</p></li><li><p>案例：查询出1980-12-17入职的员工</p><pre><code class="mysql">select ename from hirdate from emp where hirdate=&#39;1980-12-17&#39;#mysql默认的日期格式：%Y-%m-%d，以上的日期字符串&#39;1980-12-17&#39;正好和默认的日期格式一致，存在了自动类型转换，自动将日期字符串转换了日期类型，所以以上查询可以查询出结果。#如果写下面语句则会报错select ename from hirdate from emp where hirdate=&#39;12-17-1980&#39;#想要纠正错误可以改成以下语句select ename from hirdate from emp where hirdate=str_to_date(&#39;12-17-1980&#39;,&#39;%m-%d-%Y&#39;)</code></pre></li><li><p>date_format </p><ul><li><p>该函数的作用是：将日期类型date转换成具有特定格式的日期字符串varchar</p></li><li><p>该函数的运算结果是：varchar类型【具备特定格式的】</p></li><li><p>该函数的语法的格式：</p><p>​    date_format(日期类型数据，’日期格式’)</p></li><li><p>多用于查询操作</p></li></ul></li></ul><h1 id="分组函数-聚合函数-多行处理函数"><a href="#分组函数-聚合函数-多行处理函数" class="headerlink" title="分组函数/聚合函数/多行处理函数"></a>分组函数/聚合函数/多行处理函数</h1><table><thead><tr><th>count</th><th>取得记录数</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>取平均</td></tr><tr><td>max</td><td>取最大的数</td></tr><tr><td>min</td><td>取最小的数</td></tr></tbody></table><p>以上函数自动忽略空值，分组函数不能使用在where语句中</p><h1 id="去除重复内容"><a href="#去除重复内容" class="headerlink" title="去除重复内容"></a>去除重复内容</h1><p>distinct只能放在记录最前面</p><pre><code class="mysql">select distinct job from emp；select distinct deptno，job from emp；#将两个字段同时来看</code></pre><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><ul><li><p>group by </p><ul><li><p>group by 【表示通过哪个或者哪些字段进行排序】</p></li><li><p>案例：找出每个工作岗位的最高薪水</p></li><li><p><code>`</code>mysql<br>#先按照工作岗位分组，使用max函数求每一组的最大值<br>select max(sal) from emp group by job<br>#其中 emp group by job 是一个整体<br>#表示先按照job分组，然后对每一组使用max（sal）求最高薪水</p></li></ul></li></ul><pre><code>#在这里有个坑select ename,job,max(sal) from emp group by job#在低版本的mysql中这个语句是可以执行的但是执行结果没有意义，这是由于语法在这方面比较松散，不严格。因为ename这个字段根本不是分组字段所以是不能放在select后面的。在其他数据库中比如oracle中时会报错的#重点：若一条DQL语句中有group by 子句，那么select关键字后面只能跟参与分组的字段和分组函数```</code></pre><ul><li><p>having</p><ul><li><p>having和where功能相同都是为了完成数据的过滤</p></li><li><p>where和having后面都是添加条件</p></li><li><p>where在group by之前完成过滤</p></li><li><p>having在group 后面完成过滤</p></li><li><p>案例：找出每个工作岗位的平均薪水，要求显示平均薪水大于1500</p></li><li><pre><code class="mysql">select job,avg(sal) from emp group by job having avg(sal)&gt;1500</code></pre></li><li><p>原则：</p><ul><li>尽量在where中过滤，无法过滤的数据，通常都是需要先分组之后再过滤的，这个时候可以选择使用having。</li></ul></li></ul></li><li><p>一个完整的DQL语句的总结：</p><p>select </p><p>​    ×××××</p><p>from</p><p>​    ×××××</p><p>where</p><p>​    ×××××</p><p>group</p><p>​    ×××××</p><p>having</p><p>​    ×××××</p><p>order by</p><p>​    ×××××</p><p>第一：以上的关键字顺序不能变，严格遵守</p><p>第二：执行顺序：</p><p>​    1、from                从某张表中检查数据</p><p>​    2、where            经过某条件进行过滤</p><p>​    3、group             然后分组</p><p>​    4、having            分组之后不满意在过滤</p><p>​    5、select            查询出来</p><p>​    6、order by            排序输出</p></li></ul><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><ul><li><p>连接查询，也可以叫跨表查询，需要关联多个表进行查询</p></li><li><p>链接查询根据出现的年代分类：</p><ul><li>sql92</li><li>sql99</li></ul></li><li><p>链接查根据链接方式可以分为：</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li><li>全连接【不讲，使用很少】</li></ul></li><li><p>当多张表进行连接查询，若没有任何条件限制，会发生什么现象？</p><p>案例1：查询每个员工所在的部门名称，要求最终显示员工名和对应的部门名。</p><ul><li><p>小知识点：在进行多表连接查询的时候，尽量给表起别名，这样效率高，可读性高。</p><pre><code class="mysql">select e.ename,d.dname from emp e,dept d;#如果不增加任何限制的话会出现笛卡尔积现象#注意：连接查询过程中虽然使用了限制条件，但是匹配的次数没有减少，还是相乘次数，只不过这一次显示的结果都是有效记录select e.ename,d.dname from emp e,dept d where e.xx = d.xx</code></pre></li></ul><p>案例2：找出每一个员工对应的工资等级，要求显示员工名，工资，工资等级</p><ul><li><pre><code class="mysql">#sql99语法中的等值连接中的非等值连接select e.ename,e.sal,s.grade from emp e 【inner】 join salgrade s on e.sal between s.local ans s.hisal#sql92语法：select e.ename,e.sal,s.grade from emp e ， salgrade s where e.sal between s.local ans s.hisal</code></pre></li></ul><p>案例3：找出每一个员工的上级领导，要求显示员工名以及对应的领导名</p><ul><li><pre><code class="mysql">#同一张表，我们需要吧一张表看成两张表#sql99语法中内连接中的非等值连接select a.ename empname ,b.ename leadername from emp a 【inner】join emp b on a.mgr = b.empno;</code></pre></li></ul><p>案例4：找出每一个员工对应的部门名称，要求部门名称全部显示</p><ul><li><pre><code class="mysql">#内连接：#    a表和b表能够完全匹配的记录查询出来，就被称为内连接#外连接：#    a表和b表能够完全匹配的记录查询出来之外，将其中一张表的记录无条件的      完全查询出来，对方表没有匹配的记录，会自动模拟出null与之匹配，这种     查询被称为外链接。    外连接查询的结果条数&gt;=内连接的查询结果条数#sql99语法：外连接中的右外连接【右连接】select e.ename,d.dname from emp e right 【outer】 join dept d on e.deptno = deptno; #outer可以省略#sql99语法：外连接中的左外连接【左连接】select e.ename,d.dname from dept d left 【outer】 join emp e on e.deptno = deptno; #outer可以省略#上面两种写法是相同的，任何一个右外连接都可以写成左外连接，反之同样成立</code></pre><p>为什么inner和outer可以省略，加上去有什么好处？</p><ul><li>可以省略，因为区分内连接和外连接依靠的不是这些关键字，而是看sql             语句中是否存在right和left，若存在，表示一定是一个外连接，其他的都是内连接<ul><li>加上去的好处是增强可读性</li></ul></li></ul></li></ul></li></ul><p>  多张表进行表连接的语法格式：</p><p>  select   xxx  from  a </p><p>  join </p><p>  ​    b</p><p>  on</p><p>  ​    条件</p><p>  join</p><p>  ​    c</p><p>  on</p><p>  ​    条件；</p><p>  原理：</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>1、什么是子查询？</p><ul><li>select语句嵌套select语句</li></ul><p>2、子查询可以出现在哪而？</p><ul><li><p>select…(select)</p><p>from…(select)</p><p>where..(select)</p></li></ul><p>3、where后面添加select子查询</p><p>案例：找出薪水比公司平均薪水高的员工，要求显示员工名和薪水。</p><ul><li><pre><code class="mysql">select ename，sal from emp where sal &gt; avg(sal)#以上语句执行报错，分组函数不能直接使用在where后面#正确做法#第一步：找出公司的平均薪水#第二部：找出薪水大于平均薪水的员工信息select ename,sal from emp where sal &gt; (select avg(sal) from emp)</code></pre></li></ul><p>4、from后面使用子查询</p><p>案例：找出每个部门的平均薪水，并且要求显示平均薪水的薪水等级。</p><p>第一步：找出每个部门的平均薪水</p><pre><code class="mysql">select deptno, avg(sal) as avgsal from emp group by deptno;</code></pre><p>第二步：将上面的临时查询结果当做临时表t，t表进行表连接，条件：t.avg(sal) between s.local and s.hisal</p><pre><code class="mysql">select     t.deptno,t.avgsal,s.grade from     (select deptno, avg(sal) as avgsal from emp group by deptno) tjoin    salgrade s on     t.avgsal between s.local and s.hisal;</code></pre><p>5、在select后面使用子查询【了解】</p><pre><code class="mysql">select e.ename,(select d.dname from dept d where e,deptno = d.deptno) as dname from emp e;</code></pre><h1 id="union"><a href="#union" class="headerlink" title="union"></a>union</h1><p>union可以合并集合（相加）</p><pre><code class="mysql">select    ename,job from emp where job = &quot;manager&quot;unionselect  ename,job from emp where job = &quot;salesman&quot;#等同于以下写法select ename,job from emp where job in [&quot;manager&quot;,&quot;salesman&quot;]</code></pre><h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><ul><li>limit用来获取一张表中的某部分数据</li><li>limit只有在mysql数据库中存在，不通用，是mysql数据库管理系统的特色</li></ul><pre><code class="mysql">#案例1：找出员工表中前5条记录select ename from emp limit 5；#以上的sql语句的“limit 5”中的5表示从表中记录下标0开始，取5条等同于下面的sql语句select ename from emp limit 0,5；#limit的使用语法格式：limit起始下标没有指定，默认从0开始，0表示表中第一条记录。#案例2：找出公司中工资排名在前5名的员工select ename,sal from emp order by sal desc limit 5;</code></pre><ul><li>mysql中通用的分页sql语句：</li></ul><pre><code class="mysql">#每页显示3条记录每页显示3条记录第1页：0,3第2页：3,3第3页：6,3第4页：9,3.。。。。每页显示pagesize条记录第pageNo页：（pageNo-1）×pagesize，pageSizeselect ename,sal from emp order by sal desc limit （（pageNo-1）×pagesize，pageSize）;</code></pre><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><ul><li><p>创建表</p><ul><li>表格（table），用来存储数据，表格是一种结构化文件。</li><li>表格行被称为记录（表中的数据），表格列被称为字段。</li><li>表格的字段属性包括：字段名称、字段数据类型、字段长度、字段约束</li></ul></li><li><pre><code class="mysql">create table tableName（    columnName dataType(length),    columnName dataType(length)）;set character_set_results=&#39;gbk&#39;;</code></pre></li><li><p>关于mysql数据库中的数据类型？</p><ul><li>varchar        可变长度字符串<ul><li>空间效率高，时间效率低</li></ul></li><li>char                定长字符串<ul><li>时间效率高，但是空间效率不一定会高</li></ul></li><li>int                   整数型<ul><li>int(3)表示最大可以存储999</li></ul></li><li>bigint              长整形<ul><li>对应的java程序中的lon类型</li></ul></li><li>float                浮点型单精度</li><li>double            浮点型双精度<ul><li>double（7,2）表示7个有效数字，2个小数位</li></ul></li><li>date                日期类型<ul><li>在实际来发中为了通用，所以日期类型一般不适用，采用字符串代替日期类型比较多</li></ul></li><li>blob                 Binary Largre Object二进制大对象<ul><li>专门存储图片声音视频等数据</li><li>数据库表中存储一个图片是很常见的，但是存储一个比较大的视频是很少见的，一般都是提供一个视频的链接地址</li></ul></li><li>clob                  character Large Object字符大对象<ul><li>可以存储比较大的文本，4G+的字符串可以存储</li></ul></li><li>其他</li></ul></li></ul><h1 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h1><ul><li>向表格插入数据必须是使用insert语句，这属于dml语句</li><li>dml语句包括：insert，update，delete、</li><li>insert语句的语法格式：<ul><li>insert into tablename （columnname1，columnname2，columnname3）values（value1，value2，value3）</li></ul></li><li>字段和值必须一一对应，个数必须相同，数据类型必须一致。</li></ul><h1 id="关于sql脚本"><a href="#关于sql脚本" class="headerlink" title="关于sql脚本"></a>关于sql脚本</h1><ul><li>该文件是一个普通的文本文件，后缀名.sql，被称为sql脚本</li><li>在sql脚本中有大量的sql语句，想批量的执行sql语句，可以将这些sql语句写入sql脚本文件中，直接使用source执行这个脚本，可以执行大量的sql语句</li><li></li></ul><h1 id="增删改表结构-不是很重要-（DDL）"><a href="#增删改表结构-不是很重要-（DDL）" class="headerlink" title="增删改表结构(不是很重要)（DDL）"></a>增删改表结构(不是很重要)（DDL）</h1><pre><code class="mysql">#如需求改变，需要向t_studnts中加联系电话字段，字段名称为：contact_tel 类型为varchar（40）#增alter table t_student add contact_tel varchar(40)#将长度改为20#改alter table t_student modify tel varchar(20)#删alter table t_student drop tel</code></pre><h1 id="增删改表中的数据【insert、update、delete】"><a href="#增删改表中的数据【insert、update、delete】" class="headerlink" title="增删改表中的数据【insert、update、delete】"></a>增删改表中的数据【insert、update、delete】</h1><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><ul><li><p>update语句的语法格式：</p><ul><li>update tablename set 字段名 = 字段值，字段名 = 字段值，where 条件；</li></ul></li><li><p>注意：update语句没有条件，会将一张表中所有的数据全部更新</p></li><li><pre><code class="mysql">#将no=3的记录name修改为zhangsan，email修改为zhangsan@bjpowernode.comupdate t_student set name=&#39;zhangsan&#39;,email =&#39;zhangsan@bjpowernode.com&#39; where no = 3;#将所有的name都修改为lisiupdate t_student set name = &#39;lisi&#39;;#将emp_bak中的所有的名字中含有o的员工名修改为zhangsanupdate emp_bak set ename = &#39;zhangsan&#39; where ename like &#39;%o%&#39;;#将emp_bak表中所有工作岗位是manager和salesman的员工工资上调10%update emp_bak set sal=sal*1.1 where job = &#39;manager&#39; or job = &#39;salesman&#39;</code></pre></li></ul><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul><li><p>delete 语句的语法格式：</p><ul><li>delete from tablename where 条件</li></ul></li><li><p>注意：若没有条件限制，会将这种表中所有的记录全部删除</p></li><li><pre><code class="mysql">#删除学号=3的学生delete from t_student where no = 3#删除所有记录delete from t_student</code></pre></li></ul><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul><li><p>什么是约束，为什么要使用约束？</p><ul><li>约束对应的英语单词：constraint</li><li>约束实际上就是表中数据的限制条件</li><li>表在设计的时候加入约束的目的就是为了保证表中的记录完整和有效 </li></ul></li><li><p>约束包括哪些？</p><ul><li>非空约束            not null</li><li>唯一性约束             unique</li><li>主键约束                 primary key 简称PK</li><li>外键约束                 foreign key   简称FK</li><li>检查约束【目前mysql不支持，oracle支持】      </li></ul></li><li><p>非空约束</p><ul><li><p>not null约束的字段，不能为NULL值，必须给定具体的数据</p></li><li><p>创建表，给字段添加非空约束【创建用户表，用户名不能为空】</p></li><li><pre><code class="mysql">create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128));</code></pre></li></ul></li><li><p>唯一性约束</p><ul><li><p>unique约束的字段具有唯一性，不可重复</p></li><li><pre><code class="mysql">#创建用户，保证邮箱地址唯一#列级约束create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) unique);#表级约束create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    unique（email）);#注意，使用表级约束给多个字段联合添加约束【以下程序表示name和email两个字段联合唯一】create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    unique（name,email）);#表级约束还可以给约束起名字#为什么要起名字，因为以后可以通过这个名字删除这个约束drop table if exist t_user;create table t_user(    id int(10),    name varchar(32) not null not null,    email varchar(128) ，    constraint t_user_email_unique unique（name,email）);#查询约束名字use information_schema;show tables;#其中有个表叫table_constraint的表专门用来存储约束信息的select constraint_name from table_constraints where table_name=&#39;t_user&#39;;</code></pre></li></ul></li><li><p>主键约束-primary key 简称PK</p><ul><li><p>主键涉及到的术语：</p><ul><li>主键约束</li><li>主键字段</li><li>主键值</li></ul></li><li><p>以上的主键约束、主键字段、主键值的关系？</p><ul><li>表中的某个字段添加主键约束之后，该字段被称为主键字段，主键字段中出现的每一个数据都被称为主键值。</li></ul></li><li><p>给某个字段添加主键约束primary key后，该字段不能重复，并且也不能为空。效果和not null unique相同，但是本质不同，主键约束除了可以做到not null unique之外，主键字段还会默认添加“索引-index”</p></li><li><p>一张表应该有主键字段，若没有，表示这张表是无效的。“主键值”是当前行数据的唯一标识。“主键值”是当前行数据的身份证号。即使表中的两行记录相关的数据是相同的，但是由于主键值不同，我们认为这是两行完全不同的数据。</p></li><li><p>给一个字段添加主键约束，被称为单一主键。</p></li><li><pre><code class="mysql"> #单一主键 #列表定义方式   drop table if exist t_user;   create table t_user(      id int(10) primary key,    name varchar(32)   )   #单一主键   #列表定义方式   drop table if exist t_user;   create table t_user(     id int(10),    name varchar(32)，    primary key（id）   )</code></pre><pre><code></code></pre></li><li></li><li><p>给多个字段联合添加一个主键约束，被称为复合主键。</p></li><li><p>无论是单一主键还是复合主键，一张表主键约束只能有一个</p></li><li><p>主键根据性质分类：</p><ul><li>自然主键<ul><li>主键值若是一个自然数，这个自然数和当前表的业务没有任何关系，这种主键叫做自然主键 。</li></ul></li><li>业务主键<ul><li>主键值若和当前表中业务紧密相关的，那么这种主键值被称为业务主键，当业务数据发生改变的时候，主键值通常会受到影响，所以业务主键使用较少。大部分都是使用自然主键。</li></ul></li></ul></li><li><p>在mysql数据库管理系统中提供了一个自增的数字，专门用来自动生成主键值。主键值不需要用户维护，也不需要用户提供了，自动生成的。这个自增的数字默认从1开始，以1递增：1、 2、 3、 …….</p><ul><li><pre><code class="mysql">drop table if exist t_uesr;create table t_user(    id int(10) primary key auto_increment,    name varchar(32))</code></pre><code>`</code></li></ul><p><code>`</code></p></li></ul></li><li><p>外键约束 foreign key 简称FK</p><ul><li><p>外键涉及到的术语</p><ul><li>外键约束</li><li>外键字段</li><li>外键值</li></ul></li><li><p>外键约束、外键字段、外键值之间的关系？</p><ul><li>某个字段添加外键约束之后，该字段称为外键字段，外键字段中的每一个数据都是外键值。</li></ul></li><li><p>外键也分为：单一外键和复合外键（联合多个字段添加一个外键）</p></li><li><p>一张表中可以有多个外键字段。</p></li><li><p>分析场景：</p><p>请设计数据库用来存储学生和班级信息，给出两种解决方案：</p><p>学生信息和班级信息之间的关系，一个班级对应多个学生，这是典型的一对多的关系。</p><p>第一种设计方案：将学生信息和班级信息存储到一张表中。</p><p>学生信息表t_student</p><p>sno(pk)             sname               classno                     cname</p><hr><p>1                         jack                   100                            实验中学1班</p><p>2                         allen                 200                             实验中学2班</p><p>3                         lucy                   200                            实验中学2班                     </p><p>4                         lisi                     300                            实验中学3班</p><p><u>以上设计缺点：数据冗余</u></p><p>第二种解决方案：将学生信息和班级信息分开两张表存储你，学生表 + 班级表</p><p>学生表t_student</p><p>sno(pk)             sname            classno（fk）</p><hr><p>1                         jack                   100</p><p>2                         allen                 200</p><p>3                         lucy                  200</p><p>4                         lisi                     300</p><p>班级表t_class</p><p>cno(pk)       cname</p><hr><p>100               实验中学1班</p><p>200               实验中学2班</p><p>300               实验中学3班</p><p>结论：为了保证t_student表中的classno字段中的数据必须来自于t_class表中cno字段中的数据，有必要给t_student表中的classno字段添加外键约束，classno字段被称为外键字段，该字段中的100、 200、 300、被称为外键值。classno这里是一个单一外键字段</p><p>注：外键值可以为null。</p><p>注：外键字段去引用一张表的某一个字段的时候，被引用的字段必须具有unique约束。</p><p>注：有了外键引用之后，表分为父表和子表，以上父表是：班级表，子表是：学生表。创建表先创建父表，在创建子表，删除数据的时候，先删除子表中的数据，后删除父表中的数据。插入数据的时候先插入父表中的数据，再插入子表中的数据</p><pre><code class="mysql">insert into t_student(sno,sname,classno) value(1,&#39;&#39;,100);insert into t_student(sno,sname,classno) value(1,&#39;&#39;,100);drop table if exists t_student;drop table if exists t_class;create table t_class(    cno int(3) primary key,    cname varchar(128) not null unique);create table t_students(    sno int(3) primary key,    sname varchar(32) not null,    classno int(3),    constraint t_student_classno_fk foreign key(classno) reference t_class(cno));insert into t_class(cno,cname) value(100,&#39;高三一班&#39;)；insert into t_class(cno,cname) value(200,&#39;高三二班&#39;)；insert into t_class(cno,cname) value(300,&#39;高三三班&#39;)；insert into t_student(sno,sname,classno) value(1,&#39;jack&#39;,100);insert into t_student(sno,sname,classno) value(2,&#39;tom&#39;,100);insert into t_student(sno,sname,classno) value(3,&#39;lucy&#39;,200);insert into t_student(sno,sname,classno) value(4,&#39;king&#39;,200);insert into t_student(sno,sname,classno) value(5,&#39;wang&#39;,300);insert into t_student(sno,sname,classno) value(6,&#39;lisi&#39;,300);select * from t_studengt;select * from t_class;</code></pre><p>重点：典型的一对多的设计模式，在多的一方加外键。</p></li></ul></li></ul><h1 id="级联更新和经联删除"><a href="#级联更新和经联删除" class="headerlink" title="级联更新和经联删除"></a>级联更新和经联删除</h1><ul><li>添加级联更新和级联删除的时候需要在外键约束后面添加</li><li>在删除父表中的数据时，级联删除子表中的数据 on delete cascade<ul><li>删除外键约束<ul><li>alter table t_student drop foreign key fk_name;</li></ul></li><li>添加外键约束<ul><li>alter table t_student add constraint   fk_name foreign key (classno) references t_class(cno) on delete cascade</li></ul></li></ul></li><li>在更新父表中的数据时，级联更新子表中的数据 on update cascade<ul><li>删除外键约束<ul><li>alter table t_student drop foreign key fk_name;</li></ul></li><li>添加外键约束<ul><li>alter table t_student add constraint   fk_name foreign key (classno) references t_class(cno) on update cascade</li></ul></li></ul></li><li>以上的级联更新和级联删除谨慎使用，因为级联操作会将数据改变或者删除【数据无价】</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
